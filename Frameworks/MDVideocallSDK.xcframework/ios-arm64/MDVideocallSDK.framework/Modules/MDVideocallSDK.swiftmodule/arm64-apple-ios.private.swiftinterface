// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MDVideocallSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVFoundation
import AdSupport
import AppTrackingTransparency
import AudioToolbox
import Combine
import CommonCrypto
import CoreLocation
import CoreTelephony
import Dispatch
import Foundation
import ImageIO
import Lottie
@_exported import MDVideocallSDK
import MobileCoreServices
import OpenTok
import Photos
import PhotosUI
import Realm
import RealmSwift
import RxSwift
import Security
import SocketIO
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers public class ScoreEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  final public let freemium: RealmSwift.RealmOptional<Swift.Int>
  final public let processing: RealmSwift.RealmOptional<Swift.Int>
  final public let formalized: RealmSwift.RealmOptional<Swift.Int>
  final public let canceled: RealmSwift.RealmOptional<Swift.Int>
  final public let timestamp: RealmSwift.RealmOptional<Foundation.TimeInterval>
  @objc dynamic public var updatedAt: Foundation.Date
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.ScoreEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case freemium
    case processing
    case formalized
    case canceled
    case timestamp
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension MDVideocallSDK.ScoreEntity {
  convenience public init(contact: MDVideocallSDK.ContactEntity)
  public func freemium(from contact: MDVideocallSDK.ContactEntity) -> Swift.Int
  public func processing(from contact: MDVideocallSDK.ContactEntity) -> Swift.Int
  public func formalized(from contact: MDVideocallSDK.ContactEntity) -> Swift.Int
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func handleCurrentVideoCall(origin: UIKit.UIViewController? = nil, animated: Swift.Bool = true, completion: @escaping ((MDVideocallSDK.MeetingDoctorsResult<Swift.Void>) -> Swift.Void))
  final public class func checkCurrentVideoCallStatus(completion: @escaping ((MDVideocallSDK.MeetingDoctorsResult<MDVideocallSDK.MeetingDoctorsVideoCallStatus>) -> Swift.Void))
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func startVideocall(from presenterViewController: UIKit.UIViewController)
  final public class func getVideocallInitialViewController() -> UIKit.UIViewController
  final public class func hasAnyVideocallStarted(completion: @escaping (Swift.Bool) -> Swift.Void)
}
extension MDVideocallSDK.MDHTTP {
  public enum Header {
    public enum Key : Swift.String {
      case accept
      case contentType
      case origin
      case apiKey
      case cacheControl
      case authorization
      case acceptLanguage
      public func callAsFunction() -> Swift.String
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Value : Swift.String {
      public enum Application : Swift.String {
        case json
        case xWWWFormUrlEncoded
        public func callAsFunction() -> Swift.String
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public enum ContentType : Swift.String {
        case binary
        case svg
        public func callAsFunction() -> Swift.String
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      case noCache
      case bearer
      public func callAsFunction() -> Swift.String
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
}
extension Swift.Decodable {
  public static func decode(_ decoder: Foundation.JSONDecoder, data: Foundation.Data) throws -> Self
  public static func decode(_ decoder: MDVideocallSDK.CodableMapper, data: Foundation.Data) throws -> Self
}
extension Swift.Encodable {
  public func encode(_ encoder: Foundation.JSONEncoder) throws -> Foundation.Data
  public func encode(_ encoder: MDVideocallSDK.CodableMapper) throws -> Foundation.Data
  public var dictionary: [Swift.String : Any]? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDVideocallBaseViewController : MDVideocallSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIAlertAction {
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?, style: UIKit.UIAlertAction.Style, image: UIKit.UIImage?, handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init?(title: Swift.String?, style: UIKit.UIAlertAction.Style, imageNamed imageName: Swift.String, handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set(image)
  }
}
public struct MedicalSpecialitySchema : MDVideocallSDK.MedicalDirectorySchema {
  public let id: Swift.UInt
  public let name: Swift.String
  public let description: Swift.String?
  public init(id: Swift.UInt, name: Swift.String, description: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MedicalSpecialitySchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalSpecialitySchema, rhs: MDVideocallSDK.MedicalSpecialitySchema) -> Swift.Bool
}
public protocol MeetingDoctorsMessageType {
  var id: Swift.String { get }
  var roomId: Swift.String { get }
  var contentType: MDVideocallSDK.MeetingDoctorsMessageContentType { get }
  var contactHash: Swift.String { get }
  var contactSpeciality: Swift.String { get }
}
public enum MeetingDoctorsMessageContentType {
  case text(value: Swift.String)
  case image(url: Foundation.URL)
  case file(url: Foundation.URL)
  case unknown
  public var identifier: Swift.String? {
    get
  }
}
public struct AlamofireVideoCall1to1Adapter : MDVideocallSDK.VideoCall1to1Adapter {
  public func requestVideoCall1to1(_ professionalHash: Swift.String) -> RxSwift.Single<MDVideocallSDK.VideoCall1to1Schema>
  public func cancel(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  public func send(error: MDVideocallSDK.ErrorBodyModel, videoconsultation id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.ErrorSchema>
}
public enum MDVCParticipantProviderResponseEnum : Swift.String, Swift.Codable {
  case opentok
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MDVCParticipantArgumentResponseEnum : Swift.String, Swift.Codable, Swift.Equatable {
  case moderatorUserDisconected
  case moderatorWPDisconected
  case moderatorIssuesAudio
  case moderatorIssuesVideo
  case moderatorIssuesBlocked
  case moderatorUserBehaviour
  case moderatorOther
  case moderatorReportAdded
  case moderatorRejectedVideocall
  case userLongWaiting
  case userTestError
  case userBadConnection
  case userIssueTechnical
  case userNotNeededAnymore
  case userOther
  case userTimeoutWaiting
  case userCreatedNewVideocall
  case connectionIssues
  case empty
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class MDVideocallParticipantResponseModel : Swift.Codable {
  final public let id: Swift.String?
  final public let videocall: Swift.String?
  final public let apiKey: Swift.String?
  final public let type: MDVideocallSDK.MDVideocallType?
  final public let provider: MDVideocallSDK.MDVCParticipantProviderResponseEnum?
  final public let status: MDVideocallSDK.MDVideocallStatusType?
  final public let argument: MDVideocallSDK.MDVCParticipantArgumentResponseEnum?
  final public let consultation: Swift.String?
  final public let speciality: Swift.String?
  final public let session: Swift.String?
  final public let token: Swift.String?
  final public let user: Swift.String?
  final public let name: Swift.String?
  final public let image: Swift.String?
  final public let role: MDVideocallSDK.MDVideocallParticipantType?
  final public let position: Swift.Int?
  final public let time: Swift.Int?
  final public let createdAt: Swift.String?
  final public let updatedAt: Swift.String?
  final public let startedAt: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum MDHTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias MDAParameters = [Swift.String : Any]
public protocol MDAParameterEncoding {
  func encode(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, with parameters: MDVideocallSDK.MDAParameters?) throws -> Foundation.URLRequest
}
public struct MDAURLEncoding : MDVideocallSDK.MDAParameterEncoding {
  public enum Destination {
    case methodDependent, queryString, httpBody
    public static func == (a: MDVideocallSDK.MDAURLEncoding.Destination, b: MDVideocallSDK.MDAURLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets, noBrackets
    public static func == (a: MDVideocallSDK.MDAURLEncoding.ArrayEncoding, b: MDVideocallSDK.MDAURLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric, literal
    public static func == (a: MDVideocallSDK.MDAURLEncoding.BoolEncoding, b: MDVideocallSDK.MDAURLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: MDVideocallSDK.MDAURLEncoding {
    get
  }
  public static var methodDependent: MDVideocallSDK.MDAURLEncoding {
    get
  }
  public static var queryString: MDVideocallSDK.MDAURLEncoding {
    get
  }
  public static var httpBody: MDVideocallSDK.MDAURLEncoding {
    get
  }
  public let destination: MDVideocallSDK.MDAURLEncoding.Destination
  public let arrayEncoding: MDVideocallSDK.MDAURLEncoding.ArrayEncoding
  public let boolEncoding: MDVideocallSDK.MDAURLEncoding.BoolEncoding
  public init(destination: MDVideocallSDK.MDAURLEncoding.Destination = .methodDependent, arrayEncoding: MDVideocallSDK.MDAURLEncoding.ArrayEncoding = .brackets, boolEncoding: MDVideocallSDK.MDAURLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, with parameters: MDVideocallSDK.MDAParameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct MDAJSONEncoding : MDVideocallSDK.MDAParameterEncoding {
  public static var `default`: MDVideocallSDK.MDAJSONEncoding {
    get
  }
  public static var prettyPrinted: MDVideocallSDK.MDAJSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, with parameters: MDVideocallSDK.MDAParameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct MDAPropertyListEncoding : MDVideocallSDK.MDAParameterEncoding {
  public static var `default`: MDVideocallSDK.MDAPropertyListEncoding {
    get
  }
  public static var xml: MDVideocallSDK.MDAPropertyListEncoding {
    get
  }
  public static var binary: MDVideocallSDK.MDAPropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, with parameters: MDVideocallSDK.MDAParameters?) throws -> Foundation.URLRequest
}
@objc public protocol FloatyDelegate {
  @objc optional func emptyFloatySelected(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func floatyShouldOpen(_ floaty: MDVideocallSDK.Floaty) -> Swift.Bool
  @objc optional func floatyWillOpen(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func floatyDidOpen(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func floatyShouldClose(_ floaty: MDVideocallSDK.Floaty) -> Swift.Bool
  @objc optional func floatyWillClose(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func floatyDidClose(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func shallWorkHorizontal() -> Swift.Bool
  @objc optional func floatyWillToggled(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func floatyOpened(_ floaty: MDVideocallSDK.Floaty)
  @objc optional func floatyClosed(_ floaty: MDVideocallSDK.Floaty)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class BadgeView : UIKit.UILabel {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var badgeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var insets: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowOpacityBadge: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowRadiusBadge: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowColorBadge: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowOffsetBadge: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func textRect(forBounds bounds: CoreFoundation.CGRect, limitedToNumberOfLines numberOfLines: Swift.Int) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ContactEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var channel: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var overview: Swift.String?
  @objc dynamic public var specialityId: Swift.String?
  @objc dynamic public var specialityCode: Swift.String?
  @objc dynamic public var speciality: Swift.String?
  @objc dynamic public var nextOnlineAt: Foundation.Date?
  @objc dynamic public var nextOfflineAt: Foundation.Date?
  @objc dynamic public var timezoneValue: Swift.String?
  @objc dynamic public var saturated: Swift.String?
  @objc dynamic public var collegiateNumber: Swift.String?
  final public let timezoneOffset: RealmSwift.RealmOptional<Swift.Int>
  final public let updatedAt: RealmSwift.RealmOptional<Foundation.TimeInterval>
  final public let onHolidays: RealmSwift.RealmOptional<Swift.Bool>
  final public let conversations: RealmSwift.List<MDVideocallSDK.ConversationEntity>
  final public let schedules: RealmSwift.List<MDVideocallSDK.ScheduleEntity>
  final public let isVcAvailable: RealmSwift.RealmOptional<Swift.Bool>
  final public let index: RealmSwift.RealmOptional<Swift.Int>
  final public let isAccessible: RealmSwift.RealmOptional<Swift.Bool>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.ContactEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case channel
    case name
    case overview
    case specialityId
    case specialityCode
    case speciality
    case avatarValue
    case statusValue
    case videoStatusValue
    case roleValue
    case nextOnlineAt
    case nextOfflineAt
    case timezoneValue
    case saturated
    case collegiateNumber
    case timezoneOffset
    case updatedAt
    case onHolidays
    case conversations
    case schedules
    case isVcAvailable
    case isAccessible
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension MDVideocallSDK.ContactEntity {
  public var avatarURL: Foundation.URL? {
    get
    set
  }
}
extension MDVideocallSDK.ContactEntity {
  public enum Status : Swift.String {
    case unknown
    case offline
    case online
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var status: MDVideocallSDK.ContactEntity.Status? {
    get
    set
  }
}
extension MDVideocallSDK.ContactEntity {
  public enum VideoStatus : Swift.String {
    case invisible
    case videoAvailable
    case busy
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var videoStatus: MDVideocallSDK.ContactEntity.VideoStatus? {
    get
    set
  }
}
extension MDVideocallSDK.ContactEntity {
  public enum Role : Swift.String {
    case unknown
    case commercial
    case administrative
    case doctor
    case support
    case free
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var role: MDVideocallSDK.ContactEntity.Role? {
    get
    set
  }
}
extension MDVideocallSDK.ContactEntity {
  public var timezone: Foundation.TimeZone? {
    get
    set
  }
}
extension RxSwift.PrimitiveSequence where Trait == RxSwift.SingleTrait {
  public func asMaybe() -> RxSwift.PrimitiveSequence<RxSwift.MaybeTrait, Element>
  public func asCompletable() -> RxSwift.PrimitiveSequence<RxSwift.CompletableTrait, Swift.Never>
}
extension RxSwift.PrimitiveSequence where Trait == RxSwift.CompletableTrait, Element == Swift.Never {
  public func asMaybe() -> RxSwift.PrimitiveSequence<RxSwift.MaybeTrait, Element>
}
public enum ControllerError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  public enum InstallationFailureReason {
    case nilValueFound
    case pingFailed
    public static func == (a: MDVideocallSDK.ControllerError.InstallationFailureReason, b: MDVideocallSDK.ControllerError.InstallationFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AuthenticationFailureReason {
    case invalidSessionToken(id: Swift.String)
  }
  public enum ImageLoaderFailureReason {
    case invalidURL(Foundation.URL)
  }
  public enum PhotoLibraryFailureReason {
    case placeholderForCreatedAssetFailed(Photos.PHAssetChangeRequest)
    case assetLocalIdentifierNotFound(Swift.String)
    case performChangesCompletion(Swift.Error)
  }
  public enum TransmittableFailureReason {
    case invalidTransmittableState
    case invalidTransmittableMapping
    public static func == (a: MDVideocallSDK.ControllerError.TransmittableFailureReason, b: MDVideocallSDK.ControllerError.TransmittableFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case installationFailed(reason: MDVideocallSDK.ControllerError.InstallationFailureReason)
  case authenticationFailed(reason: MDVideocallSDK.ControllerError.AuthenticationFailureReason)
  case imageLoaderFailed(reason: MDVideocallSDK.ControllerError.ImageLoaderFailureReason)
  case photoLibraryFailed(reason: MDVideocallSDK.ControllerError.PhotoLibraryFailureReason)
  case transmittableFailed(reason: MDVideocallSDK.ControllerError.TransmittableFailureReason)
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension MDVideocallSDK.MessengerRemoteNotificationModel {
  public var deeplinkOption: MDVideocallSDK.MeetingDoctorsDeeplinkOption {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDSecondaryButton : MDVideocallSDK.MDBaseButton {
  @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum StorageError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  public enum ManagedObjectFailureReason {
    case nilPropertyFoundInPersistableInitializer
    public static func == (a: MDVideocallSDK.StorageError.ManagedObjectFailureReason, b: MDVideocallSDK.StorageError.ManagedObjectFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PersistableFailureReason {
    case invalidPersistableState
    case invalidPersistenceMapping
    public static func == (a: MDVideocallSDK.StorageError.PersistableFailureReason, b: MDVideocallSDK.StorageError.PersistableFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case managedObjectFailed(reason: MDVideocallSDK.StorageError.ManagedObjectFailureReason)
  case persitableFailed(reason: MDVideocallSDK.StorageError.PersistableFailureReason)
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum MedicalAddressRequest : MDVideocallSDK.PaginableRequest {
  case address(Swift.String)
  case location(CoreLocation.CLLocationCoordinate2D)
}
extension MDVideocallSDK.MedicalAddressRequest {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case address
    case location
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from _: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Persistable {
  associatedtype ManagedObject : RealmSwiftObject
  var managedObject: Self.ManagedObject { get }
  init(managedObject: Self.ManagedObject) throws
}
public protocol CompositeRequestAdapter : MDVideocallSDK.MDARequestAdapter {
  func append(_ adapter: MDVideocallSDK.MDARequestAdapter?)
  func clear()
}
public class CompositeRequestInterceptor : MDVideocallSDK.CompositeRequestAdapter {
  public init(_ children: [MDVideocallSDK.MDARequestAdapter] = [])
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  public func append(_ adapter: MDVideocallSDK.MDARequestAdapter?)
  public func clear()
  @objc deinit
}
public protocol Navigatable {
  associatedtype Destination
  func navigate(to destination: Self.Destination)
}
extension MDVideocallSDK.Navigatable {
  public func navigate(to _: Self.Destination)
}
public struct Navigator<T> : MDVideocallSDK.Navigatable {
  public typealias Destination = T
  public init(navigationController: UIKit.UINavigationController?)
}
extension MDVideocallSDK.Navigator where T : UIKit.UIViewController {
  public func navigate(to destination: T)
}
public struct UserFeedModel {
  public let hasFeed: Swift.Bool?
  public let homepage: Swift.String?
  public let feedId: Swift.String?
  public init(hasFeed: Swift.Bool? = nil, homepage: Swift.String? = nil, feedId: Swift.String? = nil)
}
extension MDVideocallSDK.UserFeedModel {
  public init(schema: MDVideocallSDK.UserFeedSchema)
}
public struct VideoCallProfessionalSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case name
    case avatar
    case detail
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let name: Swift.String?
  public let avatar: Swift.String?
  public let detail: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallProfessionalSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallProfessionalSchema, b: MDVideocallSDK.VideoCallProfessionalSchema) -> Swift.Bool
}
public protocol RealmStoreProvider {
  func store(with configuration: RealmSwift.Realm.Configuration) throws -> RealmSwift.Realm
}
public struct RealmStoreCreator : MDVideocallSDK.RealmStoreProvider {
  public init(type: RealmSwift.Realm.Type)
  public func store(with configuration: RealmSwift.Realm.Configuration) throws -> RealmSwift.Realm
}
public struct DecodableResponseSerializer<R, E> : MDVideocallSDK.ErrorDataResponseSerializerProtocol where R : Swift.Decodable, E : Swift.Decodable, E : Swift.Error {
  public init(mapper: MDVideocallSDK.CodableMapper)
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> MDVideocallSDK.MDAResult<R> {
    get
  }
  public var serializeError: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> MDVideocallSDK.MDAResult<E> {
    get
  }
  public typealias ErrorType = E
  public typealias MDASerializedObject = R
}
public func abstractMethod(file: Swift.StaticString = #file, line: Swift.UInt = #line, function: Swift.StaticString = #function) -> Swift.Never
public enum CoreError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  public enum MapperFailureReason {
    case unexpectedFormat(event: Swift.String, data: [Any])
    case decoderFailed(error: Swift.Error)
    case encoderFailed(error: Swift.Error)
  }
  case mapperFailed(reason: MDVideocallSDK.CoreError.MapperFailureReason)
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension MDVideocallSDK.CoreError {
  public var underlyingError: Swift.Error? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CryptoManager : ObjectiveC.NSObject {
  public static func decrypt(_ data: Foundation.Data?) -> Swift.Result<Foundation.Data, Swift.Error>
  public static func decrypt(_ data: Foundation.Data?) -> Foundation.Data?
  public static func encrypt(_ data: Foundation.Data?) -> Swift.Result<Foundation.Data, Swift.Error>
  public static func encrypt(_ data: Foundation.Data?) -> Foundation.Data?
  public static func decryptString(_ data: Foundation.Data) -> Swift.Result<Swift.String, Swift.Error>
  public static func encrypt(_ string: Swift.String) -> Swift.Result<Foundation.Data, Swift.Error>
  @objc deinit
}
public enum CryptoManagerError : Swift.Error {
  case unexpectedError
  case cypherDontInitialized
  case cantDecryptData
  case cantEncryptData
  case cantDecryptString
  case cantEncryptString
  case dataEmpty
  public static func == (a: MDVideocallSDK.CryptoManagerError, b: MDVideocallSDK.CryptoManagerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MedicalHistorySchema : MDVideocallSDK.IdentifiableSchema {
  var name: Swift.String? { get }
  var patientHash: Swift.String? { get }
}
public struct MedicalHistoryGenericSchema : MDVideocallSDK.MedicalHistorySchema {
  public let id: Swift.UInt
  public let name: Swift.String?
  public let patientHash: Swift.String?
  public init(id: Swift.UInt, name: Swift.String?, patientHash: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class AlamofireCustomerNotificationsAdapter : MDVideocallSDK.CustomerNotificationsAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func register(_ request: MDVideocallSDK.CustomerRegisterNotificationRequest) -> RxSwift.Single<MDVideocallSDK.CustomerNotificationSchema>
  public func unregister(_ request: MDVideocallSDK.CustomerRegisterNotificationRequest) -> RxSwift.Single<MDVideocallSDK.CustomerErrorSchema>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDVideocallInformationViewController : MDVideocallSDK.MDVideocallProcessBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override public func closeProcess()
  @_Concurrency.MainActor(unsafe) override public func numberOfRowsInSection(section _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) override public func cellForRowAt(indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum ScheduleStateModel : Swift.String {
  case unknown
  case disabled
  case enabled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ContactSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case hash
    case status
    case videoStatus
    case avatarURL
    case name
    case title
    case overview
    case onHolidays
    case timezone
    case timezoneOffset
    case nextOnlineAt
    case nextOfflineAt
    case updatedAt
    case conversation
    case role
    case speciality
    case schedules
    case saturated
    case collegiateNumber
    case isVcAvailable
    case isAccessible
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable {
    case offline
    case online
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VideoStatus : Swift.String, Swift.Codable {
    case invisible
    case videoAvailable
    case busy
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int
  public let hash: Swift.String
  public let status: MDVideocallSDK.ContactSchema.Status
  public let videoStatus: MDVideocallSDK.ContactSchema.VideoStatus?
  public let avatarURL: Foundation.URL
  public let name: Swift.String
  public let title: Swift.String?
  public let overview: Swift.String?
  public let onHolidays: Swift.Int
  public let timezone: Swift.String
  public let timezoneOffset: Swift.Int
  public let nextOnlineAt: Foundation.Date?
  public let nextOfflineAt: Foundation.Date?
  public let updatedAt: Foundation.Date
  public let conversation: MDVideocallSDK.ConversationSchema?
  public let role: MDVideocallSDK.RoleSchema?
  public let speciality: MDVideocallSDK.SpecialitySchema?
  public let schedules: [MDVideocallSDK.ScheduleSchema]?
  public let saturated: Swift.String?
  public let collegiateNumber: Swift.String?
  public let isVcAvailable: Swift.Bool
  public var index: Swift.Int
  public let isAccessible: Swift.Int?
  public var isOnHolidays: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ContactSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ContactSchema, rhs: MDVideocallSDK.ContactSchema) -> Swift.Bool
}
@objc public class DerivationsListController : ObjectiveC.NSObject {
  public init(_ account: MDVideocallSDK.AccountModel, repository: MDVideocallSDK.RepositoryController, remote: MDVideocallSDK.RemoteController, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(patient hash: Swift.String) -> RxSwift.Observable<([MDVideocallSDK.DerivationReportModel], MDVideocallSDK.Changeset?)>
  public func refresh() -> RxSwift.Observable<([MDVideocallSDK.DerivationReportModel], MDVideocallSDK.Changeset?)>
  @objc deinit
}
public protocol AccountModelType : Swift.Encodable {
  var id: Swift.String { get }
  var token: Swift.String { get }
  var installation: MDVideocallSDK.InstallationModel { get }
}
public struct AccountModel : MDVideocallSDK.AccountModelType {
  public let id: Swift.String
  public let token: Swift.String
  public var user: MDVideocallSDK.UserModel
  public let installation: MDVideocallSDK.InstallationModel
  public init(id: Swift.String, token: Swift.String, user: MDVideocallSDK.UserModel, installation: MDVideocallSDK.InstallationModel)
}
extension MDVideocallSDK.AccountModel : MDVideocallSDK.ChatSocketCredentials {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case clientSecret
    case sessionId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public var clientSecret: Swift.String {
    get
  }
  public var sessionId: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MessageStatusSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case conversationId
    case imageURL
    case thumbURL
    case timestamp
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.String
  public let conversationId: Swift.Int
  public let status: MDVideocallSDK.MessageSchema.Status
  public let timestamp: Foundation.TimeInterval?
  public let imageURL: Foundation.URL?
  public let thumbURL: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MessageStatusSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MessageStatusSchema, rhs: MDVideocallSDK.MessageStatusSchema) -> Swift.Bool
}
public struct MedicalAddressSchema : Swift.Codable {
  public let address: Swift.String?
  public let latitude: CoreLocation.CLLocationDegrees?
  public let longitude: CoreLocation.CLLocationDegrees?
  public var location: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public init(address: Swift.String?, latitude: CoreLocation.CLLocationDegrees?, longitude: CoreLocation.CLLocationDegrees?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MedicalAddressSchema : MDVideocallSDK.MedicalDirectorySchema {
  public var id: Swift.UInt {
    get
  }
  public var name: Swift.String {
    get
  }
}
extension MDVideocallSDK.MedicalAddressSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalAddressSchema, rhs: MDVideocallSDK.MedicalAddressSchema) -> Swift.Bool
}
public class MDCommonDataResponse<ResponseModel> : Swift.Codable where ResponseModel : Swift.Decodable, ResponseModel : Swift.Encodable {
  final public let id: Swift.String?
  final public let type: Swift.String?
  final public let attributes: ResponseModel
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct MessageCountRequest : Swift.Codable {
  public let user: Swift.String
  public init(user: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol VideoCallModelProtocol {
  var id: Swift.Int { get }
  var workflow: Swift.String { get }
  var roomId: Swift.Int? { get }
  var professionalHash: Swift.String? { get }
}
public struct VideoCallModel : MDVideocallSDK.VideoCallModelProtocol {
  public let id: Swift.Int
  public let workflow: Swift.String
  public let roomId: Swift.Int?
  public let professionalHash: Swift.String?
  public init(id: Swift.Int, workflow: Swift.String, roomId: Swift.Int?, professionalHash: Swift.String?)
  public var workflowType: MDVideocallSDK.VideoCallWorkflow? {
    get
  }
}
extension MDVideocallSDK.VideoCallModel {
  public init(schema: MDVideocallSDK.VideoCallSchema)
}
extension MDVideocallSDK.VideoCallModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallModel, b: MDVideocallSDK.VideoCallModel) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDLabelS18W600 : MDVideocallSDK.MDLabelBase {
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol CustomerAuthModelProtocol {
  var id: Swift.String { get }
  var accessToken: Swift.String { get }
  var tokenType: Swift.String { get }
  var user: MDVideocallSDK.CustomerUserModel { get }
  var expiresIn: Swift.Double? { get }
  var updatedAt: Foundation.Date { get }
}
public struct CustomerAuthModel : Swift.Codable, MDVideocallSDK.CustomerAuthModelProtocol {
  public let id: Swift.String
  public let accessToken: Swift.String
  public let tokenType: Swift.String
  public let user: MDVideocallSDK.CustomerUserModel
  public let expiresIn: Swift.Double?
  public let updatedAt: Foundation.Date
  public init(id: Swift.String, accessToken: Swift.String, tokenType: Swift.String, user: MDVideocallSDK.CustomerUserModel, expiresIn: Swift.Double?, updatedAt: Foundation.Date)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerAuthModel {
  public init(schema: MDVideocallSDK.CustomerAuthSchema)
  public var expiresInSeconds: Swift.Double {
    get
  }
}
extension MDVideocallSDK.CustomerAuthModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerAuthModel, Swift.String>
  public static let accessTokenLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerAuthModel, Swift.String>
  public static let tokenTypeLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerAuthModel, Swift.String>
  public static let userLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerAuthModel, MDVideocallSDK.CustomerUserModel>
  public static let expiresInLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerAuthModel, Swift.Double?>
  public static let updatedAtLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerAuthModel, Foundation.Date>
}
extension MDVideocallSDK.CustomerAuthModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.CustomerAuthModel, b: MDVideocallSDK.CustomerAuthModel) -> Swift.Bool
}
public protocol IdentifiableSchema : Swift.Decodable, Swift.Encodable {
  var id: Swift.UInt { get }
}
public class PersistableRepository<Model> : MDVideocallSDK.Repository where Model : MDVideocallSDK.Persistable {
  public init<R>(_ repository: R) where R : MDVideocallSDK.Repository, Model.ManagedObject == R.EntityType
  public func fetch(by id: Swift.String) -> RxSwift.Observable<Model?>
  public func fetch() -> RxSwift.Observable<([Model], MDVideocallSDK.Changeset?)>
  public func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor] = [], offset: Swift.Int = 0, limit: Swift.Int = 0) -> RxSwift.Observable<([Model], MDVideocallSDK.Changeset?)>
  public func save(entity: Model, update: Swift.Bool) -> RxSwift.Observable<Swift.Void>
  public func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool) -> RxSwift.Observable<Swift.Void> where Model == S.Element, S : Swift.Sequence
  public func update(properties: [MDVideocallSDK.AttributeValueType]) -> RxSwift.Observable<Swift.Void>
  public func delete(entity: Model) -> RxSwift.Observable<Swift.Void>
  public func delete<S>(collection: S) -> RxSwift.Observable<Swift.Void> where Model == S.Element, S : Swift.Sequence
  public func delete(with predicate: Foundation.NSPredicate) -> RxSwift.Observable<Swift.Void>
  public func clear(cascading: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func fetch(by id: Swift.String, completion: @escaping (Swift.Result<Model?, Swift.Error>) -> Swift.Void)
  public func fetch(completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
  public func query(with predicate: Foundation.NSPredicate, sorted: [Foundation.NSSortDescriptor], offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
  public func save(entity: Model, update: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where Model == S.Element, S : Swift.Sequence
  public func update(properties: [MDVideocallSDK.AttributeValueType], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete(entity: Model, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete<S>(collection: S, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where Model == S.Element, S : Swift.Sequence
  public func delete(with predicate: Foundation.NSPredicate, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func clear(cascading: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public typealias EntityType = Model
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DiseaseEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var details: Swift.String?
  @objc dynamic public var diagnosis: Foundation.Date?
  @objc dynamic public var resolution: Foundation.Date?
  @objc dynamic public var patientHash: Swift.String?
  @objc dynamic public var updatedAt: Foundation.Date
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.DiseaseEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case details
    case diagnosis
    case resolution
    case patientHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public protocol MeetingDoctorsColorsType {
  var chat: MDVideocallSDK.MeetingDoctorsChatColorsType { get set }
}
public struct MeetingDoctorsColors : MDVideocallSDK.MeetingDoctorsColorsType {
  public var chat: MDVideocallSDK.MeetingDoctorsChatColorsType
}
public protocol MeetingDoctorsChatColorsType {
  var disconnectMessageImageTintColor: UIKit.UIColor? { get set }
  var disconnectMessageContainerBackgroundColor: UIKit.UIColor? { get set }
  var disconnectMessageTextColor: UIKit.UIColor? { get set }
}
public struct MeetingDoctorsChatColors : MDVideocallSDK.MeetingDoctorsChatColorsType {
  public var disconnectMessageImageTintColor: UIKit.UIColor?
  public var disconnectMessageContainerBackgroundColor: UIKit.UIColor?
  public var disconnectMessageTextColor: UIKit.UIColor?
}
public protocol AlamofireSession {
  var adapter: MDVideocallSDK.MDARequestAdapter? { get set }
  @discardableResult
  func request(_ url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod, parameters: MDVideocallSDK.MDAParameters?, encoding: MDVideocallSDK.MDAParameterEncoding, headers: MDVideocallSDK.MDAHTTPHeaders?) -> MDVideocallSDK.MDADataRequest
}
extension MDVideocallSDK.MDASessionManager : MDVideocallSDK.AlamofireSession {
}
public struct RoleSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case name
    case overview
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum RoleType : Swift.Int {
    case unknown
    case commercial
    case administrative
    case doctor
    case support
    case free
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let id: Swift.Int
  public let name: Swift.String?
  public let overview: Swift.String?
  public var type: MDVideocallSDK.RoleSchema.RoleType {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.RoleSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.RoleSchema, rhs: MDVideocallSDK.RoleSchema) -> Swift.Bool
}
public protocol DateEncodingStrategy {
  func value(_ date: Foundation.Date, _ encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.DateEncodingStrategy {
  public func value(_: Foundation.Date, _: Swift.Encoder) throws
}
public struct MDHTTP {
}
infix operator *~ : MultiplicationPrecedence
infix operator |> : AdditionPrecedence
public struct Lens<Whole, Part> {
}
public func * <A, B, C>(lhs: MDVideocallSDK.Lens<A, B>, rhs: MDVideocallSDK.Lens<B, C>) -> MDVideocallSDK.Lens<A, C>
public func *~ <A, B>(lhs: MDVideocallSDK.Lens<A, B>, rhs: B) -> (A) -> A
public func |> <A, B>(x: A, f: (A) -> B) -> B
public func |> <A, B, C>(f: @escaping (A) -> B, g: @escaping (B) -> C) -> (A) -> C
public enum MDAFError : Swift.Error {
  public enum MDAParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case propertyListEncodingFailed(error: Swift.Error)
  }
  public enum MDAMultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public enum MDAResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum MDAResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case propertyListSerializationFailed(error: Swift.Error)
  }
  case invalidURL(url: MDVideocallSDK.MDAURLConvertible)
  case parameterEncodingFailed(reason: MDVideocallSDK.MDAFError.MDAParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: MDVideocallSDK.MDAFError.MDAMultipartEncodingFailureReason)
  case responseValidationFailed(reason: MDVideocallSDK.MDAFError.MDAResponseValidationFailureReason)
  case responseSerializationFailed(reason: MDVideocallSDK.MDAFError.MDAResponseSerializationFailureReason)
}
extension MDVideocallSDK.MDAFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension MDVideocallSDK.MDAFError {
  public var urlConvertible: MDVideocallSDK.MDAURLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension MDVideocallSDK.MDAFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol VideoCallRepositoryProtocol : AnyObject {
  func call(completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  func cancel(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  func pickUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  func hangUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  func videoCallStatus(with completion: @escaping (MDVideocallSDK.VideoCallStatusModel?) -> Swift.Void)
}
public class VideoCallRepository : MDVideocallSDK.VideoCallRepositoryProtocol {
  public init(remote: MDVideocallSDK.RemoteController, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func call(completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  public func cancel(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  public func pickUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  public func hangUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  public func videoCallStatus(with completion: @escaping (MDVideocallSDK.VideoCallStatusModel?) -> Swift.Void)
  @objc deinit
}
public enum SystemModel : Swift.String {
  case iOS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.NSNotification.Name {
  public struct MeetingDoctors {
    public struct Authentication {
      public static let Succeed: Foundation.Notification.Name
      public static let Failed: Foundation.Notification.Name
      public static let UserStatusChanged: Foundation.Notification.Name
      public static let UserBannedChanged: Foundation.Notification.Name
    }
    public struct CustomerAuthentication {
      public static let Succeed: Foundation.Notification.Name
    }
    public struct Deauthentication {
      public static let Succeed: Foundation.Notification.Name
      public static let Failed: Foundation.Notification.Name
    }
    public struct Socket {
      public static let StatusChanged: Foundation.Notification.Name
      public static let MessageReceived: Foundation.Notification.Name
      public static let MessageRead: Foundation.Notification.Name
      public static let WatchDogAct: Foundation.Notification.Name
    }
    public struct Style {
      public static let StyleChanged: Foundation.Notification.Name
    }
    public struct Message {
      public static let UnreadChanged: Foundation.Notification.Name
      public static let Sent: Foundation.Notification.Name
      public static let Read: Foundation.Notification.Name
    }
    public struct Messenger {
      public static let ChatEntered: Foundation.Notification.Name
      public static let ChatLeft: Foundation.Notification.Name
      public static let Update: Foundation.Notification.Name
    }
    public struct NPS {
      public static let NPSSendSucceed: Foundation.Notification.Name
    }
    public struct TermsAndConditions {
      public static let Declined: Foundation.Notification.Name
      public static let Accepted: Foundation.Notification.Name
    }
    public struct VideoCall {
      public static let videocall_requested: Foundation.Notification.Name
      public static let videocall_cancelled_user: Foundation.Notification.Name
      public static let videocall_professional_ready: Foundation.Notification.Name
      public static let videocall_cancelled_time_expired: Foundation.Notification.Name
      public static let videocall_user_joined: Foundation.Notification.Name
      public static let videocall_finished: Foundation.Notification.Name
      public static let videocall_cancelled_professional_busy: Foundation.Notification.Name
      public static let videocall_error_network: Foundation.Notification.Name
      public static let videocall_error_system: Foundation.Notification.Name
      public static let videocall_cancelled_user_requested_new: Foundation.Notification.Name
      public static let PickedUp: Foundation.Notification.Name
      public static let Finished: Foundation.Notification.Name
      public static let Cancelled: Foundation.Notification.Name
      public struct Process {
        public struct Searching {
          public static let Retry: Foundation.Notification.Name
        }
        public struct Canceled {
          public static let Error: Foundation.Notification.Name
          public static let Dismiss: Foundation.Notification.Name
          public static let Alert: Foundation.Notification.Name
          public static let Timeout: Foundation.Notification.Name
          public static let Reinit: Foundation.Notification.Name
        }
        public static let Init: Foundation.Notification.Name
        public static let Reinit: Foundation.Notification.Name
        public struct OneToOne {
          public static let SendMessage: Foundation.Notification.Name
        }
      }
    }
  }
  public struct MeetingDoctorsGroups {
    public static let Error: Foundation.Notification.Name
  }
  public struct MeetingDoctorsVideoCall {
    public static let Push: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct Key {
    public struct MeetingDoctors {
      public static let Authentication: Swift.String
      public static let CustomerAuthentication: Swift.String
      public static let Deauthentication: Swift.String
      public struct Message {
        public static let UnreadChanged: Foundation.Notification.Name
        public static let Sent: Foundation.Notification.Name
        public static let Read: Foundation.Notification.Name
      }
      public struct Socket {
        public static let StatusChanged: Foundation.Notification.Name
        public static let MessageReceived: Foundation.Notification.Name
        public static let MessageRead: Foundation.Notification.Name
      }
      public static let Style: Swift.String
      public struct TermsAndConditions {
        public static let Declined: Foundation.Notification.Name
      }
    }
    public struct MeetingDoctorsGroups {
      public static let Error: Swift.String
    }
    public struct MeetingDoctorsVideoCall {
      public static let Push: Foundation.Notification.Name
    }
    public struct MeetingDoctorsProfessional {
      public struct Login {
        public static let View: Swift.String
      }
    }
    public struct VideoCall {
      public static let videoCallId: Swift.String
      public static let Item: Swift.String
      public struct Process {
        public static let Status: Foundation.Notification.Name
        public struct OneToOne {
          public static let SendMessage: Foundation.Notification.Name
        }
      }
    }
  }
}
public protocol MedicalHistoryListControllerType {
  associatedtype ElementModel : MDVideocallSDK.Transmittable
  func fetch(patient hash: Swift.String) -> RxSwift.Observable<([Self.ElementModel], MDVideocallSDK.Changeset?)>
}
public class MedicalHistoryMainController : MDVideocallSDK.MedicalHistoryListControllerType {
  public typealias ElementModel = MDVideocallSDK.MedicalHistoryModel
  public init(_ hasVideoCall: Swift.Bool, allowedOptions: [MDVideocallSDK.MedicalHistoryModel])
  public func fetch(patient _: Swift.String) -> RxSwift.Observable<([MDVideocallSDK.MedicalHistoryModel], MDVideocallSDK.Changeset?)>
  @objc deinit
}
public class MedicalHistoryListController<Model> : MDVideocallSDK.MedicalHistoryListControllerType where Model : MDVideocallSDK.Transmittable, Model.SchemaObject : MDVideocallSDK.MedicalHistorySchema {
  public init(_ repository: MDVideocallSDK.AnyRepository<Model>, _ adapter: MDVideocallSDK.AnyMedicalHistoryAdapter<Model.SchemaObject>, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(patient hash: Swift.String) -> RxSwift.Observable<([Model], MDVideocallSDK.Changeset?)>
  public typealias ElementModel = Model
  @objc deinit
}
public class MedicalHistoryIdentifiableListController<Model> : MDVideocallSDK.MedicalHistoryListControllerType where Model : MDVideocallSDK.Transmittable, Model.SchemaObject : MDVideocallSDK.IdentifiableSchema {
  public init(_ repository: MDVideocallSDK.AnyRepository<Model>, _ adapter: MDVideocallSDK.AnyIdentifiableAdapter<Model.SchemaObject>, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(patient hash: Swift.String) -> RxSwift.Observable<([Model], MDVideocallSDK.Changeset?)>
  public typealias ElementModel = Model
  @objc deinit
}
final public class MDVideocallInformationAssembler {
  public init(moderator: MDVideocallSDK.MDVideocallParticipantRequestModel? = nil, specialityCode: Swift.String? = nil)
  final public func viewController() -> UIKit.UIViewController
  @objc deinit
}
extension Swift.Int {
  public var nanoseconds: Foundation.DateComponents {
    get
  }
  public var seconds: Foundation.DateComponents {
    get
  }
  public var minutes: Foundation.DateComponents {
    get
  }
  public var hours: Foundation.DateComponents {
    get
  }
  public var days: Foundation.DateComponents {
    get
  }
  public var weeks: Foundation.DateComponents {
    get
  }
  public var months: Foundation.DateComponents {
    get
  }
  public var years: Foundation.DateComponents {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CustomerInstallationEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var installationGuid: Swift.String?
  @objc dynamic public var pushToken: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.CustomerInstallationEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case installationGuid
    case pushToken
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension Foundation.Date {
  public var isInPast: Swift.Bool {
    get
  }
}
public struct SearcherRequest : Swift.Codable {
  public let search: Swift.String
  public init(search: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.SearcherRequest : Swift.Equatable {
  public static func == (a: MDVideocallSDK.SearcherRequest, b: MDVideocallSDK.SearcherRequest) -> Swift.Bool
}
public struct CommonDataResponse<Data> : Swift.Codable where Data : Swift.Decodable, Data : Swift.Encodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let data: [Data]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class PatientHashRequestInterceptor : MDVideocallSDK.MDARequestAdapter {
  public init(hash: Swift.String)
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  @objc deinit
}
public protocol ProfessionalListAdapter {
  func requestProfessionalDetail(_ professionalHash: Swift.String) -> RxSwift.Single<MDVideocallSDK.ContactSchema>
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDLabelBase : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func setup()
  @objc deinit
}
public protocol InboxBaseCellViewModelType {
}
extension MDVideocallSDK.CustomerUserModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.CustomerUserEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.CustomerUserEntity) throws
  public typealias ManagedObject = MDVideocallSDK.CustomerUserEntity
}
public protocol MDLoggingServiceProtocol {
  func log(_ format: Swift.String, _ args: Swift.CVarArg...)
  func log(_ error: Swift.Error)
  func log(_ string: Swift.String)
}
public class MDLoggingService {
  public init()
  @objc deinit
}
extension MDVideocallSDK.MDLoggingService : MDVideocallSDK.MDLoggingServiceProtocol {
  public func log(_ format: Swift.String, _ args: Swift.CVarArg...)
  public func log(_ error: Swift.Error)
  public func log(_ string: Swift.String)
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
extension QuartzCore.CALayer {
  public func fade()
}
public protocol MDResponseDecoderProtocol {
  associatedtype Response
  func decode(_ data: Foundation.Data) throws -> Self.Response
}
extension UIKit.UIColor {
  public var luminance: CoreFoundation.CGFloat {
    get
  }
  public var isLight: Swift.Bool {
    get
  }
}
extension CoreFoundation.CGPoint {
  public enum Point {
    case topLeft
    case centerLeft
    case bottomLeft
    case topCenter
    case center
    case bottomCenter
    case topRight
    case centerRight
    case bottomRight
    public static func == (a: CoreFoundation.CGPoint.Point, b: CoreFoundation.CGPoint.Point) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct JsonMapper : MDVideocallSDK.CodableMapper {
  public let encoder: Foundation.JSONEncoder
  public let decoder: Foundation.JSONDecoder
  public init(decoder: Foundation.JSONDecoder = JSONDecoder(), encoder: Foundation.JSONEncoder = JSONEncoder())
  public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  public func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
}
public class MDVideocallParticipantRequestModel : Swift.Codable {
  final public let user: Swift.String?
  final public let name: Swift.String?
  final public let image: Swift.String?
  final public let role: Swift.String?
  public init(user: Swift.String?, name: Swift.String?, image: Swift.String? = nil, role: MDVideocallSDK.MDVideocallParticipantType? = .participant)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct ConnectSchema : Swift.Codable {
  public let namespace: Swift.String
  public init(_ nsp: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ConnectSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.ConnectSchema, b: MDVideocallSDK.ConnectSchema) -> Swift.Bool
}
public enum MedicalHistoryModel {
  case unknown
  case allergy(MDVideocallSDK.AllergyModel?)
  case disease(MDVideocallSDK.DiseaseModel?)
  case medication(MDVideocallSDK.MedicationModel?)
  case imc(MDVideocallSDK.IMCModel?)
  case videoCallReport(MDVideocallSDK.VideoCallReportModel?)
  case derivation
  case myDocuments
  case prescription
}
extension MDVideocallSDK.MedicalHistoryModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalHistoryModel, rhs: MDVideocallSDK.MedicalHistoryModel) -> Swift.Bool
}
extension MDVideocallSDK.MedicalHistoryModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicalHistoryGenericSchema
  public var schemaObject: MDVideocallSDK.MedicalHistoryGenericSchema {
    get
  }
  public init(schemaObject _: MDVideocallSDK.MedicalHistoryGenericSchema) throws
}
@objc @_inheritsConvenienceInitializers public class KeyChainManager : ObjectiveC.NSObject {
  public static func getValue(_ key: Swift.String, for userAccount: Swift.String, _ defaultQuery: [Swift.String : Any] = KeyChainManager.unlockQuery()) throws -> Swift.String?
  public static func unlockQuery() -> [Swift.String : Any]
  public static func oldQuery() -> [Swift.String : Any]
  public static func removeValue(_ key: Swift.String, for userAccount: Swift.String, _ defaultQuery: [Swift.String : Any] = KeyChainManager.unlockQuery()) throws
  public static func migrate(_ value: Swift.String, key: Swift.String, for userAccount: Swift.String, _ oldQuery: [Swift.String : Any] = KeyChainManager.oldQuery(), _ newQuery: [Swift.String : Any] = KeyChainManager.unlockQuery()) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum KeyChainManagerError : Swift.Error {
  case unhandledError(message: Swift.String, code: Swift.Int32)
  case stringToDataConversionError
  case dataToStringConversionError
}
extension MDVideocallSDK.KeyChainManagerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var code: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class LocationModel : CoreLocation.CLLocation {
  convenience public init(_ location: CoreLocation.CLLocation)
  @objc override dynamic public init(latitude: CoreLocation.CLLocationDegrees, longitude: CoreLocation.CLLocationDegrees)
  @objc override dynamic public init(coordinate: CoreLocation.CLLocationCoordinate2D, altitude: CoreLocation.CLLocationDistance, horizontalAccuracy hAccuracy: CoreLocation.CLLocationAccuracy, verticalAccuracy vAccuracy: CoreLocation.CLLocationAccuracy, timestamp: Foundation.Date)
  @available(iOS 4.2, *)
  @objc override dynamic public init(coordinate: CoreLocation.CLLocationCoordinate2D, altitude: CoreLocation.CLLocationDistance, horizontalAccuracy hAccuracy: CoreLocation.CLLocationAccuracy, verticalAccuracy vAccuracy: CoreLocation.CLLocationAccuracy, course: CoreLocation.CLLocationDirection, speed: CoreLocation.CLLocationSpeed, timestamp: Foundation.Date)
  @available(iOS 13.4, *)
  @objc override dynamic public init(coordinate: CoreLocation.CLLocationCoordinate2D, altitude: CoreLocation.CLLocationDistance, horizontalAccuracy hAccuracy: CoreLocation.CLLocationAccuracy, verticalAccuracy vAccuracy: CoreLocation.CLLocationAccuracy, course: CoreLocation.CLLocationDirection, courseAccuracy: CoreLocation.CLLocationDirectionAccuracy, speed: CoreLocation.CLLocationSpeed, speedAccuracy: CoreLocation.CLLocationSpeedAccuracy, timestamp: Foundation.Date)
  @available(iOS 15.0, *)
  @objc override dynamic public init(coordinate: CoreLocation.CLLocationCoordinate2D, altitude: CoreLocation.CLLocationDistance, horizontalAccuracy hAccuracy: CoreLocation.CLLocationAccuracy, verticalAccuracy vAccuracy: CoreLocation.CLLocationAccuracy, course: CoreLocation.CLLocationDirection, courseAccuracy: CoreLocation.CLLocationDirectionAccuracy, speed: CoreLocation.CLLocationSpeed, speedAccuracy: CoreLocation.CLLocationSpeedAccuracy, timestamp: Foundation.Date, sourceInfo: CoreLocation.CLLocationSourceInformation)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct AlamofireMedicalDirectoryAdapter<E> : MDVideocallSDK.MedicalDirectoryAdapter where E : MDVideocallSDK.MedicalDirectorySchema {
  public init(session: MDVideocallSDK.SessionAdapter, router: MDVideocallSDK.Routable)
  public func fetch<ParameterType>(_ request: ParameterType? = nil, type: ParameterType.Type = ParameterType.self, completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void) where ParameterType : MDVideocallSDK.PaginableRequest
  public typealias SchemaType = E
}
extension MDVideocallSDK.AlamofireMedicalDirectoryAdapter where E == MDVideocallSDK.MedicalCoverageSchema {
  public init(session: MDVideocallSDK.SessionAdapter)
}
extension MDVideocallSDK.AlamofireMedicalDirectoryAdapter where E == MDVideocallSDK.MedicalSpecialitySchema {
  public init(session: MDVideocallSDK.SessionAdapter)
}
extension MDVideocallSDK.AlamofireMedicalDirectoryAdapter where E == MDVideocallSDK.MedicalProfessionalSchema {
  public init(session: MDVideocallSDK.SessionAdapter)
}
extension MDVideocallSDK.AlamofireMedicalDirectoryAdapter where E == MDVideocallSDK.MedicalAddressSchema {
  public init(session: MDVideocallSDK.SessionAdapter)
}
public class AlamofireRemoteController : MDVideocallSDK.RemoteController {
  public var installation: MDVideocallSDK.InstallationAdapter {
    get
  }
  public var customerInstallation: MDVideocallSDK.CustomerInstallationAdapter {
    get
  }
  public var customerAuth: MDVideocallSDK.CustomerAuthAdapter {
    get
  }
  public var customerNotifications: MDVideocallSDK.CustomerNotificationsAdapter {
    get
  }
  public var videoCall: MDVideocallSDK.VideoCallAdapter {
    get
  }
  public var professionalList: MDVideocallSDK.ProfessionalListAdapter {
    get
  }
  final public let authentication: MDVideocallSDK.AuthenticationAdapter
  public var notification: MDVideocallSDK.NotificationAdapter {
    get
  }
  public var allergy: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.AllergySchema> {
    get
  }
  public var disease: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.DiseaseSchema> {
    get
  }
  public var medication: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.MedicationSchema> {
    get
  }
  public var imc: MDVideocallSDK.AnyIdentifiableAdapter<MDVideocallSDK.IMCSchema> {
    get
  }
  public var videoCallReport: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.VideoCallReportSchema> {
    get
  }
  public var derivation: MDVideocallSDK.DerivationReportAdapter {
    get
  }
  public var videoCall1to1: MDVideocallSDK.VideoCall1to1Adapter {
    get
  }
  public var coverage: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalCoverageSchema> {
    get
  }
  public var speciality: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalSpecialitySchema> {
    get
  }
  public var professional: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalProfessionalSchema> {
    get
  }
  public var address: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalAddressSchema> {
    get
  }
  public init(core: MDVideocallSDK.SessionAdapter, session: MDVideocallSDK.SessionAdapter, console: MDVideocallSDK.SessionAdapter, directory: MDVideocallSDK.SessionAdapter, customer: MDVideocallSDK.SessionAdapter, notifications: MDVideocallSDK.SessionAdapter, consultations: MDVideocallSDK.SessionAdapter, consultationsCustomer: MDVideocallSDK.SessionAdapter)
  public func join(account: MDVideocallSDK.AccountModel)
  public func joinCustomer(auth: MDVideocallSDK.CustomerAuthModel)
  public func joinProfessional(by token: Swift.String)
  @objc deinit
}
public protocol AuthenticationAdapter {
  func authenticate(_ request: MDVideocallSDK.AuthenticateRequest) -> RxSwift.Single<MDVideocallSDK.SessionSchema>
  func user(_ request: MDVideocallSDK.UserRequest) -> RxSwift.Single<MDVideocallSDK.UserSchema>
  func authenticate(_ request: MDVideocallSDK.AuthenticateRequest, completion: @escaping (Swift.Result<MDVideocallSDK.SessionSchema, Swift.Error>) -> Swift.Void)
  func user(_ request: MDVideocallSDK.UserRequest, completion: @escaping (Swift.Result<MDVideocallSDK.UserSchema, Swift.Error>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class DateFormatterManager {
  @_hasMissingDesignatedInitializers public class Formats {
    public static let ddMMyyyy: Swift.String
    public static let ddMMyy: Swift.String
    public static let dd_MM_yyyy: Swift.String
    public static let HH: Swift.String
    public static let HHmm: Swift.String
    public static let Hmm: Swift.String
    public static let dd_MM_yyyy_HHmm: Swift.String
    public static let yyyy_MM_dd_HHmmss: Swift.String
    public static let dd_MM_yy_Hmm: Swift.String
    public static let yyyy_MM_dd: Swift.String
    public static let iso8601: Swift.String
    @objc deinit
  }
  public static let shared: MDVideocallSDK.DateFormatterManager
  public func formatter(format: Swift.String) -> Foundation.DateFormatter
  public func date(_ format: Swift.String, from string: Swift.String?, timeZone: Foundation.TimeZone = TimeZone.current) -> Foundation.Date?
  public func string(_ format: Swift.String, from date: Foundation.Date?, timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String?
  public func string(_ inFormat: Swift.String, outFormat: Swift.String, from string: Swift.String?, timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String?
  @objc deinit
}
public struct DerivationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let type: Swift.String?
  public let attributes: MDVideocallSDK.DerivationAttributesSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DerivationAttributesSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case type
    case professional
    case professionalName
    case customer
    case consultation
    case diagnosis
    case indication
    case services
    case filepath
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let type: Swift.String?
  public let professional: Swift.String?
  public let professionalName: Swift.String?
  public let customer: Swift.String?
  public let consultation: Swift.String?
  public let diagnosis: Swift.String?
  public let indication: Swift.String?
  public let services: [MDVideocallSDK.DerivationServicesSchema]?
  public let filepath: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DerivationServicesSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case name
    case detail
    case instruction
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let code: Swift.String?
  public let name: Swift.String?
  public let detail: Swift.String?
  public let instruction: Swift.String?
  public let price: MDVideocallSDK.DerivationPriceSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DerivationPriceSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case price
    case currency
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let price: Swift.Double?
  public let currency: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum MessageTypeModel : Swift.String {
  case text
  case image
  case file
  case note
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.MessageTypeModel {
  public var schema: MDVideocallSDK.MessageSchema.Kind {
    get
  }
}
public protocol InstallationModelType {
  var id: Swift.String { get }
  var uuid: Foundation.UUID { get }
  var system: MDVideocallSDK.SystemModel { get }
  var systemVersion: Swift.String { get }
  var libVersion: Swift.String { get }
  var model: Swift.String { get }
  var deviceToken: Swift.String? { get }
  var locale: Foundation.Locale? { get }
  var timeZone: Foundation.TimeZone? { get }
  var referrer: MDVideocallSDK.ReferrerModel? { get }
  var location: MDVideocallSDK.LocationModel? { get }
  var createdAt: Foundation.Date { get }
  var updatedAt: Foundation.Date { get }
}
public struct InstallationModel : MDVideocallSDK.InstallationModelType {
  public let id: Swift.String
  public let uuid: Foundation.UUID
  public let system: MDVideocallSDK.SystemModel
  public let systemVersion: Swift.String
  public let libVersion: Swift.String
  public let model: Swift.String
  public var deviceToken: Swift.String?
  public var locale: Foundation.Locale?
  public var timeZone: Foundation.TimeZone?
  public var referrer: MDVideocallSDK.ReferrerModel?
  public var location: MDVideocallSDK.LocationModel?
  public var createdAt: Foundation.Date
  public var updatedAt: Foundation.Date
  public init(id: Swift.String, uuid: Foundation.UUID, system: MDVideocallSDK.SystemModel, systemVersion: Swift.String, libVersion: Swift.String, model: Swift.String, deviceToken: Swift.String?, locale: Foundation.Locale?, timeZone: Foundation.TimeZone?, referrer: MDVideocallSDK.ReferrerModel?, location: MDVideocallSDK.LocationModel?, createdAt: Foundation.Date, updatedAt: Foundation.Date)
}
extension MDVideocallSDK.InstallationModel {
  public init(_ keystore: MDVideocallSDK.Keystore, uuid: Foundation.UUID, bundle: Foundation.Bundle, device: UIKit.UIDevice = UIDevice.current, locale: Foundation.Locale = Locale.autoupdatingCurrent, timeZone: Foundation.TimeZone = TimeZone.current, referrer: MDVideocallSDK.ReferrerModel? = nil, location: MDVideocallSDK.LocationModel? = nil, date: Foundation.Date = Date())
}
extension MDVideocallSDK.InstallationModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Swift.String>
  public static let uuidLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Foundation.UUID>
  public static let systemLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, MDVideocallSDK.SystemModel>
  public static let systemVersionLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Swift.String>
  public static let libVersionLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Swift.String>
  public static let modelLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Swift.String>
  public static let deviceTokenLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Swift.String?>
  public static let localeLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Foundation.Locale?>
  public static let timeZoneLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Foundation.TimeZone?>
  public static let referrerLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, MDVideocallSDK.ReferrerModel?>
  public static let locationLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, MDVideocallSDK.LocationModel?>
  public static let createdAtLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Foundation.Date>
  public static let updatedAtLens: MDVideocallSDK.Lens<MDVideocallSDK.InstallationModel, Foundation.Date>
}
public protocol CustomerAuthAdapter {
  func login(_ request: MDVideocallSDK.CustomerLoginRequest) -> RxSwift.Single<MDVideocallSDK.CustomerAuthSchema>
  func login(_ request: MDVideocallSDK.CustomerLoginRequest, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthSchema, Swift.Error>) -> Swift.Void)
}
public protocol MedicalSpecialityModelType {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var coverageId: Swift.String? { get }
  var details: Swift.String? { get }
}
public struct MedicalSpecialityModel : MDVideocallSDK.MedicalSpecialityModelType {
  public let id: Swift.String
  public let name: Swift.String
  public let coverageId: Swift.String?
  public let details: Swift.String?
  public init(id: Swift.String, name: Swift.String, coverageId: Swift.String?, details: Swift.String?)
}
extension MDVideocallSDK.MedicalSpecialityModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicalSpecialityModel, Swift.String>
  public static let nameLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicalSpecialityModel, Swift.String>
  public static let coverageIdLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicalSpecialityModel, Swift.String?>
  public static let detailsLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicalSpecialityModel, Swift.String?>
}
extension MDVideocallSDK.MedicalSpecialityModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicalSpecialitySchema
  public var schemaObject: MDVideocallSDK.MedicalSpecialitySchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.MedicalSpecialitySchema) throws
}
public protocol StoreMigration {
  var version: Swift.UInt64 { get }
  func migrate(_ migration: RealmSwift.Migration, to currentSchemaVersion: Swift.UInt64, from oldSchemaVersion: Swift.UInt64) -> Swift.Bool
  func validate(schema: RealmSwift.Schema) -> Swift.Bool
}
extension MDVideocallSDK.StoreMigration {
  public var version: Swift.UInt64 {
    get
  }
  public func migrate(_: RealmSwift.Migration, to currentSchemaVersion: Swift.UInt64, from oldSchemaVersion: Swift.UInt64)
  public func validate(schema _: RealmSwift.Schema) -> Swift.Bool
}
public protocol MDADataResponseSerializerProtocol {
  associatedtype MDASerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> MDVideocallSDK.MDAResult<Self.MDASerializedObject> { get }
}
public struct MDADataResponseSerializer<Value> : MDVideocallSDK.MDADataResponseSerializerProtocol {
  public typealias MDASerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> MDVideocallSDK.MDAResult<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> MDVideocallSDK.MDAResult<Value>)
}
public protocol MDADownloadResponseSerializerProtocol {
  associatedtype MDASerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> MDVideocallSDK.MDAResult<Self.MDASerializedObject> { get }
}
public struct MDADownloadResponseSerializer<Value> : MDVideocallSDK.MDADownloadResponseSerializerProtocol {
  public typealias MDASerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> MDVideocallSDK.MDAResult<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> MDVideocallSDK.MDAResult<Value>)
}
extension MDVideocallSDK.MDADataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MDVideocallSDK.MDADefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (MDVideocallSDK.MDADataResponse<T.MDASerializedObject>) -> Swift.Void) -> Self where T : MDVideocallSDK.MDADataResponseSerializerProtocol
}
extension MDVideocallSDK.MDADownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MDVideocallSDK.MDADefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (MDVideocallSDK.MDADownloadResponse<T.MDASerializedObject>) -> Swift.Void) -> Self where T : MDVideocallSDK.MDADownloadResponseSerializerProtocol
}
extension MDVideocallSDK.MDARequest {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> MDVideocallSDK.MDAResult<Foundation.Data>
}
extension MDVideocallSDK.MDADataRequest {
  public static func dataResponseSerializer() -> MDVideocallSDK.MDADataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MDVideocallSDK.MDADataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDADownloadRequest {
  public static func dataResponseSerializer() -> MDVideocallSDK.MDADownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MDVideocallSDK.MDADownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDARequest {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> MDVideocallSDK.MDAResult<Swift.String>
}
extension MDVideocallSDK.MDADataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> MDVideocallSDK.MDADataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (MDVideocallSDK.MDADataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDADownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> MDVideocallSDK.MDADownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (MDVideocallSDK.MDADownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDARequest {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> MDVideocallSDK.MDAResult<Any>
}
extension MDVideocallSDK.MDADataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> MDVideocallSDK.MDADataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (MDVideocallSDK.MDADataResponse<Any>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDADownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> MDVideocallSDK.MDADownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (MDVideocallSDK.MDADownloadResponse<Any>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDARequest {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> MDVideocallSDK.MDAResult<Any>
}
extension MDVideocallSDK.MDADataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> MDVideocallSDK.MDADataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (MDVideocallSDK.MDADataResponse<Any>) -> Swift.Void) -> Self
}
extension MDVideocallSDK.MDADownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> MDVideocallSDK.MDADownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (MDVideocallSDK.MDADownloadResponse<Any>) -> Swift.Void) -> Self
}
final public class RunLoopThreadScheduler : RxSwift.ImmediateSchedulerType {
  public init(thread: MDVideocallSDK.RunLoopThread)
  final public func schedule<StateType>(_ state: StateType, action: @escaping (StateType) -> RxSwift.Disposable) -> RxSwift.Disposable
  @objc deinit
}
@objc final public class RunLoopThread : Foundation.Thread {
  final public var runLoop: Foundation.RunLoop!
  public init(name: Swift.String)
  @objc override final public func main()
  @objc deinit
}
@objc public enum FloatyOpenAnimationType : Swift.Int {
  case pop
  case fade
  case slideLeft
  case slideUp
  case slideDown
  case fullCircular
  case semiCircular
  case quadCircular
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FloatyVerticalDirection : Swift.Int {
  case up
  case down
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FloatyHorizontalDirection : Swift.Int {
  case left
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class Floaty : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var items: [MDVideocallSDK.FloatyItem]
  @objc @_Concurrency.MainActor(unsafe) open var size: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var circleAnimationRadius: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var circleAnimationDegreeOffset: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var paddingX: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var paddingY: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var autoCloseOnTap: Swift.Bool
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var autoCloseOnOverlayTap: Swift.Bool
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var handleFirstItemDirectly: Swift.Bool
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var relativeToSafeArea: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var rotationDegrees: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var animationSpeed: Swift.Double
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonHighlightedColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonShadowColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var plusColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var overlayColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemSpace: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemButtonColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemTitleColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemImageColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var hasShadow: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var closed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var respondsToKeyboard: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var openAnimationType: MDVideocallSDK.FloatyOpenAnimationType
  @objc @_Concurrency.MainActor(unsafe) open var verticalDirection: MDVideocallSDK.FloatyVerticalDirection
  @objc @_Concurrency.MainActor(unsafe) open var horizontalDirection: MDVideocallSDK.FloatyHorizontalDirection
  @objc @_Concurrency.MainActor(unsafe) open var friendlyTap: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var sticky: Swift.Bool
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var supportLanscape: Swift.Bool
  @_Concurrency.MainActor(unsafe) public static var global: MDVideocallSDK.FloatyManager {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: MDVideocallSDK.FloatyDelegate?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(size: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func open()
  @objc @_Concurrency.MainActor(unsafe) open func close()
  @objc @_Concurrency.MainActor(unsafe) open func toggle()
  @objc @_Concurrency.MainActor(unsafe) open func addItem(item: MDVideocallSDK.FloatyItem)
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String, titlePosition: MDVideocallSDK.FloatyItemLabelPositionType = .left) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?, titlePosition: MDVideocallSDK.FloatyItemLabelPositionType = .left) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String, handler: @escaping ((MDVideocallSDK.FloatyItem) -> Swift.Void)) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String, titlePosition: MDVideocallSDK.FloatyItemLabelPositionType = .left, handler: @escaping ((MDVideocallSDK.FloatyItem) -> Swift.Void)) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?, handler: @escaping ((MDVideocallSDK.FloatyItem) -> Swift.Void)) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?, titlePosition: MDVideocallSDK.FloatyItemLabelPositionType = .left, handler: @escaping ((MDVideocallSDK.FloatyItem) -> Swift.Void)) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(icon: UIKit.UIImage?) -> MDVideocallSDK.FloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(icon: UIKit.UIImage?, handler: @escaping ((MDVideocallSDK.FloatyItem) -> Swift.Void)) -> MDVideocallSDK.FloatyItem
  @objc @_Concurrency.MainActor(unsafe) open func removeItem(item: MDVideocallSDK.FloatyItem)
  @objc @_Concurrency.MainActor(unsafe) open func removeItem(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change _: [Foundation.NSKeyValueChangeKey : Any]?, context _: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
}
extension MDVideocallSDK.Floaty {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set(newLabel)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityHint: Swift.String? {
    @objc get
    @objc set(newHint)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityValue: Swift.String? {
    @objc get
    @objc set(newHint)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
}
public class AlamofireVideoCallAdapter : MDVideocallSDK.VideoCallAdapter {
  public init(session: MDVideocallSDK.SessionAdapter, sessionConsultationCustomer: MDVideocallSDK.SessionAdapter)
  public func call() -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  public func cancel(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  public func pickUp(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  public func hangUp(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  public func videoCallStatus() -> RxSwift.Single<MDVideocallSDK.VideoCallStatusResponse>
  @objc deinit
}
public class UniversalDataSchema<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  final public let data: T
  public init(data: T)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.AccountModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.AccountEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.AccountEntity) throws
  public typealias ManagedObject = MDVideocallSDK.AccountEntity
}
@objc @_inheritsConvenienceInitializers public class AccountEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var token: Swift.String?
  @objc dynamic public var user: MDVideocallSDK.UserEntity?
  @objc dynamic public var installation: MDVideocallSDK.InstallationEntity?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.AccountEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case token
    case user
    case installation
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension Foundation.URL {
  public static func lottieAnimationWithURL(_ bundleURL: Foundation.URL?) -> [Swift.String : Any]?
}
extension UIKit.UIImage {
  public class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  public class func gifImageWithURL(_ gifUrl: Foundation.URL?) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
}
public typealias AnySocketControllerStream = MDVideocallSDK.AnySocketStream<MDVideocallSDK.SocketControllerModel, MDVideocallSDK.SocketClientSchema.Input, MDVideocallSDK.SocketClientSchema.Output>
public protocol SocketController : MDVideocallSDK.SocketStream where Self.SocketInputType == MDVideocallSDK.SocketClientSchema.Input, Self.SocketNativeType == MDVideocallSDK.SocketControllerModel, Self.SocketOutputType == MDVideocallSDK.SocketClientSchema.Output {
}
public enum MessageDataModel {
  case text(Swift.String)
  case image(UIKit.UIImage?, url: Foundation.URL, thumb: Foundation.URL, width: Swift.Int, height: Swift.Int)
  case file(Foundation.Data?, name: Swift.String, url: Foundation.URL, size: Swift.Int)
  case note(Swift.String)
  case none
}
extension MDVideocallSDK.MessageDataModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MessageDataModel, rhs: MDVideocallSDK.MessageDataModel) -> Swift.Bool
}
extension MDVideocallSDK.MessageDataModel {
  public var isImage: Swift.Bool {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
}
extension MDVideocallSDK.MessageDataModel {
  public var attachmentURL: Foundation.URL? {
    get
  }
}
extension MDVideocallSDK.MessageDataModel {
  public var name: Swift.String? {
    get
  }
}
extension MDVideocallSDK.MessageDataModel {
  public var thumbnailURL: Foundation.URL? {
    get
  }
}
extension MDVideocallSDK.MessageDataModel {
  public var size: CoreFoundation.CGSize? {
    get
  }
}
extension MDVideocallSDK.MessageDataModel {
  public var isFile: Swift.Bool {
    get
  }
  public var count: Swift.Int? {
    get
  }
}
public protocol SocketOutputStream : MDVideocallSDK.SocketEventType {
  associatedtype EventType
  func emit(event: Self.EventType) throws
  func acknowledge(event: Self.EventType) throws -> RxSwift.Single<MDVideocallSDK.SocketClientSchema.Input>
}
public protocol SocketInputStream : MDVideocallSDK.SocketEventType {
  associatedtype EventType
  func on() -> RxSwift.Observable<Self.EventType>
}
public protocol SocketStream {
  associatedtype SocketNativeType
  associatedtype SocketInputType
  associatedtype SocketOutputType
  var error: RxSwift.Observable<Self.SocketNativeType> { get }
  var status: RxSwift.Observable<Self.SocketNativeType> { get }
  func connect<Credentials>(credentials: Credentials?) -> RxSwift.Observable<Self.SocketNativeType> where Credentials : MDVideocallSDK.SocketCredentials
  func disconnect() -> RxSwift.Observable<Self.SocketNativeType>
  func input(stream event: MDVideocallSDK.SocketListenerType) throws -> MDVideocallSDK.AnySocketInputStream<Self.SocketInputType>
  func output(stream event: MDVideocallSDK.SocketEmissionType) throws -> MDVideocallSDK.AnySocketOutputStream<Self.SocketOutputType>
  func join(namespace: Swift.String)
  func leave()
  func clear()
}
@objc @_inheritsConvenienceInitializers public class AllergyEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var details: Swift.String?
  @objc dynamic public var patientHash: Swift.String?
  final public let severity: RealmSwift.RealmOptional<Swift.Int>
  @objc dynamic public var updatedAt: Foundation.Date
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.AllergyEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case severity
    case details
    case patientHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public struct VideoCallUserSchema : Swift.Codable {
  public let hash: Swift.String
  public let name: Swift.String?
  public let avatar: Swift.String?
  public let description: Swift.String?
  public init(hash: Swift.String, name: Swift.String?, avatar: Swift.String?, description: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallUserSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.VideoCallUserSchema, rhs: MDVideocallSDK.VideoCallUserSchema) -> Swift.Bool
}
public struct UserSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case firstName
    case lastName
    case email
    case phone
    case documentId
    case gender
    case birthday
    case cardNumber
    case contract
    case coverage
    case company
    case status
    case banned
    case features
    case termsAcceptedAt
    case companyGroupCode
    case feed
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum Gender : Swift.Int, Swift.Codable {
    case male
    case female
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum RegistrationStatus : Swift.Int, Swift.Codable {
    case freemium
    case processing
    case formalized
    case canceled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let email: Swift.String?
  public let phone: Swift.String?
  public let documentId: Swift.String?
  public let gender: MDVideocallSDK.UserSchema.Gender?
  public let status: MDVideocallSDK.UserSchema.RegistrationStatus?
  public let birthday: Foundation.Date?
  public let cardNumber: Swift.String?
  public let contract: Swift.String?
  public let coverage: Swift.String?
  public let company: Swift.String?
  public let banned: Swift.Int?
  public let features: MDVideocallSDK.UserFeaturesSchema?
  public let termsAcceptedAt: Foundation.Date?
  public let companyGroupCode: Swift.String?
  public let feed: MDVideocallSDK.UserFeedSchema?
  public var isClient: Swift.Bool {
    get
  }
  public var isBanned: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.UserSchema {
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.UserSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.UserSchema, rhs: MDVideocallSDK.UserSchema) -> Swift.Bool
}
public struct UserFeaturesSchema : Swift.Codable {
  public let videoCall: Swift.Bool?
  public let videoCall1to1: Swift.Bool?
  public let hasFeeds: Swift.Bool?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case videoCall
    case videoCall1to1
    case hasFeeds
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.UserFeaturesSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.UserFeaturesSchema, rhs: MDVideocallSDK.UserFeaturesSchema) -> Swift.Bool
}
public struct UserFeedSchema : Swift.Codable {
  public let hasFeed: Swift.Bool?
  public let homepage: Swift.String?
  public let feedId: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case hasFeed
    case homepage
    case feedId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.UserFeedSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.UserFeedSchema, rhs: MDVideocallSDK.UserFeedSchema) -> Swift.Bool
}
public struct SessionSchema : Swift.Codable {
  public let userHash: Swift.String
  public let sessionToken: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.SessionSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.SessionSchema, b: MDVideocallSDK.SessionSchema) -> Swift.Bool
}
public enum SocketClientSchema {
  public enum Input {
    case update
    case contacts([MDVideocallSDK.ContactSchema])
    case joinConversation(MDVideocallSDK.JoinConversationSchema)
    case message(MDVideocallSDK.MessageSchema)
    case messageList([MDVideocallSDK.MessageSchema])
    case messageStatus(MDVideocallSDK.MessageStatusSchema)
    case startTyping(MDVideocallSDK.TypingSchema)
    case stopTyping(MDVideocallSDK.TypingSchema)
  }
  public enum Output {
    case contacts(retrieveAll: Swift.Bool)
    case joinConversation(hash: Swift.String)
    case leaveConverstation(room: Swift.Int)
    case message(id: Swift.String, content: Swift.String, room: Swift.Int, type: MDVideocallSDK.MessageSchema.Kind, name: Swift.String?)
    case messageList(room: Swift.Int, limit: Swift.Int, pivot: Swift.String?, next: Swift.Bool?)
    case messageStatus(id: Swift.String, room: Swift.Int, status: MDVideocallSDK.MessageSchema.Status)
    case startTyping(room: Swift.Int)
    case stopTyping(room: Swift.Int)
    case deleteConversation(room: Swift.Int)
  }
  case connect(MDVideocallSDK.ConnectSchema)
  case disconnect(MDVideocallSDK.DisconnectSchema)
  case status(MDVideocallSDK.SocketClientStatus)
  case error(Swift.Error)
  case reconnect
  case reconnectAttempt
  case input(MDVideocallSDK.SocketClientSchema.Input)
  case output(MDVideocallSDK.SocketClientSchema.Output)
}
extension MDVideocallSDK.SocketClientSchema {
  public var connect: MDVideocallSDK.ConnectSchema? {
    get
  }
  public var disconnect: MDVideocallSDK.DisconnectSchema? {
    get
  }
  public var status: MDVideocallSDK.SocketClientStatus? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension MDVideocallSDK.SocketClientSchema.Input {
  public static func decode(_ event: MDVideocallSDK.SocketListenerType, from data: [Any], with mapper: MDVideocallSDK.CodableMapper) throws -> MDVideocallSDK.SocketClientSchema.Input
}
extension MDVideocallSDK.SocketClientSchema.Input {
  public var room: Swift.Int? {
    get
  }
}
public protocol MedicalDirectoryDetailControllerType {
  func fetch(by id: Swift.String, completion: @escaping ((Swift.Result<(MDVideocallSDK.MedicalProfessionalModel?, [MDVideocallSDK.MedicalSpecialityModel]), Swift.Error>) -> Swift.Void))
}
public struct MedicalDirectoryDetailController : MDVideocallSDK.MedicalDirectoryDetailControllerType {
  public init(_ professional: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalProfessionalModel>, speciality: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalSpecialityModel>, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(by id: Swift.String, completion: @escaping ((Swift.Result<(MDVideocallSDK.MedicalProfessionalModel?, [MDVideocallSDK.MedicalSpecialityModel]), Swift.Error>) -> Swift.Void))
}
public struct InboxHeaderStyle {
  public let headerView: UIKit.UIView
  public let frame: CoreFoundation.CGRect?
  public init(headerView: UIKit.UIView, frame: CoreFoundation.CGRect? = nil)
}
extension MDVideocallSDK.AllergyModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.AllergyEntity
  public var managedObject: MDVideocallSDK.AllergyEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.AllergyEntity) throws
}
public enum MedicalHistoryDeeplinkOption {
  case main
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MDVideocallSDK.MedicalHistoryDeeplinkOption : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalHistoryDeeplinkOption, rhs: MDVideocallSDK.MedicalHistoryDeeplinkOption) -> Swift.Bool
}
public protocol RemoteControllerAssembly {
  func resolve() -> MDVideocallSDK.RemoteController?
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func removeAllConstraints()
}
public protocol MeetingDoctorsDividerType : MDVideocallSDK.InboxBaseCellViewModelType {
  var contentView: UIKit.UIView { get }
  func configure<View>(cell: UIKit.UITableViewCell, view: View) where View : UIKit.UIView
  func select(id: Swift.String, name: Swift.String, role: MDVideocallSDK.MeetingDoctorsRole, authorized: Swift.Bool, saturated: MDVideocallSDK.MeetingDoctorsSaturation) -> Swift.Bool
}
extension MDVideocallSDK.MeetingDoctorsDividerType {
  public func configure<View>(cell _: UIKit.UITableViewCell, view _: View) where View : UIKit.UIView
  public func select(id _: Swift.String, name: Swift.String, role _: MDVideocallSDK.MeetingDoctorsRole, authorized _: Swift.Bool, saturated _: MDVideocallSDK.MeetingDoctorsSaturation) -> Swift.Bool
}
public class MeetingDoctorsDivider<ViewType> : MDVideocallSDK.MeetingDoctorsDividerType where ViewType : UIKit.UIView {
  public typealias ViewConfigurator = (_ cell: UIKit.UITableViewCell, _ view: ViewType) -> Swift.Void
  public typealias ViewSelector = (_ id: Swift.String, _ name: Swift.String, _ role: MDVideocallSDK.MeetingDoctorsRole, _ authorized: Swift.Bool, _ saturated: MDVideocallSDK.MeetingDoctorsSaturation) -> Swift.Bool
  final public let contentView: UIKit.UIView
  public init(view: ViewType)
  public func add(configuration: @escaping MDVideocallSDK.MeetingDoctorsDivider<ViewType>.ViewConfigurator) -> Self
  public func add(selector: @escaping MDVideocallSDK.MeetingDoctorsDivider<ViewType>.ViewSelector) -> Self
  public func configure<View>(cell: UIKit.UITableViewCell, view: View) where View : UIKit.UIView
  public func select(id: Swift.String, name: Swift.String, role: MDVideocallSDK.MeetingDoctorsRole, authorized: Swift.Bool, saturated: MDVideocallSDK.MeetingDoctorsSaturation) -> Swift.Bool
  @objc deinit
}
extension MDVideocallSDK.ContactSchema : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.ContactEntity {
    get
  }
  public init(managedObject _: MDVideocallSDK.ContactEntity) throws
  public typealias ManagedObject = MDVideocallSDK.ContactEntity
}
extension MDVideocallSDK.RoleSchema.RoleType {
  public var object: MDVideocallSDK.ContactEntity.Role {
    get
  }
}
extension MDVideocallSDK.ContactSchema.Status {
  public var object: MDVideocallSDK.ContactEntity.Status {
    get
  }
}
extension MDVideocallSDK.ContactSchema.VideoStatus {
  public var object: MDVideocallSDK.ContactEntity.VideoStatus {
    get
  }
}
public typealias MDMeetingDoctors = MDVideocallSDK.MeetingDoctors
public typealias MDResponse<T> = MDVideocallSDK.MDResult<T, MDVideocallSDK.MeetingDoctorsError>
public enum MDResult<Value, Error> {
  case success(Value)
  case failure(Error)
  public func process(doSuccess: (Value) -> Swift.Void, doFailure: (Error) -> Swift.Void)
  public func process<T>(doSuccess: (Value) -> MDVideocallSDK.MDResponse<T>, doFailure: (Error) -> MDVideocallSDK.MDResponse<T>) -> MDVideocallSDK.MDResponse<T>
}
public enum MeetingDoctorsResult<Value> {
  case success(Value)
  case failure(Swift.Error)
  public func process(doSuccess: (Value) -> Swift.Void, doFailure: (Swift.Error) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class MeetingDoctors {
  public struct Configuration {
    public let secret: Swift.String
    public let enableVideoCall: Swift.Bool
    public let videocallLongSoundFileName: Swift.String?
    public let videocallShortSoundFileName: Swift.String?
    public let environment: MDVideocallSDK.EnvironmentType
    public var buildConfiguration: MDVideocallSDK.BuildConfigurationType {
      get
    }
    public init(secret: Swift.String, enableVideoCall: Swift.Bool = false, environment: MDVideocallSDK.EnvironmentType = .production, videocallLongSoundFileName: Swift.String? = nil, videocallShortSoundFileName: Swift.String? = nil)
  }
  public static var referrer: MDVideocallSDK.MeetingDoctorsReferrerType? {
    get
  }
  public static var resources: Foundation.Bundle {
    get
  }
  public static var environmentLoader: MDVideocallSDK.EnvironmentLoader {
    get
  }
  public static var style: MDVideocallSDK.MeetingDoctorsStyleType? {
    get
    set
  }
  final public var firebaseToken: Swift.String? {
    get
  }
  public static var isAuthenticated: Swift.Bool {
    get
  }
  @objc deinit
  @discardableResult
  final public class func initialize(_ application: UIKit.UIApplication = UIApplication.shared, with configuration: MDVideocallSDK.MeetingDoctors.Configuration, options _: [UIKit.UIApplication.LaunchOptionsKey : Any]?, completion: ((MDVideocallSDK.MeetingDoctorsResult<MDVideocallSDK.MeetingDoctorsInstallationType>) -> Swift.Void)? = nil) -> Foundation.UUID?
  final public class func authenticate(token: Swift.String, completion: @escaping (MDVideocallSDK.MeetingDoctorsResult<Swift.Void>) -> Swift.Void)
  final public class func shutdown(_ completion: ((MDVideocallSDK.MeetingDoctorsResult<Swift.Void>) -> Swift.Void)? = nil)
  final public class func logout(_ completion: ((MDVideocallSDK.MeetingDoctorsResult<Swift.Void>) -> Swift.Void)? = nil)
  final public class func medicalHistoryViewController(withTitle titleText: Swift.String? = nil, withIcon icon: UIKit.UIImage? = nil) -> MDVideocallSDK.MeetingDoctorsResult<UIKit.UIViewController>
  final public class func updateStyle()
  final public class func unreadMessageCount(with filter: MDVideocallSDK.MeetingDoctorsFilterType, _ completion: @escaping (MDVideocallSDK.MeetingDoctorsResult<Swift.Int>) -> Swift.Void)
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func unreadMessageCount(_ completion: @escaping (MDVideocallSDK.MeetingDoctorsResult<Swift.Int>) -> Swift.Void)
  final public class func didReceiveRemoteNotification(_ application: UIKit.UIApplication = UIApplication.shared, with userInfo: [Swift.AnyHashable : Any], completion: @escaping ((MDVideocallSDK.MeetingDoctorsResult<UIKit.UIBackgroundFetchResult>) -> Swift.Void))
  final public class func deeplinkOption(for userInfo: [Swift.AnyHashable : Any]) -> MDVideocallSDK.MeetingDoctorsDeeplinkOption
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func userNotificationCenter(_ userNotificationCenter: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, completion: @escaping ((MDVideocallSDK.MeetingDoctorsResult<UserNotifications.UNNotificationPresentationOptions>) -> Swift.Void))
  final public class func userNotificationCenter(_ userNotificationCenter: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, completion: @escaping ((MDVideocallSDK.MeetingDoctorsResult<Swift.Void>) -> Swift.Void))
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func deeplink(_ deeplinkOption: MDVideocallSDK.MeetingDoctorsDeeplinkOption, origin: UIKit.UIViewController? = nil, animated: Swift.Bool = true, completion: @escaping ((MDVideocallSDK.MeetingDoctorsResult<Swift.Void>) -> Swift.Void))
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func registerFirebaseForNotifications(token: Swift.String, completion: @escaping (MDVideocallSDK.MDResponse<Swift.Void>) -> Swift.Void)
}
public protocol ScheduleModelType {
  var id: Swift.String { get }
  var userId: Swift.String { get }
  var state: MDVideocallSDK.ScheduleStateModel { get }
  var weekDay: MDVideocallSDK.ScheduleWeekDayModel { get }
  var firstPeriodStart: Swift.Int { get }
  var firstPeriodEnd: Swift.Int { get }
  var secondPeriodStart: Swift.Int { get }
  var secondPeriodEnd: Swift.Int { get }
}
public struct ScheduleModel : MDVideocallSDK.ScheduleModelType {
  public let id: Swift.String
  public let userId: Swift.String
  public let state: MDVideocallSDK.ScheduleStateModel
  public let weekDay: MDVideocallSDK.ScheduleWeekDayModel
  public let firstPeriodStart: Swift.Int
  public let firstPeriodEnd: Swift.Int
  public let secondPeriodStart: Swift.Int
  public let secondPeriodEnd: Swift.Int
  public init(id: Swift.String, userId: Swift.String, state: MDVideocallSDK.ScheduleStateModel, weekDay: MDVideocallSDK.ScheduleWeekDayModel, firstPeriodStart: Swift.Int, firstPeriodEnd: Swift.Int, secondPeriodStart: Swift.Int, secondPeriodEnd: Swift.Int)
}
extension MDVideocallSDK.ScheduleModel {
  public var firstPeriodTimeInterval: Foundation.TimeInterval {
    get
  }
  public var secondPeriodTimeInterval: Foundation.TimeInterval {
    get
  }
  public var dayOfWeek: MDVideocallSDK.ScheduleSchema.WeekDay? {
    get
  }
  public func firstPeriodDateTimeInterval(_ date: Foundation.Date) -> Foundation.DateInterval?
  public func secondPeriodDateTimeInterval(_ date: Foundation.Date) -> Foundation.DateInterval?
}
public protocol ChatMessageStatusViewModelType {
  var icon: UIKit.UIImage? { get }
}
public struct ChatMessageCellViewModel : MDVideocallSDK.ChatMessageProtocol {
  public enum Status : Swift.String {
    case pending
    case sent
    case delivered
    case received
    case read
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var model: MDVideocallSDK.MessageModel
  public let sender: MDVideocallSDK.ChatMessageSenderProtocol
  public var messageId: Swift.String {
    get
  }
  public var sentDate: Foundation.Date {
    get
  }
  public var kind: MDVideocallSDK.ChatMessageKindEnum {
    get
  }
  public var status: MDVideocallSDK.ChatMessageCellViewModel.Status {
    get
  }
  public init(model: MDVideocallSDK.MessageModel, sender: MDVideocallSDK.ChatMessageSenderProtocol)
  public func update(status: MDVideocallSDK.ChatMessageCellViewModel.Status) -> MDVideocallSDK.ChatMessageCellViewModel
}
extension MDVideocallSDK.ChatMessageCellViewModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ChatMessageCellViewModel, rhs: MDVideocallSDK.ChatMessageCellViewModel) -> Swift.Bool
}
extension MDVideocallSDK.ChatMessageCellViewModel {
  public var attachmentURL: Foundation.URL? {
    get
  }
}
extension MDVideocallSDK.ChatMessageCellViewModel.Status : MDVideocallSDK.ChatMessageStatusViewModelType {
  public var icon: UIKit.UIImage? {
    get
  }
}
extension MDVideocallSDK.MessageStatusModel {
  public init(view: MDVideocallSDK.ChatMessageCellViewModel.Status)
}
public protocol ChatMessageSenderProtocol {
  var senderId: Swift.String { get }
  var senderName: Swift.String { get }
}
public struct ChatMessageSender : MDVideocallSDK.ChatMessageSenderProtocol {
  public var senderId: Swift.String
  public var senderName: Swift.String
}
public protocol ChatMessageProtocol : MDVideocallSDK.TModel {
  var sender: MDVideocallSDK.ChatMessageSenderProtocol { get }
  var messageId: Swift.String { get }
  var sentDate: Foundation.Date { get }
  var kind: MDVideocallSDK.ChatMessageKindEnum { get }
}
public enum ChatMessageKindEnum {
  case text(Swift.String)
  case file(MDVideocallSDK.ChatFileItemProtocol)
  case photo(MDVideocallSDK.ChatMediaItemProtocol)
}
public protocol ChatMediaItemProtocol {
  var url: Foundation.URL? { get }
  var image: UIKit.UIImage? { get }
  var placeholderImage: UIKit.UIImage { get }
  var size: CoreFoundation.CGSize { get }
}
public protocol ChatFileItemProtocol {
  var data: Foundation.Data? { get }
  var name: Swift.String { get }
  var url: Foundation.URL { get }
  var size: Swift.Int { get }
}
public struct UserRequest : Swift.Codable {
  public let installationUUID: Swift.String
  public var userHash: Swift.String?
  public let osName: MDVideocallSDK.OSName?
  public let osVersion: Swift.String?
  public let appVersion: Swift.String?
  public let latitude: CoreLocation.CLLocationDegrees?
  public let longitude: CoreLocation.CLLocationDegrees?
  public let referrer: Swift.String?
  public init(_ uuid: Foundation.UUID, userHash: Swift.String? = nil, osName: MDVideocallSDK.OSName? = nil, osVersion: Swift.String? = nil, appVersion: Swift.String? = nil, location: CoreLocation.CLLocationCoordinate2D? = nil, referrer: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.UserRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.UserRequest, rhs: MDVideocallSDK.UserRequest) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TermsAndConditionsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol EncryptionProvider {
  var key: Foundation.Data? { get }
}
extension MDVideocallSDK.EncryptionProvider {
  public var key: Foundation.Data? {
    get
  }
}
public struct NativeSocketOutputStream : MDVideocallSDK.SocketOutputStream {
  public var name: Swift.String {
    get
  }
  public init(client: SocketIO.SocketIOClient, event: MDVideocallSDK.SocketEmissionType)
  public func emit(event: SocketIO.SocketData) throws
  public func acknowledge(event: SocketIO.SocketData) throws -> RxSwift.Single<MDVideocallSDK.SocketClientSchema.Input>
  public typealias EventType = SocketIO.SocketData
}
public protocol DiseaseModelType {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var details: Swift.String? { get }
  var diagnosis: Foundation.Date? { get }
  var resolution: Foundation.Date? { get }
  var patientHash: Swift.String { get }
}
public struct DiseaseModel : MDVideocallSDK.DiseaseModelType {
  public static let Stub: MDVideocallSDK.DiseaseModel
  public let id: Swift.String
  public let name: Swift.String
  public let details: Swift.String?
  public let diagnosis: Foundation.Date?
  public let resolution: Foundation.Date?
  public let patientHash: Swift.String
  public init(id: Swift.String, name: Swift.String, details: Swift.String?, diagnosis: Foundation.Date?, resolution: Foundation.Date?, patientHash: Swift.String)
}
extension MDVideocallSDK.DiseaseModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.DiseaseModel, rhs: MDVideocallSDK.DiseaseModel) -> Swift.Bool
}
extension MDVideocallSDK.DiseaseModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.DiseaseSchema
  public var schemaObject: MDVideocallSDK.DiseaseSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.DiseaseSchema) throws
}
extension MDVideocallSDK.DiseaseModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.DiseaseModel, Swift.String>
  public static let nameLens: MDVideocallSDK.Lens<MDVideocallSDK.DiseaseModel, Swift.String>
  public static let detailsLens: MDVideocallSDK.Lens<MDVideocallSDK.DiseaseModel, Swift.String?>
  public static let diagnosisLens: MDVideocallSDK.Lens<MDVideocallSDK.DiseaseModel, Foundation.Date?>
  public static let resolutionLens: MDVideocallSDK.Lens<MDVideocallSDK.DiseaseModel, Foundation.Date?>
  public static let patientHashLens: MDVideocallSDK.Lens<MDVideocallSDK.DiseaseModel, Swift.String>
}
public enum EndpointType : Swift.String, Swift.CodingKey, Swift.CaseIterable {
  case directory
  case console
  case core
  case api
  case customer
  case notifications
  case consultations
  case consultationsCustomer
  case sdk
  case electronicPrescription
  case coreV2
  case videocall
  case consultationsV2
  case marketing
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [MDVideocallSDK.EndpointType]
  public typealias RawValue = Swift.String
  public static var allCases: [MDVideocallSDK.EndpointType] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public protocol ApplicationServicePlugin : UIKit.UIApplicationDelegate {
}
public struct CustomerAuthSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case accessToken
    case tokenType
    case user
    case expiresIn
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let accessToken: Swift.String
  public let tokenType: Swift.String
  public let user: MDVideocallSDK.CustomerUserSchema
  public let expiresIn: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerAuthSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.CustomerAuthSchema, rhs: MDVideocallSDK.CustomerAuthSchema) -> Swift.Bool
}
public protocol CodableMapper {
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool = true, vibrate: Swift.Bool = false, style: UIKit.UIBlurEffect.Style? = nil, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func show(viewController: UIKit.UIViewController, animated: Swift.Bool = true, vibrate: Swift.Bool = false, style: UIKit.UIBlurEffect.Style? = nil, completion: (() -> Swift.Void)? = nil)
}
public enum MessageStatusModel : Swift.String {
  case pending
  case sent
  case delivered
  case received
  case read
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.MessageSchema.Status {
  public init(model: MDVideocallSDK.MessageStatusModel)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDLabelS16W400 : MDVideocallSDK.MDLabelBase {
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct SimpleRepository<E> : MDVideocallSDK.Repository {
  public init()
  public func fetch(by _: Swift.String) -> RxSwift.Observable<E?>
  public func fetch() -> RxSwift.Observable<([E], MDVideocallSDK.Changeset?)>
  public func query(with _: Foundation.NSPredicate, sorted _: [Foundation.NSSortDescriptor], offset _: Swift.Int, limit _: Swift.Int) -> RxSwift.Observable<([E], MDVideocallSDK.Changeset?)>
  public func save(entity _: E, update _: Swift.Bool) -> RxSwift.Observable<Swift.Void>
  public func save<S>(collection _: S, update _: Swift.Bool, clear _: Swift.Bool) -> RxSwift.Observable<Swift.Void> where E == S.Element, S : Swift.Sequence
  public func update(properties _: [MDVideocallSDK.AttributeValueType]) -> RxSwift.Observable<Swift.Void>
  public func delete(entity _: E) -> RxSwift.Observable<Swift.Void>
  public func delete<S>(collection _: S) -> RxSwift.Observable<Swift.Void> where E == S.Element, S : Swift.Sequence
  public func delete(with _: Foundation.NSPredicate) -> RxSwift.Observable<Swift.Void>
  public func clear(cascading _: Swift.Bool) -> RxSwift.Observable<Swift.Void>
  public func fetch(by _: Swift.String, completion: @escaping (Swift.Result<E?, Swift.Error>) -> Swift.Void)
  public func fetch(completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void)
  public func query(with _: Foundation.NSPredicate, sorted _: [Foundation.NSSortDescriptor], offset _: Swift.Int, limit _: Swift.Int, completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void)
  public func save(entity _: E, update _: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func save<S>(collection _: S, update _: Swift.Bool, clear _: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where E == S.Element, S : Swift.Sequence
  public func update(properties _: [MDVideocallSDK.AttributeValueType], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete(entity _: E, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete<S>(collection _: S, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where E == S.Element, S : Swift.Sequence
  public func delete(with _: Foundation.NSPredicate, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func clear(cascading _: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public typealias EntityType = E
}
public class Chat {
  public init()
  public func getRoomID() -> Swift.Int?
  public func getProfessionalHash() -> Swift.String?
  public func setRoomID(_ roomID: Swift.Int)
  public func setProfessionalHash(_ professionalHash: Swift.String)
  public func joinRoom(with id: Swift.String, _ completion: @escaping (Swift.Int) -> Swift.Void)
  public func fetchProfessionalDetail(from id: Swift.String, _ completion: @escaping (Swift.Result<MDVideocallSDK.ContactSchema, Swift.Error>) -> Swift.Void)
  public func fetchMessages(completion: @escaping (MDVideocallSDK.MeetingDoctorsResult<([MDVideocallSDK.MessageModel], MDVideocallSDK.Changeset?)>) -> Swift.Void)
  public func sendMessage(professionalSpeciality: Swift.String, message text: Swift.String, completion: (() -> Swift.Void)? = nil)
  public func leaveRoom()
  public func deleteMessages(completion: @escaping (() -> Swift.Void))
  public func sendImage(withURL url: Foundation.URL, image: UIKit.UIImage, completion: (() -> Swift.Void)? = nil)
  public func sendDocument(withURL url: Foundation.URL, completion: (() -> Swift.Void)? = nil)
  public func sendVideo(withName name: Swift.String, withURL url: Foundation.URL, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public enum ContactStatusModel : Swift.String {
  case unknown
  case offline
  case online
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.ContactStatusModel {
  public static let count: Swift.Int
  public static let allCases: [MDVideocallSDK.ContactStatusModel]
}
public struct ScheduleSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case userId
    case active
    case day
    case firstPeriodStart
    case firstPeriodEnd
    case secondPeriodStart
    case secondPeriodEnd
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum State : Swift.Int, Swift.Codable {
    case disabled
    case enabled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum WeekDay : Swift.String, Swift.Codable {
    case sunday
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int
  public let userId: Swift.Int
  public let active: MDVideocallSDK.ScheduleSchema.State
  public let day: MDVideocallSDK.ScheduleSchema.WeekDay
  public let firstPeriodStart: Swift.Int
  public let firstPeriodEnd: Swift.Int
  public let secondPeriodStart: Swift.Int
  public let secondPeriodEnd: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ScheduleSchema {
  public var firstPeriodTimeInterval: Foundation.TimeInterval {
    get
  }
  public var secondPeriodTimeInterval: Foundation.TimeInterval {
    get
  }
}
extension MDVideocallSDK.ScheduleSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ScheduleSchema, rhs: MDVideocallSDK.ScheduleSchema) -> Swift.Bool
}
public struct AllergySchema : MDVideocallSDK.MedicalHistorySchema {
  public let id: Swift.UInt
  public let name: Swift.String?
  public let severity: Swift.Int
  public let details: Swift.String
  public let patientHash: Swift.String?
  public init(id: Swift.UInt, name: Swift.String?, severity: Swift.Int, details: Swift.String, patientHash: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.AllergySchema {
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.AllergySchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.AllergySchema, rhs: MDVideocallSDK.AllergySchema) -> Swift.Bool
}
public class RealmRepository<E> : MDVideocallSDK.Repository where E : RealmSwiftObject {
  convenience public init(configuration: RealmSwift.Realm.Configuration)
  public init(provider: MDVideocallSDK.RealmStoreProvider, configuration: RealmSwift.Realm.Configuration)
  public func fetch(by id: Swift.String) -> RxSwift.Observable<E?>
  public func fetch() -> RxSwift.Observable<([E], MDVideocallSDK.Changeset?)>
  public func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor] = [], offset: Swift.Int = 0, limit: Swift.Int = 0) -> RxSwift.Observable<([E], MDVideocallSDK.Changeset?)>
  public func save(entity: E, update: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool) -> RxSwift.Observable<Swift.Void> where E == S.Element, S : Swift.Sequence
  public func update(properties: [MDVideocallSDK.AttributeValueType]) -> RxSwift.Observable<Swift.Void>
  public func delete(entity: E) -> RxSwift.Observable<Swift.Void>
  public func delete<S>(collection: S) -> RxSwift.Observable<Swift.Void> where E == S.Element, S : Swift.Sequence
  public func delete(with predicate: Foundation.NSPredicate) -> RxSwift.Observable<Swift.Void>
  public func clear(cascading: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func fetch(by id: Swift.String, completion: @escaping (Swift.Result<E?, Swift.Error>) -> Swift.Void)
  public func fetch(completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void)
  public func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor], offset _: Swift.Int, limit _: Swift.Int, completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void)
  public func save(entity: E, update: Swift.Bool = true, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where E == S.Element, S : Swift.Sequence
  public func update(properties: [MDVideocallSDK.AttributeValueType], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete(entity: E, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete<S>(collection: S, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where E == S.Element, S : Swift.Sequence
  public func delete(with predicate: Foundation.NSPredicate, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func clear(cascading: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public typealias EntityType = E
  @objc deinit
}
public protocol CustomerNotificationsAdapter {
  func register(_ request: MDVideocallSDK.CustomerRegisterNotificationRequest) -> RxSwift.Single<MDVideocallSDK.CustomerNotificationSchema>
  func unregister(_ request: MDVideocallSDK.CustomerRegisterNotificationRequest) -> RxSwift.Single<MDVideocallSDK.CustomerErrorSchema>
}
public enum OSName : Swift.String, Swift.Codable {
  case iOS
  case android
  public var id: Swift.Int {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SetupRequest : Swift.Codable {
  public let installationUUID: Swift.String
  public let osName: MDVideocallSDK.OSName
  public let osVersion: Swift.String
  public let appVersion: Swift.String
  public let deviceModel: Swift.String
  public let advertisingId: Swift.String?
  public let referrer: Swift.String?
  public let languageCode: Swift.String?
  public let countryCode: Swift.String?
  public let bundleId: Swift.String
  public init(_ uuid: Foundation.UUID, osVersion: Swift.String, model: Swift.String, appVersion: Swift.String, advertisingId: Swift.String?, referrer: Swift.String? = nil, languageCode: Swift.String? = Locale.current.languageCode?.lowercased(), countryCode: Swift.String? = nil)
  public init?(_ uuid: Foundation.UUID, bundle: Foundation.Bundle, device: UIKit.UIDevice, advertising: AdSupport.ASIdentifierManager = ASIdentifierManager.shared(), referrer: Swift.String? = nil)
  public init(installationUUID: Swift.String, osName: MDVideocallSDK.OSName, osVersion: Swift.String, appVersion: Swift.String, deviceModel: Swift.String, advertisingId: Swift.String?, referrer: Swift.String?, languageCode: Swift.String?, countryCode: Swift.String?, bundleId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.SetupRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.SetupRequest, rhs: MDVideocallSDK.SetupRequest) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class WatchDog : ObjectiveC.NSObject {
  final public let repeatTime: Foundation.TimeInterval
  public var action: (() -> Swift.Void)?
  public var isRunning: Swift.Bool {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  public init(repeatTime: Foundation.TimeInterval)
  @objc deinit
  public func start()
  public func stop()
}
public struct FirebaseRemoteNotificationSchema : Swift.Decodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let data: MDVideocallSDK.FirebaseRemoteNotificationModuleContent
  public init(from decoder: Swift.Decoder) throws
  public init()
}
extension MDVideocallSDK.FirebaseRemoteNotificationSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.FirebaseRemoteNotificationSchema, rhs: MDVideocallSDK.FirebaseRemoteNotificationSchema) -> Swift.Bool
}
public enum FirebaseRemoteNotificationTypeKey : Swift.String {
  case invitationCreated
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FirebaseRemoteNotificationModuleKey : Swift.String {
  case messenger
  case videoCall
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.FirebaseRemoteNotificationModuleKey : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.FirebaseRemoteNotificationModuleKey : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.FirebaseRemoteNotificationModuleKey, rhs: MDVideocallSDK.FirebaseRemoteNotificationModuleKey) -> Swift.Bool
}
public enum FirebaseRemoteNotificationModuleContent {
  case messenger(MDVideocallSDK.MessengerRemoteNotificationSchema)
  case videoCall(MDVideocallSDK.VideoCallRemoteNotificationSchema)
  case unknown
}
extension MDVideocallSDK.FirebaseRemoteNotificationModuleContent : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.FirebaseRemoteNotificationModuleContent, rhs: MDVideocallSDK.FirebaseRemoteNotificationModuleContent) -> Swift.Bool
}
extension MDVideocallSDK.MeetingDoctors {
  @available(*, deprecated, renamed: "professionalListViewController", message: "Use professionalListViewController instead")
  final public class func messengerViewController(with filter: MDVideocallSDK.MeetingDoctorsFilterType = MeetingDoctorsFilter.default, withTitle titleText: Swift.String? = nil, showHeader: Swift.Bool = false, showDivider: Swift.Bool = true, showTopDividers: Swift.Bool = true, onUpdateLayout listener: ((CoreFoundation.CGSize) -> Swift.Void)? = nil) -> MDVideocallSDK.MeetingDoctorsResult<UIKit.UINavigationController>
  final public class func professionalListViewController(with filter: MDVideocallSDK.MeetingDoctorsFilterType = MeetingDoctorsFilter.default, showHeader: Swift.Bool = false, divider: MDVideocallSDK.MeetingDoctorsDividerType? = nil, topDividers: [MDVideocallSDK.MeetingDoctorsDividerType]? = [], onUpdateLayout listener: ((CoreFoundation.CGSize) -> Swift.Void)? = nil) -> MDVideocallSDK.MeetingDoctorsResult<UIKit.UIViewController>
  final public class func messengerChatViewController(searchOption: MDVideocallSDK.MeetingDoctorsSearchOption, actionMessage: MDVideocallSDK.MeetingDoctorsActionMessage, completion: @escaping (MDVideocallSDK.MeetingDoctorsResult<UIKit.UIViewController>) -> Swift.Void)
}
extension Foundation.NSLocale {
  public static var is12hClockFormat: Swift.Bool {
    get
  }
}
extension MDVideocallSDK.UserModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.UserEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.UserEntity) throws
  public typealias ManagedObject = MDVideocallSDK.UserEntity
}
extension MDVideocallSDK.UserFeaturesModel : MDVideocallSDK.Persistable {
  public init(managedObject: MDVideocallSDK.UserFeaturesEntity) throws
  public var managedObject: MDVideocallSDK.UserFeaturesEntity {
    get
  }
  public typealias ManagedObject = MDVideocallSDK.UserFeaturesEntity
}
extension MDVideocallSDK.UserFeedModel : MDVideocallSDK.Persistable {
  public init(managedObject: MDVideocallSDK.UserFeedEntity) throws
  public var managedObject: MDVideocallSDK.UserFeedEntity {
    get
  }
  public typealias ManagedObject = MDVideocallSDK.UserFeedEntity
}
extension MDVideocallSDK.UserGenderModel {
  public var object: MDVideocallSDK.UserEntity.Gender {
    get
  }
}
extension MDVideocallSDK.UserEntity.Gender {
  public var model: MDVideocallSDK.UserGenderModel {
    get
  }
}
extension MDVideocallSDK.UserRegistrationStatusModel {
  public var object: MDVideocallSDK.UserEntity.RegistrationStatus {
    get
  }
}
extension MDVideocallSDK.UserEntity.RegistrationStatus {
  public var model: MDVideocallSDK.UserRegistrationStatusModel {
    get
  }
}
public typealias RequestSchema = Swift.Encodable
public typealias ResponseSchema = Swift.Decodable
public typealias ErrorResponseSchema = Swift.Decodable & Swift.Error
public protocol SessionAdapter {
  var adapters: MDVideocallSDK.CompositeRequestAdapter? { get }
  var mapper: MDVideocallSDK.CodableMapper { get }
  var endpoint: MDVideocallSDK.Endpoint { get }
  func request<R, S, E>(_ route: MDVideocallSDK.Routable, parameter: R?, error type: E.Type) -> RxSwift.Single<S> where R : Swift.Encodable, S : Swift.Decodable, E : Swift.Decodable, E : Swift.Error
  func request<R, S, E>(_ route: MDVideocallSDK.Routable, parameter: R?, error type: E.Type, completion: @escaping (Swift.Result<S, Swift.Error>) -> Swift.Void) where R : Swift.Encodable, S : Swift.Decodable, E : Swift.Decodable, E : Swift.Error
  func append(adapter: MDVideocallSDK.MDARequestAdapter?)
  func clear()
}
public typealias MedicalQueryBuildable = MDVideocallSDK.RemoteRequestBuildable & MDVideocallSDK.StorePredicateBuildable
public protocol StorePredicateBuildable {
  func build() -> Foundation.NSPredicate
}
public protocol RemoteRequestBuildable {
  func build() -> MDVideocallSDK.PaginableRequest
}
public class MedicalQueryBuilder {
  public enum Kind {
    case coverage
    case speciality
    case professional
    case address
    public static func == (a: MDVideocallSDK.MedicalQueryBuilder.Kind, b: MDVideocallSDK.MedicalQueryBuilder.Kind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var keywords: Swift.String? {
    get
  }
  public var coverageId: Swift.String? {
    get
  }
  public var specialityId: Swift.String? {
    get
  }
  public var location: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var page: MDVideocallSDK.PageRequest? {
    get
  }
  public init(type: MDVideocallSDK.MedicalQueryBuilder.Kind)
  public func with(keywords: Swift.String) -> Self
  public func with(coverageId: Swift.String) -> Self
  public func with(specialityId: Swift.String) -> Self
  public func with(location: CoreLocation.CLLocationCoordinate2D) -> Self
  public func with(page: MDVideocallSDK.PageRequest) -> Self
  @objc deinit
}
extension MDVideocallSDK.MedicalQueryBuilder : MDVideocallSDK.StorePredicateBuildable {
  public func build() -> Foundation.NSPredicate
}
extension MDVideocallSDK.MedicalQueryBuilder : MDVideocallSDK.RemoteRequestBuildable {
  public func build() -> MDVideocallSDK.PaginableRequest
}
@objc @_inheritsConvenienceInitializers public class NotSecuredNetworkSessionManager : ObjectiveC.NSObject, MDVideocallSDK.MDNetworkSessionManagerProtocol {
  public func request(_ request: Foundation.URLRequest, completion: @escaping MDVideocallSDK.NotSecuredNetworkSessionManager.CompletionHandler) -> MDVideocallSDK.MDNetworkCancellableProtocol
  @objc override dynamic public init()
  @objc deinit
}
public enum DerivationType : Swift.String {
  case interconsultation
  case diagnosticProcedures
  case therapeuticProcedures
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct DerivationReportModel {
  public let id: Swift.Int?
  public let type: MDVideocallSDK.DerivationType?
  public let payload: Swift.String?
  public let filename: Swift.String?
  public let url: Swift.String?
  public let company: MDVideocallSDK.CompanyReportModel?
  public let professional: MDVideocallSDK.ProfessionalReportModel?
  public let createdAt: Swift.String?
  public let customerHash: Swift.String?
  public let friendlyName: Swift.String?
  public init(id: Swift.Int?, type: Swift.String?, payload: Swift.String?, filename: Swift.String?, url: Swift.String?, company: MDVideocallSDK.CompanyReportModel?, professional: MDVideocallSDK.ProfessionalReportModel?, createdAt: Swift.String?, customerHash: Swift.String?, friendlyName: Swift.String?)
  public init(schemaObject: MDVideocallSDK.DerivationReportSchema) throws
}
extension QuartzCore.CALayer {
  public func rotate()
}
public protocol MDRequestableProtocol {
  var url: Swift.String { get }
  var path: Swift.String { get }
  var method: MDVideocallSDK.MDHTTP.Method { get }
  var headers: [MDVideocallSDK.MDHTTP.Header.Key : Swift.String]? { get }
  var body: Foundation.Data? { get }
  var queryItems: [Swift.String : Swift.String]? { get }
  var maxRetries: Swift.Int { get }
  func getURLRequest() -> Foundation.URLRequest?
}
public typealias MDResponseRequestable = MDVideocallSDK.MDRequestableProtocol & MDVideocallSDK.MDResponseDecoderProtocol
public protocol MedicalHistoryDetailControllerType {
  associatedtype ElementModel : MDVideocallSDK.Transmittable
  func fetch(by id: Swift.String) -> RxSwift.Observable<Self.ElementModel?>
  func save(_ element: Self.ElementModel, update: Swift.Bool) -> RxSwift.Observable<Self.ElementModel>
  func delete(_ element: Self.ElementModel) -> RxSwift.Observable<Swift.Void>
}
public class MedicalHistoryDetailController<Model> : MDVideocallSDK.MedicalHistoryDetailControllerType where Model : MDVideocallSDK.Transmittable, Model.SchemaObject : MDVideocallSDK.MedicalHistorySchema {
  public init(_ repository: MDVideocallSDK.AnyRepository<Model>, _ adapter: MDVideocallSDK.AnyMedicalHistoryAdapter<Model.SchemaObject>, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(by id: Swift.String) -> RxSwift.Observable<Model?>
  public func save(_ element: Model, update: Swift.Bool) -> RxSwift.Observable<Model>
  public func delete(_ element: Model) -> RxSwift.Observable<Swift.Void>
  public typealias ElementModel = Model
  @objc deinit
}
public class MedicalHistoryDetailIdentifiableController<Model> : MDVideocallSDK.MedicalHistoryDetailControllerType where Model : MDVideocallSDK.Transmittable, Model.SchemaObject : MDVideocallSDK.IdentifiableSchema {
  public init(_ repository: MDVideocallSDK.AnyRepository<Model>, _ adapter: MDVideocallSDK.AnyIdentifiableAdapter<Model.SchemaObject>, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(by id: Swift.String) -> RxSwift.Observable<Model?>
  public func save(_ element: Model, update: Swift.Bool) -> RxSwift.Observable<Model>
  public func delete(_ element: Model) -> RxSwift.Observable<Swift.Void>
  public typealias ElementModel = Model
  @objc deinit
}
public protocol AllergyModelType {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var severity: Swift.Int { get }
  var details: Swift.String { get }
  var patientHash: Swift.String { get }
}
public struct AllergyModel : MDVideocallSDK.AllergyModelType {
  public static let Stub: MDVideocallSDK.AllergyModel
  public let id: Swift.String
  public let name: Swift.String
  public let severity: Swift.Int
  public let details: Swift.String
  public let patientHash: Swift.String
  public init(id: Swift.String, name: Swift.String, severity: Swift.Int, details: Swift.String, patientHash: Swift.String)
}
extension MDVideocallSDK.AllergyModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.AllergyModel, rhs: MDVideocallSDK.AllergyModel) -> Swift.Bool
}
extension MDVideocallSDK.AllergyModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.AllergySchema
  public var schemaObject: MDVideocallSDK.AllergySchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.AllergySchema) throws
}
extension MDVideocallSDK.AllergyModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.AllergyModel, Swift.String>
  public static let nameLens: MDVideocallSDK.Lens<MDVideocallSDK.AllergyModel, Swift.String>
  public static let severityLens: MDVideocallSDK.Lens<MDVideocallSDK.AllergyModel, Swift.Int>
  public static let detailsLens: MDVideocallSDK.Lens<MDVideocallSDK.AllergyModel, Swift.String>
  public static let patientHashLens: MDVideocallSDK.Lens<MDVideocallSDK.AllergyModel, Swift.String>
}
extension Swift.PartialKeyPath where Root == MDVideocallSDK.AllergyModel {
  public var stringValue: Swift.String {
    get
  }
}
public struct UIImageViewAlignmentMask : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let center: MDVideocallSDK.UIImageViewAlignmentMask
  public static let left: MDVideocallSDK.UIImageViewAlignmentMask
  public static let right: MDVideocallSDK.UIImageViewAlignmentMask
  public static let top: MDVideocallSDK.UIImageViewAlignmentMask
  public static let bottom: MDVideocallSDK.UIImageViewAlignmentMask
  public static let topLeft: MDVideocallSDK.UIImageViewAlignmentMask
  public static let topRight: MDVideocallSDK.UIImageViewAlignmentMask
  public static let bottomLeft: MDVideocallSDK.UIImageViewAlignmentMask
  public static let bottomRight: MDVideocallSDK.UIImageViewAlignmentMask
  public typealias ArrayLiteralElement = MDVideocallSDK.UIImageViewAlignmentMask
  public typealias Element = MDVideocallSDK.UIImageViewAlignmentMask
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class UIImageViewAligned : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) open var alignment: MDVideocallSDK.UIImageViewAlignmentMask {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignTop: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignRight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignBottom: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @objc deinit
}
public protocol InboxContactModelType {
  var id: Swift.String { get }
  var channel: Swift.String { get }
  var name: Swift.String { get }
  var avatarURL: Foundation.URL { get }
  var overview: Swift.String { get }
  var speciality: Swift.String { get }
  var specialityCode: Swift.String { get }
  var specialityType: MDVideocallSDK.SpecialityTypeModel { get }
  var role: MDVideocallSDK.ContactRoleModel { get }
  var status: MDVideocallSDK.ContactStatusModel { get set }
  var videoStatus: MDVideocallSDK.VideoStatusModel? { get set }
  var unread: [MDVideocallSDK.MessageModel] { get }
  var lastMessageTimestamp: Foundation.TimeInterval? { get }
  var pending: Swift.Int { get }
  var timezone: Foundation.TimeZone { get }
  var onHolidays: Swift.Bool { get }
  var schedules: [MDVideocallSDK.ScheduleModel] { get }
  var saturated: Swift.String { get }
  var collegiateNumber: Swift.String { get }
  var conversationId: Swift.String? { get }
  var isAccessible: Swift.Bool { get }
}
public struct InboxContactModel : MDVideocallSDK.InboxContactModelType {
  public let id: Swift.String
  public let channel: Swift.String
  public let name: Swift.String
  public let avatarURL: Foundation.URL
  public let overview: Swift.String
  public let speciality: Swift.String
  public let specialityCode: Swift.String
  public let specialityType: MDVideocallSDK.SpecialityTypeModel
  public let role: MDVideocallSDK.ContactRoleModel
  public var status: MDVideocallSDK.ContactStatusModel
  public var videoStatus: MDVideocallSDK.VideoStatusModel?
  public let unread: [MDVideocallSDK.MessageModel]
  public let lastMessageTimestamp: Foundation.TimeInterval?
  public let pending: Swift.Int
  public let timezone: Foundation.TimeZone
  public let timeZoneOffset: Swift.Int
  public let nextOnlineAt: Foundation.Date?
  public let nextOfflineAt: Foundation.Date?
  public let onHolidays: Swift.Bool
  public let schedules: [MDVideocallSDK.ScheduleModel]
  public let updatedAt: Foundation.Date
  public let saturated: Swift.String
  public let collegiateNumber: Swift.String
  public let conversationId: Swift.String?
  public let isVcAvailable: Swift.Bool?
  public let isAccessible: Swift.Bool
  public init(id: Swift.String, channel: Swift.String, name: Swift.String, avatarURL: Foundation.URL, overview: Swift.String, speciality: Swift.String, specialityCode: Swift.String, specialityType: MDVideocallSDK.SpecialityTypeModel, role: MDVideocallSDK.ContactRoleModel, status: MDVideocallSDK.ContactStatusModel, videoStatus: MDVideocallSDK.VideoStatusModel?, unread: [MDVideocallSDK.MessageModel], lastMessageTimestamp: Foundation.TimeInterval?, pending: Swift.Int, timezone: Foundation.TimeZone, timeZoneOffset: Swift.Int, nextOnlineAt: Foundation.Date?, nextOfflineAt: Foundation.Date?, onHolidays: Swift.Bool, schedules: [MDVideocallSDK.ScheduleModel], updatedAt: Foundation.Date, saturated: Swift.String, collegiateNumber: Swift.String, conversationId: Swift.String?, isVcAvailable: Swift.Bool?, isAccessible: Swift.Bool)
}
extension MDVideocallSDK.InboxContactModel {
  public typealias ScheduleAvailability = (schedule: Foundation.Date?, availability: MDVideocallSDK.ScheduleAvailabilityModel)
  public func findNextSchedule() -> (schedule: Foundation.Date?, availability: MDVideocallSDK.ScheduleAvailabilityModel)
  public func mapWeekDaySchedule(for date: Foundation.Date) -> [MDVideocallSDK.ScheduleSchema.WeekDay : [Foundation.DateInterval?]]
}
extension MDVideocallSDK.InboxContactModel {
  public var lastMessageDate: Foundation.Date? {
    get
  }
}
extension MDVideocallSDK.InboxContactModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let channelLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let nameLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let avatarURLLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Foundation.URL>
  public static let overviewLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let specialityLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let specialityCodeLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let specialityTypeLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, MDVideocallSDK.SpecialityTypeModel>
  public static let roleLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, MDVideocallSDK.ContactRoleModel>
  public static let statusLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, MDVideocallSDK.ContactStatusModel>
  public static let videoStatusLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, MDVideocallSDK.VideoStatusModel?>
  public static let unreadLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, [MDVideocallSDK.MessageModel]>
  public static let lastMessageTimestampLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Foundation.TimeInterval?>
  public static let pendingLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.Int>
  public static let timezoneLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Foundation.TimeZone>
  public static let timeZoneOffsetLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.Int>
  public static let nextOnlineAtLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Foundation.Date?>
  public static let nextOfflineAtLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Foundation.Date?>
  public static let onHolidaysLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.Bool>
  public static let schedulesLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, [MDVideocallSDK.ScheduleModel]>
  public static let updatedAtLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Foundation.Date>
  public static let saturatedLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let collegiateNumberLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String>
  public static let conversationIdLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.String?>
  public static let isVcAvailableLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.Bool?>
  public static let isAccessibleLens: MDVideocallSDK.Lens<MDVideocallSDK.InboxContactModel, Swift.Bool>
}
public protocol NotificationAdapter {
  func unread(_ request: MDVideocallSDK.MessageCountRequest) -> RxSwift.Single<MDVideocallSDK.CountSchema>
}
public enum MeetingDoctorsActionMessage {
  case incoming(Swift.String)
  case outgoing(Swift.String)
  case pretyped(Swift.String)
  case action(action: MDVideocallSDK.MeetingDoctorsMessagAction)
  case none
}
extension MDVideocallSDK.MeetingDoctorsActionMessage : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MeetingDoctorsActionMessage, rhs: MDVideocallSDK.MeetingDoctorsActionMessage) -> Swift.Bool
}
public enum MeetingDoctorsMessagAction : Swift.CaseIterable {
  case open1to1
  case unknown
  public static func from(string: Swift.String) -> MDVideocallSDK.MeetingDoctorsMessagAction
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [MDVideocallSDK.MeetingDoctorsMessagAction]
  public static var allCases: [MDVideocallSDK.MeetingDoctorsMessagAction] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension MDVideocallSDK.MeetingDoctorsMessagAction : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MeetingDoctorsMessagAction, rhs: MDVideocallSDK.MeetingDoctorsMessagAction) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class MedicationEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var details: Swift.String?
  @objc dynamic public var posology: Swift.String?
  @objc dynamic public var patientHash: Swift.String?
  @objc dynamic public var updatedAt: Foundation.Date
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.MedicationEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case details
    case posology
    case patientHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public class AuthorizationRequestInterceptor : MDVideocallSDK.MDARequestAdapter {
  public init(_ token: Swift.String)
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  @objc deinit
}
extension MDVideocallSDK.VideoCallReportModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.VideoCallReportEntity
  public var managedObject: MDVideocallSDK.VideoCallReportEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.VideoCallReportEntity) throws
}
public struct InboxDividerCellViewModel : MDVideocallSDK.MeetingDoctorsDividerType {
  public var contentView: UIKit.UIView {
    get
  }
  public init(_ behavior: MDVideocallSDK.MeetingDoctorsDividerType)
  public func configure<View>(cell: UIKit.UITableViewCell, view: View) where View : UIKit.UIView
}
public class RealmSocketController : MDVideocallSDK.SocketController {
  public var error: RxSwift.Observable<MDVideocallSDK.SocketControllerModel> {
    get
  }
  public var status: RxSwift.Observable<MDVideocallSDK.SocketControllerModel> {
    get
  }
  convenience public init(client: MDVideocallSDK.SocketClientStream, configuration: RealmSwift.Realm.Configuration)
  public init(client: MDVideocallSDK.SocketClientStream, provider: MDVideocallSDK.RealmStoreProvider, configuration: RealmSwift.Realm.Configuration)
  public func connect<Credentials>(credentials: Credentials? = nil) -> RxSwift.Observable<MDVideocallSDK.SocketControllerModel> where Credentials : MDVideocallSDK.SocketCredentials
  public func disconnect() -> RxSwift.Observable<MDVideocallSDK.SocketControllerModel>
  public func input(stream event: MDVideocallSDK.SocketListenerType) throws -> MDVideocallSDK.AnySocketInputStream<MDVideocallSDK.SocketClientSchema.Input>
  public func output(stream event: MDVideocallSDK.SocketEmissionType) throws -> MDVideocallSDK.AnySocketOutputStream<MDVideocallSDK.SocketClientSchema.Output>
  public func join(namespace: Swift.String)
  public func leave()
  public func clear()
  public typealias SocketInputType = MDVideocallSDK.SocketClientSchema.Input
  public typealias SocketNativeType = MDVideocallSDK.SocketControllerModel
  public typealias SocketOutputType = MDVideocallSDK.SocketClientSchema.Output
  @objc deinit
}
extension MDVideocallSDK.MDPermission {
  public static var microphone: MDVideocallSDK.MDMicrophonePermission {
    get
  }
}
@_inheritsConvenienceInitializers public class MDMicrophonePermission : MDVideocallSDK.MDPermission {
  override open var type: MDVideocallSDK.MDPermissionTypeEnum {
    get
  }
  open var usageDescriptionKey: Swift.String? {
    get
  }
  override public var status: MDVideocallSDK.MDPermissionStatusEnum {
    get
  }
  override public func request(completion: @escaping () -> Swift.Void)
  override public init()
  @objc deinit
}
public class MDVideoconsultationStatusRequestModel : Swift.Codable {
  public init(status: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ScheduleSchema.WeekDay : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MDVideocallSDK.ScheduleSchema.WeekDay {
  public static let allValues: [MDVideocallSDK.ScheduleSchema.WeekDay]
  public static let workDaysValues: [MDVideocallSDK.ScheduleSchema.WeekDay]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDVideocallSpinnerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setImageView(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) public func setImageView(tintColor: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) public func setTitle(text: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func setTitle(textColor: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) public func setSubtitle(text: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func setSubtitle(textColor: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) public func startAnimation()
  @_Concurrency.MainActor(unsafe) public func stopAnimation()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MDVideocallSDK.MDVideocallSpinnerView {
  @_hasMissingDesignatedInitializers public class Builder {
    @discardableResult
    public func with(image: UIKit.UIImage?) -> MDVideocallSDK.MDVideocallSpinnerView.Builder
    @discardableResult
    public func with(tintColor: UIKit.UIColor?) -> MDVideocallSDK.MDVideocallSpinnerView.Builder
    @discardableResult
    public func with(titleText: Swift.String?) -> MDVideocallSDK.MDVideocallSpinnerView.Builder
    @discardableResult
    public func with(subtitleText: Swift.String?) -> MDVideocallSDK.MDVideocallSpinnerView.Builder
    @discardableResult
    public func with(textColor: UIKit.UIColor?) -> MDVideocallSDK.MDVideocallSpinnerView.Builder
    public func build() -> MDVideocallSDK.MDVideocallSpinnerView
    @objc deinit
  }
}
public typealias AttributeValue = (name: Swift.String, value: Any)
public protocol AttributeValueType {
  var parameter: MDVideocallSDK.AttributeValue { get }
}
public protocol QueryType {
  var predicate: Foundation.NSPredicate? { get }
  var descriptors: [Foundation.NSSortDescriptor] { get }
  var offset: Swift.Int { get }
  var limit: Swift.Int { get }
}
public class ProfessionalList {
  public init()
  public func getProfessionalList(completion: @escaping (Foundation.Data?) -> Swift.Void)
  @objc deinit
}
public struct RemoteHeaderTags {
  public static let Authorization: Swift.String
  public static let SessionToken: Swift.String
  public static let ApiKey: Swift.String
}
public struct RemoteDefaultHeaders {
  public static let SecurityHeaders: [Swift.String : Swift.String]
}
public struct RealmStoreMigrationV0 : MDVideocallSDK.StoreMigration {
  public var version: Swift.UInt64 {
    get
  }
  public init()
  public func migrate(_ migration: RealmSwift.Migration, to _: Swift.UInt64, from oldSchemaVersion: Swift.UInt64) -> Swift.Bool
  public func validate(schema: RealmSwift.Schema) -> Swift.Bool
}
public struct RealmStoreMigrationV1 : MDVideocallSDK.StoreMigration {
  public var version: Swift.UInt64 {
    get
  }
  public init()
  public func migrate(_ migration: RealmSwift.Migration, to _: Swift.UInt64, from oldSchemaVersion: Swift.UInt64) -> Swift.Bool
  public func validate(schema: RealmSwift.Schema) -> Swift.Bool
}
public struct RealmStoreMigrationV2 : MDVideocallSDK.StoreMigration {
  public var version: Swift.UInt64 {
    get
  }
  public init()
  public func migrate(_ migration: RealmSwift.Migration, to _: Swift.UInt64, from oldSchemaVersion: Swift.UInt64) -> Swift.Bool
  public func validate(schema: RealmSwift.Schema) -> Swift.Bool
}
public struct RealmStoreMigrationV3 : MDVideocallSDK.StoreMigration {
  public var version: Swift.UInt64 {
    get
  }
  public init()
  public func migrate(_ migration: RealmSwift.Migration, to _: Swift.UInt64, from oldSchemaVersion: Swift.UInt64) -> Swift.Bool
  public func validate(schema: RealmSwift.Schema) -> Swift.Bool
}
public struct RealmStoreMigrationV4 : MDVideocallSDK.StoreMigration {
  public var version: Swift.UInt64 {
    get
  }
  public init()
  public func migrate(_ migration: RealmSwift.Migration, to _: Swift.UInt64, from oldSchemaVersion: Swift.UInt64) -> Swift.Bool
  public func validate(schema: RealmSwift.Schema) -> Swift.Bool
}
public struct CustomerInstallationRequest : Swift.Codable {
  public let installationUUID: Swift.String
  public let osName: MDVideocallSDK.OSName
  public let osVersion: Swift.String
  public let appVersion: Swift.String
  public let deviceModel: Swift.String?
  public let advertisingId: Swift.String?
  public let referrer: Swift.String?
  public let languageCode: Swift.String?
  public let countryCode: Swift.String?
  public init(_ uuid: Foundation.UUID, osVersion: Swift.String, model: Swift.String?, appVersion: Swift.String, advertisingId: Swift.String?, referrer: Swift.String? = nil, languageCode: Swift.String? = Locale.current.languageCode?.lowercased(), countryCode: Swift.String? = nil)
  public init(_ uuid: Foundation.UUID, bundle: Foundation.Bundle, device: UIKit.UIDevice = UIDevice.current, advertising: AdSupport.ASIdentifierManager = ASIdentifierManager.shared(), referrer: Swift.String? = nil)
  public init(installationUUID: Swift.String, osName: MDVideocallSDK.OSName, osVersion: Swift.String, appVersion: Swift.String, deviceModel: Swift.String?, advertisingId: Swift.String?, referrer: Swift.String?, languageCode: Swift.String?, countryCode: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerInstallationRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.CustomerInstallationRequest, rhs: MDVideocallSDK.CustomerInstallationRequest) -> Swift.Bool
}
public class SessionTokenRequestInterceptor : MDVideocallSDK.MDARequestAdapter {
  public init(_ token: Swift.String)
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  @objc deinit
}
public struct VideoCallRequest : Swift.Codable {
  public let id: Swift.Int
  public init(id: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallRequest : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallRequest, b: MDVideocallSDK.VideoCallRequest) -> Swift.Bool
}
public protocol CustomerInstallationAdapter {
  func installation(_ request: MDVideocallSDK.CustomerInstallationRequest) -> RxSwift.Single<MDVideocallSDK.CustomerInstallationSchema>
  func installation(_ request: MDVideocallSDK.CustomerInstallationRequest, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationSchema, Swift.Error>) -> Swift.Void)
}
public struct ErrorSchema : Swift.Error, Swift.Decodable {
  public let error: Swift.String?
  public let message: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ErrorSchema : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MDVideocallSDK.ErrorSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ErrorSchema, rhs: MDVideocallSDK.ErrorSchema) -> Swift.Bool
}
public protocol InstallationAdapter {
  func setup(_ request: MDVideocallSDK.SetupRequest) -> RxSwift.Single<MDVideocallSDK.SetupSchema>
  func setup(_ request: MDVideocallSDK.SetupRequest, completion: @escaping (Swift.Result<MDVideocallSDK.SetupSchema?, Swift.Error>) -> Swift.Void)
}
public class RealmRepositoryControllerAssembler : MDVideocallSDK.RepositoryControllerAssembly {
  public var configuration: RealmSwift.Realm.Configuration? {
    get
  }
  public var provider: MDVideocallSDK.RealmStoreProvider? {
    get
  }
  public init(configuration: MDVideocallSDK.RealmConfigurationAssembly, provider: MDVideocallSDK.RealmStoreProviderAssembly)
  public func resolve() -> MDVideocallSDK.RepositoryController?
  @objc deinit
}
extension MDVideocallSDK.RealmRepositoryControllerAssembler : MDVideocallSDK.Assembler {
  public typealias Component = MDVideocallSDK.RepositoryController
}
@objc @_inheritsConvenienceInitializers public class UserEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var firstName: Swift.String?
  @objc dynamic public var lastName: Swift.String?
  @objc dynamic public var email: Swift.String?
  @objc dynamic public var phone: Swift.String?
  @objc dynamic public var documentId: Swift.String?
  @objc dynamic public var birthday: Foundation.Date?
  @objc dynamic public var cardNumber: Swift.String?
  @objc dynamic public var contract: Swift.String?
  @objc dynamic public var coverage: Swift.String?
  @objc dynamic public var company: Swift.String?
  @objc dynamic public var isBanned: Swift.Bool
  @objc dynamic public var features: MDVideocallSDK.UserFeaturesEntity?
  @objc dynamic public var termsAcceptedAt: Foundation.Date?
  @objc dynamic public var companyGroupCode: Swift.String?
  @objc dynamic public var feed: MDVideocallSDK.UserFeedEntity?
  final public let account: RealmSwift.LinkingObjects<MDVideocallSDK.AccountEntity>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.UserEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case firstName
    case lastName
    case email
    case phone
    case documentId
    case genderValue
    case statusValue
    case birthday
    case cardNumber
    case contract
    case coverage
    case company
    case isBanned
    case features
    case termsAcceptedAt
    case companyGroupCode
    case feed
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension MDVideocallSDK.UserEntity {
  public enum Gender : Swift.String {
    case unknown
    case male
    case female
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var gender: MDVideocallSDK.UserEntity.Gender? {
    get
    set
  }
}
extension MDVideocallSDK.UserEntity {
  public enum RegistrationStatus : Swift.String {
    case unknown
    case freemium
    case processing
    case formalized
    case canceled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var status: MDVideocallSDK.UserEntity.RegistrationStatus? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers public class UserFeaturesEntity : RealmSwift.Object {
  @objc dynamic public var videoCall: Swift.Bool
  @objc dynamic public var videoCall1to1: Swift.Bool
  @objc dynamic public var hasFeed: Swift.Bool
  public enum Attributes : Swift.String, Swift.CodingKey {
    case videoCall
    case videoCall1to1
    case hasFeed
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserFeedEntity : RealmSwift.Object {
  @objc dynamic public var hasFeed: Swift.Bool
  @objc dynamic public var homepage: Swift.String?
  @objc dynamic public var feedId: Swift.String?
  public enum Attributes : Swift.String, Swift.CodingKey {
    case hasFeed
    case homepage
    case feedId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  public enum UIViewHierarchyPosition {
    case `default`
    case top
    case back
    public static func == (a: UIKit.UIView.UIViewHierarchyPosition, b: UIKit.UIView.UIViewHierarchyPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public func addSubview(_ view: UIKit.UIView, insets: UIKit.UIEdgeInsets, hierarchy position: UIKit.UIView.UIViewHierarchyPosition = .default)
  @_Concurrency.MainActor(unsafe) public func addSubviewFullViewFit(to view: UIKit.UIView, hierarchy position: UIKit.UIView.UIViewHierarchyPosition = .default)
  @_Concurrency.MainActor(unsafe) public func move(_ view: UIKit.UIView, hierarchy position: UIKit.UIView.UIViewHierarchyPosition)
}
extension MDVideocallSDK.MDARequest {
  public enum MDAValidationResult {
    case success
    case failure(Swift.Error)
  }
}
extension MDVideocallSDK.MDADataRequest {
  public typealias MDAValidation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> MDVideocallSDK.MDARequest.MDAValidationResult
  @discardableResult
  public func validate(_ validation: @escaping MDVideocallSDK.MDADataRequest.MDAValidation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension MDVideocallSDK.MDADownloadRequest {
  public typealias MDAValidation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ temporaryURL: Foundation.URL?, _ destinationURL: Foundation.URL?) -> MDVideocallSDK.MDARequest.MDAValidationResult
  @discardableResult
  public func validate(_ validation: @escaping MDVideocallSDK.MDADownloadRequest.MDAValidation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension MDVideocallSDK.InstallationModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.InstallationEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.InstallationEntity) throws
  public typealias ManagedObject = MDVideocallSDK.InstallationEntity
}
public struct VideoCallTrackingRequest : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case component
    case version
    case videocall
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let component: Swift.String
  public let version: Swift.String
  public let videocall: Swift.Bool
  public static var `default`: MDVideocallSDK.VideoCallTrackingRequest {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallTrackingRequest : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallTrackingRequest, b: MDVideocallSDK.VideoCallTrackingRequest) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers open class MDATaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: Swift.Error?
  @objc deinit
}
public struct DisconnectSchema : Swift.Codable {
  public let status: Swift.String
  public init(_ status: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.DisconnectSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.DisconnectSchema, b: MDVideocallSDK.DisconnectSchema) -> Swift.Bool
}
public protocol CustomerAuthControllerProtocol {
  func current() -> RxSwift.Observable<MDVideocallSDK.CustomerAuthModel?>
  func login(_ id: Swift.String) -> RxSwift.Observable<MDVideocallSDK.CustomerAuthModel>
  func refresh() -> RxSwift.Observable<MDVideocallSDK.CustomerAuthModel>
  func current(completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthModel?, Swift.Error>) -> Swift.Void)
  func login(_ id: Swift.String, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthModel?, Swift.Error>) -> Swift.Void)
  func refresh(completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthModel?, Swift.Error>) -> Swift.Void)
}
public class CustomerAuthController : MDVideocallSDK.CustomerAuthControllerProtocol {
  public init(installation: MDVideocallSDK.CustomerInstallationControllerProtocol, repository: MDVideocallSDK.RepositoryController, remote: MDVideocallSDK.RemoteController, scheduler: RxSwift.ImmediateSchedulerType)
  public func current() -> RxSwift.Observable<MDVideocallSDK.CustomerAuthModel?>
  public func login(_ id: Swift.String) -> RxSwift.Observable<MDVideocallSDK.CustomerAuthModel>
  public func refresh() -> RxSwift.Observable<MDVideocallSDK.CustomerAuthModel>
  public func current(completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthModel?, Swift.Error>) -> Swift.Void)
  public func login(_ id: Swift.String, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthModel?, Swift.Error>) -> Swift.Void)
  public func refresh(completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthModel?, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MedicalSpecialityEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var coverageId: Swift.String?
  @objc dynamic public var details: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.MedicalSpecialityEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case coverageId
    case details
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
open class MDPermission {
  open var authorized: Swift.Bool {
    get
  }
  open var denied: Swift.Bool {
    get
  }
  open var notDetermined: Swift.Bool {
    get
  }
  open func openSettingPage()
  open var type: MDVideocallSDK.MDPermissionTypeEnum {
    get
  }
  open var status: MDVideocallSDK.MDPermissionStatusEnum {
    get
  }
  open func request(completion _: @escaping () -> Swift.Void)
  public init()
  @objc deinit
}
extension MDVideocallSDK.MDPermission : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MDPermission, rhs: MDVideocallSDK.MDPermission) -> Swift.Bool
}
extension MDVideocallSDK.ScheduleSchema : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.ScheduleEntity {
    get
  }
  public init(managedObject _: MDVideocallSDK.ScheduleEntity) throws
  public typealias ManagedObject = MDVideocallSDK.ScheduleEntity
}
extension MDVideocallSDK.ScheduleSchema.State {
  public var object: MDVideocallSDK.ScheduleEntity.State {
    get
  }
}
extension MDVideocallSDK.ScheduleSchema.WeekDay {
  public var object: MDVideocallSDK.ScheduleEntity.WeekDay {
    get
  }
}
public enum EnvironmentType : Swift.String, Swift.Codable, Swift.CodingKey {
  case development
  case production
  case staging
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MDRemoteManager : ObjectiveC.NSObject {
  public static var sharedInstance: MDVideocallSDK.MDRemoteManager
  #if compiler(>=5.3) && $AsyncAwait
  final public func request<T>(_ request: Foundation.URLRequest) async throws -> T where T : Swift.Decodable
  #endif
  final public func request<T>(_ request: Foundation.URLRequest, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
extension MDVideocallSDK.MDRemoteManager : Foundation.URLSessionDelegate {
  @objc final public func urlSession(_: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
public enum MeetingDoctorsInboxCellStyle {
  case classic(overlay: UIKit.UIColor, badge: UIKit.UIColor, speciality: UIKit.UIColor, hideSchedule: Swift.Bool)
  case meetingDoctors(overlay: UIKit.UIColor, badge: UIKit.UIColor, speciality: UIKit.UIColor, specialityIcon: UIKit.UIColor, hideSchedule: Swift.Bool)
  case complete(overlay: UIKit.UIColor, badge: UIKit.UIColor, speciality: UIKit.UIColor, specialityIcon: UIKit.UIColor, schedule: UIKit.UIColor, hideSchedule: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class ConversationEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  final public let lastMessageTimestamp: RealmSwift.RealmOptional<Foundation.TimeInterval>
  final public let messages: RealmSwift.List<MDVideocallSDK.MessageEntity>
  final public let pending: RealmSwift.RealmOptional<Swift.Int>
  final public let members: RealmSwift.LinkingObjects<MDVideocallSDK.ContactEntity>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.ConversationEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case lastMessageTimestamp
    case messages
    case pending
    case members
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public struct VideoCall1to1Schema : Swift.Codable {
  public let id: Swift.Int?
  public let roomId: Swift.Int?
  public let professionalHash: Swift.String?
  public let customerHash: Swift.String?
  public let status: Swift.String?
  public let assignedAt: Foundation.Date?
  public let cancelledAt: Foundation.Date?
  public let finishedAt: Foundation.Date?
  public let workflow: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol StoreMigrationProvider {
  func migrations(until schemaVersion: Swift.UInt64) -> [MDVideocallSDK.StoreMigration]
}
public struct RealmStoreMigrationProvider : MDVideocallSDK.StoreMigrationProvider {
  public init()
  public func migrations(until schemaVersion: Swift.UInt64) -> [MDVideocallSDK.StoreMigration]
  public subscript(version: Swift.UInt64) -> MDVideocallSDK.StoreMigration? {
    get
    set(newValue)
  }
}
public struct ReportSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let type: Swift.String?
  public let attributes: MDVideocallSDK.ReportAttributesSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReportAttributesSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case professional
    case professionalName
    case professionalAvatar
    case customer
    case consultation
    case medicalHistory
    case diagnosisCode
    case diagnosis
    case orientation
    case recommendation
    case prescriptions
    case laboratoryServices
    case nonLaboratoryServices
    case radiologyServices
    case filepath
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let professional: Swift.String?
  public let professionalName: Swift.String?
  public let professionalAvatar: Swift.String?
  public let customer: Swift.String?
  public let consultation: Swift.String?
  public let medicalHistory: Swift.String?
  public let diagnosisCode: Swift.String?
  public let diagnosis: Swift.String?
  public let orientation: Swift.String?
  public let recommendation: Swift.String?
  public let prescriptions: [MDVideocallSDK.PrescriptionReportSchema]?
  public let laboratoryServices: [MDVideocallSDK.LaboratoryServicesReportSchema]?
  public let nonLaboratoryServices: [MDVideocallSDK.NonLaboratoryServicesReportSchema]?
  public let radiologyServices: [MDVideocallSDK.RadiologyServicesReportSchema]?
  public let filepath: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PrescriptionReportSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case activeIngredient
    case description
    case dosage
    case duration
    case quantity
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let code: Swift.String?
  public let activeIngredient: Swift.String?
  public let description: Swift.String?
  public let dosage: Swift.String?
  public let duration: Swift.String?
  public let quantity: Swift.Int?
  public let price: MDVideocallSDK.ReportPriceSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LaboratoryServicesReportSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case name
    case detail
    case instruction
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let code: Swift.String?
  public let name: Swift.String?
  public let detail: Swift.String?
  public let instruction: Swift.String?
  public let price: MDVideocallSDK.ReportPriceSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NonLaboratoryServicesReportSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case name
    case detail
    case instruction
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let code: Swift.String?
  public let name: Swift.String?
  public let detail: Swift.String?
  public let instruction: Swift.String?
  public let price: MDVideocallSDK.ReportPriceSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RadiologyServicesReportSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case name
    case detail
    case instruction
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let code: Swift.String?
  public let name: Swift.String?
  public let detail: Swift.String?
  public let instruction: Swift.String?
  public let price: MDVideocallSDK.ReportPriceSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReportPriceSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case price
    case currency
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let price: Swift.Double?
  public let currency: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MDPermission {
  public static var photoLibrary: MDVideocallSDK.MDPhotoLibraryPermission {
    get
  }
}
@_inheritsConvenienceInitializers public class MDPhotoLibraryPermission : MDVideocallSDK.MDPermission {
  override open var type: MDVideocallSDK.MDPermissionTypeEnum {
    get
  }
  open var fullAccessUsageDescriptionKey: Swift.String? {
    get
  }
  open var addingOnlyUsageDescriptionKey: Swift.String? {
    get
  }
  override public var status: MDVideocallSDK.MDPermissionStatusEnum {
    get
  }
  override public func request(completion: @escaping () -> Swift.Void)
  override public init()
  @objc deinit
}
public enum RepositoryError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  public enum StoreFailureReason {
    case nilConfigurationFileURL
    case providerFailed(error: Swift.Error)
    case writeOperationFailed(error: Swift.Error)
    case collectionObserverFailed(error: Swift.Error)
    case objectObserverFailed(error: Swift.Error)
    case objectDeleted
    case storeNotInitialized
  }
  case storeFailed(reason: MDVideocallSDK.RepositoryError.StoreFailureReason)
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension MDVideocallSDK.RepositoryError {
  public var underlyingError: Swift.Error? {
    get
  }
}
public protocol SocketCredentials : Swift.Encodable {
  var clientSecret: Swift.String { get }
}
public protocol ChatSocketCredentials : MDVideocallSDK.SocketCredentials {
  var sessionId: Swift.String { get }
}
public struct ChatSocketClientCredentials : MDVideocallSDK.ChatSocketCredentials {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case clientSecret
    case sessionId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let clientSecret: Swift.String
  public let sessionId: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(clientSecret: Swift.String, sessionId: Swift.String)
}
public protocol ReferrerModelType : Swift.CustomStringConvertible {
  var source: Swift.String { get }
  var medium: Swift.String? { get }
  var campaign: Swift.String? { get }
  var content: Swift.String? { get }
  var term: Swift.String? { get }
  var data: [Swift.String : Swift.String] { get }
}
public struct ReferrerModel : MDVideocallSDK.ReferrerModelType {
  public let source: Swift.String
  public let medium: Swift.String?
  public let campaign: Swift.String?
  public let content: Swift.String?
  public let term: Swift.String?
  public let data: [Swift.String : Swift.String]
  public init(source: Swift.String, medium: Swift.String?, campaign: Swift.String?, content: Swift.String?, term: Swift.String?, data: [Swift.String : Swift.String])
}
extension MDVideocallSDK.ReferrerModel {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case source
    case medium
    case campaign
    case content
    case term
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init?(from campaign: Swift.String)
  public init?(with data: [Swift.String : Swift.String])
  public var description: Swift.String {
    get
  }
}
public struct CollectionSchema<T> : Swift.Codable where T : MDVideocallSDK.IdentifiableSchema {
  public let total: Swift.Int?
  public let perPage: Swift.Int?
  public let currentPage: Swift.Int?
  public let lastPage: Swift.Int?
  public let from: Swift.Int?
  public let to: Swift.Int?
  public let data: [T]
  public init(total: Swift.Int?, perPage: Swift.Int?, currentPage: Swift.Int?, lastPage: Swift.Int?, from: Swift.Int?, to: Swift.Int?, data: [T])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum MDVideocallParticipantType : Swift.String, Swift.Codable {
  case moderator
  case participant
  public func callAsFunction() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CustomerUserEntity : RealmSwift.Object {
  @objc dynamic public var userHash: Swift.String?
  @objc dynamic public var token: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.CustomerUserEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case userHash
    case token
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension Foundation.Date {
  public struct Options {
    public var allowedComponents: Swift.Set<Foundation.Calendar.Component>
    public var imminentRange: Foundation.DateComponents?
    public var distantRange: Foundation.DateComponents?
  }
  public func colloquialSinceNow(options fOptions: Foundation.Date.Options? = nil) -> Swift.String
  public func colloquial(to date: Foundation.Date, options fOptions: Foundation.Date.Options? = nil) -> Swift.String
  public static func colloquial(from fDate: Foundation.Date, to tDate: Foundation.Date, options fOptions: Foundation.Date.Options? = nil) -> Swift.String
  public var second: Swift.Int {
    get
  }
  public var minute: Swift.Int {
    get
  }
  public var hour: Swift.Int {
    get
  }
  public func add(hour: Swift.Int) -> Foundation.Date?
  public func add(minute: Swift.Int) -> Foundation.Date?
  public var year: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var day: Swift.Int {
    get
  }
  public var weekday: Swift.String {
    get
  }
  public func add(components: Foundation.DateComponents) -> Foundation.Date?
}
extension Foundation.DateComponents {
  public func `in`(_ component: Foundation.Calendar.Component) -> Swift.Int?
}
public struct ResponseError<T> : Swift.Error, Foundation.LocalizedError where T : Swift.Error {
  public let underlying: Swift.Error?
  public var schema: T?
  public init(_ error: Swift.Error?, schema: T?)
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol MeetingDoctorsStyleType {
  var dataTextColor: UIKit.UIColor? { get set }
  var titleColor: UIKit.UIColor? { get set }
  var titleView: UIKit.UIView? { get set }
  var preferredStatusBarStyle: UIKit.UIStatusBarStyle { get set }
  var navigationBarOpaque: Swift.Bool { get set }
  var isProfessionalListNavigationBarHidden: Swift.Bool { get set }
  var navigationBarColor: UIKit.UIColor? { get set }
  var navigationBarTintColor: UIKit.UIColor? { get set }
  var navigationBarBackIndicatorImage: UIKit.UIImage? { get set }
  var inboxTitle: Swift.String? { get set }
  var rootLeftBarButtonItem: UIKit.UIBarButtonItem? { get set }
  var rootRightBarButtonItem: UIKit.UIBarButtonItem? { get set }
  var inboxCellStyle: MDVideocallSDK.MeetingDoctorsInboxCellStyle { get set }
  var accentTintColor: UIKit.UIColor? { get set }
  var secondaryTintColor: UIKit.UIColor? { get set }
  var showMeetingDoctorsBackgroundImage: Swift.Bool? { get set }
  var showProfessionalListHeader: Swift.Bool? { get set }
  var messageTextOutgoingColor: UIKit.UIColor? { get set }
  var messageDateOutgoingColor: UIKit.UIColor? { get set }
  var messageTextIncomingColor: UIKit.UIColor? { get set }
  var messageDateIncomingColor: UIKit.UIColor? { get set }
  var bubbleBackgroundOutgoingColor: UIKit.UIColor? { get set }
  var bubbleBackgroundIncomingColor: UIKit.UIColor? { get set }
  var divider: MDVideocallSDK.MeetingDoctorsDividerType? { get set }
  @available(*, deprecated, message: "Don't use this property, use topdivider property instead")
  var headerView: MDVideocallSDK.InboxHeaderStyle? { get set }
  var topDividers: [MDVideocallSDK.MeetingDoctorsDividerType]? { get set }
  var floatingChatModel: MDVideocallSDK.FloatingChatModelType? { get set }
  @available(*, deprecated, renamed: "chatBackgroundView", message: "Use chatBackgroundView instead")
  var chatBackgroundPatternImage: UIKit.UIImage? { get set }
  var chatBackgroundView: UIKit.UIView? { get set }
  var supportMailBanned: Swift.String? { get set }
  var showCollegiateNumber: Swift.Bool { get set }
  var conditionsDismiss: () -> Swift.Void { get set }
  var emptyView: UIKit.UIView? { get set }
  func style(view: UIKit.UINavigationBar)
  func style(view: UIKit.UINavigationItem)
  var images: MDVideocallSDK.MeetingDoctorsImagesType { get set }
  var strings: MDVideocallSDK.MeetingDoctorsStringsType { get set }
  var colors: MDVideocallSDK.MeetingDoctorsColorsType { get set }
}
extension MDVideocallSDK.MeetingDoctorsStyleType {
  public func style(view: UIKit.UINavigationBar)
  public func style(view: UIKit.UINavigationItem)
}
public struct MeetingDoctorsStyle : MDVideocallSDK.MeetingDoctorsStyleType {
  public var dataTextColor: UIKit.UIColor?
  public var titleView: UIKit.UIView?
  public var titleColor: UIKit.UIColor?
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarColor: UIKit.UIColor?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarBackIndicatorImage: UIKit.UIImage?
  public var navigationBarOpaque: Swift.Bool
  public var isProfessionalListNavigationBarHidden: Swift.Bool
  public var inboxTitle: Swift.String?
  public var rootLeftBarButtonItem: UIKit.UIBarButtonItem?
  public var rootRightBarButtonItem: UIKit.UIBarButtonItem?
  public var inboxCellStyle: MDVideocallSDK.MeetingDoctorsInboxCellStyle
  public var accentTintColor: UIKit.UIColor?
  public var secondaryTintColor: UIKit.UIColor? {
    get
    set
  }
  public var showMeetingDoctorsBackgroundImage: Swift.Bool?
  public var showProfessionalListHeader: Swift.Bool?
  public var messageTextOutgoingColor: UIKit.UIColor?
  public var messageDateOutgoingColor: UIKit.UIColor?
  public var messageTextIncomingColor: UIKit.UIColor?
  public var messageDateIncomingColor: UIKit.UIColor?
  public var bubbleBackgroundOutgoingColor: UIKit.UIColor?
  public var bubbleBackgroundIncomingColor: UIKit.UIColor?
  public var divider: MDVideocallSDK.MeetingDoctorsDividerType?
  public var headerView: MDVideocallSDK.InboxHeaderStyle?
  public var topDividers: [MDVideocallSDK.MeetingDoctorsDividerType]?
  public var floatingChatModel: MDVideocallSDK.FloatingChatModelType?
  public var chatBackgroundPatternImage: UIKit.UIImage?
  public var chatBackgroundView: UIKit.UIView?
  public var showCollegiateNumber: Swift.Bool
  public var supportMailBanned: Swift.String?
  public var conditionsDismiss: () -> Swift.Void
  public var emptyView: UIKit.UIView?
  public var medicalHistoryOptions: [MDVideocallSDK.MedicalHistoryModel]
  public var images: MDVideocallSDK.MeetingDoctorsImagesType
  public var strings: MDVideocallSDK.MeetingDoctorsStringsType
  public var colors: MDVideocallSDK.MeetingDoctorsColorsType
  public init()
}
extension MDVideocallSDK.MeetingDoctorsStyle {
  public func style(view: UIKit.UINavigationBar)
  public func style(view: UIKit.UINavigationItem)
  public enum MeetingDoctorsStyleTypeColor {
    case primary
    case secondary
    public static func == (a: MDVideocallSDK.MeetingDoctorsStyle.MeetingDoctorsStyleTypeColor, b: MDVideocallSDK.MeetingDoctorsStyle.MeetingDoctorsStyleTypeColor) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public class ClosureSelector<T> {
  final public let selector: ObjectiveC.Selector
  public init(_ closure: @escaping MDVideocallSDK.Decoration<T>)
  @objc deinit
}
@_inheritsConvenienceInitializers public class DataLoader : MDVideocallSDK.Loader<Foundation.URL, Foundation.Data> {
  override public init()
  @_semantics("optimize.sil.never") override public func load(_ source: Foundation.URL) -> Foundation.Data?
  @objc deinit
}
public protocol Repository {
  associatedtype EntityType
  func fetch(by id: Swift.String) -> RxSwift.Observable<Self.EntityType?>
  func fetch() -> RxSwift.Observable<([Self.EntityType], MDVideocallSDK.Changeset?)>
  func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor], offset: Swift.Int, limit: Swift.Int) -> RxSwift.Observable<([Self.EntityType], MDVideocallSDK.Changeset?)>
  func save(entity: Self.EntityType, update: Swift.Bool) -> RxSwift.Observable<Swift.Void>
  func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool) -> RxSwift.Observable<Swift.Void> where S : Swift.Sequence, Self.EntityType == S.Element
  func update(properties: [MDVideocallSDK.AttributeValueType]) -> RxSwift.Observable<Swift.Void>
  func delete(entity: Self.EntityType) -> RxSwift.Observable<Swift.Void>
  func delete<S>(collection: S) -> RxSwift.Observable<Swift.Void> where S : Swift.Sequence, Self.EntityType == S.Element
  func delete(with predicate: Foundation.NSPredicate) -> RxSwift.Observable<Swift.Void>
  func clear(cascading: Swift.Bool) -> RxSwift.Observable<Swift.Void>
  func fetch(by id: Swift.String, completion: @escaping (Swift.Result<Self.EntityType?, Swift.Error>) -> Swift.Void)
  func fetch(completion: @escaping (Swift.Result<[Self.EntityType], Swift.Error>) -> Swift.Void)
  func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor], offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<[Self.EntityType], Swift.Error>) -> Swift.Void)
  func save(entity: Self.EntityType, update: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where S : Swift.Sequence, Self.EntityType == S.Element
  func update(properties: [MDVideocallSDK.AttributeValueType], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func delete(entity: Self.EntityType, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func delete<S>(collection: S, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where S : Swift.Sequence, Self.EntityType == S.Element
  func delete(with predicate: Foundation.NSPredicate, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func clear(cascading: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
extension MDVideocallSDK.Repository {
  public func fetch(by _: Swift.String) -> RxSwift.Observable<Self.EntityType?>
  public func fetch() -> RxSwift.Observable<([Self.EntityType], MDVideocallSDK.Changeset?)>
  public func query(with _: Foundation.NSPredicate, sorted _: [Foundation.NSSortDescriptor] = [], offset: Swift.Int = 0, limit: Swift.Int = 0) -> RxSwift.Observable<([Self.EntityType], MDVideocallSDK.Changeset?)>
  public func save(entity _: Self.EntityType, update _: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func save<S>(collection _: S, update _: Swift.Bool, clear _: Swift.Bool) -> RxSwift.Observable<Swift.Void> where S : Swift.Sequence, Self.EntityType == S.Element
  public func update(properties _: [MDVideocallSDK.AttributeValueType]) -> RxSwift.Observable<Swift.Void>
  public func delete(entity _: Self.EntityType) -> RxSwift.Observable<Swift.Void>
  public func delete<S>(collection _: S) -> RxSwift.Observable<Swift.Void> where S : Swift.Sequence, Self.EntityType == S.Element
  public func clear(cascading _: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func fetch(by _: Swift.String, completion _: @escaping (Swift.Result<Self.EntityType?, Swift.Error>) -> Swift.Void)
  public func fetch(completion _: @escaping (Swift.Result<[Self.EntityType], Swift.Error>) -> Swift.Void)
  public func query(with _: Foundation.NSPredicate, sorted _: [Foundation.NSSortDescriptor], offset _: Swift.Int, limit _: Swift.Int, completion _: @escaping (Swift.Result<[Self.EntityType], Swift.Error>) -> Swift.Void)
  public func save(entity _: Self.EntityType, update _: Swift.Bool, completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func save<S>(collection _: S, update _: Swift.Bool, clear _: Swift.Bool, completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where S : Swift.Sequence, Self.EntityType == S.Element
  public func update(properties _: [MDVideocallSDK.AttributeValueType], completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete(entity _: Self.EntityType, completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete<S>(collection _: S, completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where S : Swift.Sequence, Self.EntityType == S.Element
  public func delete(with _: Foundation.NSPredicate, completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func clear(cascading _: Swift.Bool, completion _: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDLabelS12W700 : MDVideocallSDK.MDLabelBase {
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol CustomerUserModelProtocol {
  var hash: Swift.String { get }
  var token: Swift.String { get }
}
public struct CustomerUserModel : Swift.Codable, MDVideocallSDK.CustomerUserModelProtocol {
  public let hash: Swift.String
  public let token: Swift.String
  public init(hash: Swift.String, token: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerUserModel {
  public init(schema: MDVideocallSDK.CustomerUserSchema)
}
extension MDVideocallSDK.CustomerUserModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.CustomerUserModel, b: MDVideocallSDK.CustomerUserModel) -> Swift.Bool
}
public protocol MedicalProfessionalModelType {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var phone: Swift.String { get }
  var address: Swift.String { get }
  var zip: Swift.String { get }
  var coordinates: CoreLocation.CLLocationCoordinate2D? { get }
  var coverages: [Swift.String]? { get }
  var specialities: [Swift.String]? { get }
}
public struct MedicalProfessionalModel : MDVideocallSDK.MedicalProfessionalModelType {
  public enum Kind : Swift.String {
    case unknown
    case professional
    case center
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.String
  public let name: Swift.String
  public let type: MDVideocallSDK.MedicalProfessionalModel.Kind
  public let phone: Swift.String
  public let address: Swift.String
  public let zip: Swift.String
  public let coordinates: CoreLocation.CLLocationCoordinate2D?
  public let coverages: [Swift.String]?
  public let specialities: [Swift.String]?
  public init(id: Swift.String, name: Swift.String, type: MDVideocallSDK.MedicalProfessionalModel.Kind, phone: Swift.String, address: Swift.String, zip: Swift.String)
  public init(id: Swift.String, name: Swift.String, type: MDVideocallSDK.MedicalProfessionalModel.Kind, phone: Swift.String, address: Swift.String, zip: Swift.String, coordinates: CoreLocation.CLLocationCoordinate2D?, coverages: [Swift.String]?, specialities: [Swift.String]?)
}
extension MDVideocallSDK.MedicalProfessionalModel {
  public var location: CoreLocation.CLLocation? {
    get
  }
  public func distance(from location: CoreLocation.CLLocation) -> CoreLocation.CLLocationDistance
}
extension MDVideocallSDK.MedicalProfessionalModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicalProfessionalSchema
  public var schemaObject: MDVideocallSDK.MedicalProfessionalSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.MedicalProfessionalSchema) throws
}
extension MDVideocallSDK.MedicalProfessionalModel.Kind : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicalProfessionalSchema.Kind
  public var schemaObject: MDVideocallSDK.MedicalProfessionalSchema.Kind {
    get
  }
  public init(schemaObject: MDVideocallSDK.MedicalProfessionalSchema.Kind) throws
}
extension MDVideocallSDK.MessageModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.MessageEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.MessageEntity) throws
  public typealias ManagedObject = MDVideocallSDK.MessageEntity
}
extension MDVideocallSDK.MessageEntity.Status {
  public var model: MDVideocallSDK.MessageStatusModel {
    get
  }
}
extension MDVideocallSDK.MessageStatusModel {
  public var object: MDVideocallSDK.MessageEntity.Status {
    get
  }
}
extension MDVideocallSDK.MessageTypeModel {
  public var object: MDVideocallSDK.MessageEntity.Kind {
    get
  }
}
public struct MDADefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: MDVideocallSDK.MDATimeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?, timeline: MDVideocallSDK.MDATimeline = MDATimeline(), metrics _: Swift.AnyObject? = nil)
}
public struct MDADataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: MDVideocallSDK.MDAResult<Value>
  public let timeline: MDVideocallSDK.MDATimeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: MDVideocallSDK.MDAResult<Value>, timeline: MDVideocallSDK.MDATimeline = MDATimeline())
}
extension MDVideocallSDK.MDADataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDADataResponse {
  public func map<T>(_ transform: (Value) -> T) -> MDVideocallSDK.MDADataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> MDVideocallSDK.MDADataResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> MDVideocallSDK.MDADataResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> MDVideocallSDK.MDADataResponse<Value> where E : Swift.Error
}
public struct MDADefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: MDVideocallSDK.MDATimeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: Swift.Error?, timeline: MDVideocallSDK.MDATimeline = MDATimeline(), metrics _: Swift.AnyObject? = nil)
}
public struct MDADownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: MDVideocallSDK.MDAResult<Value>
  public let timeline: MDVideocallSDK.MDATimeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: MDVideocallSDK.MDAResult<Value>, timeline: MDVideocallSDK.MDATimeline = MDATimeline())
}
extension MDVideocallSDK.MDADownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDADownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> MDVideocallSDK.MDADownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> MDVideocallSDK.MDADownloadResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> MDVideocallSDK.MDADownloadResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> MDVideocallSDK.MDADownloadResponse<Value> where E : Swift.Error
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MDVideocallSDK.MDADefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MDVideocallSDK.MDADataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MDVideocallSDK.MDADefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MDVideocallSDK.MDADownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
public struct AnyRepository<E> : MDVideocallSDK.Repository {
  public init<Base>(_ base: Base) where E == Base.EntityType, Base : MDVideocallSDK.Repository
  public func fetch(by id: Swift.String) -> RxSwift.Observable<E?>
  public func fetch() -> RxSwift.Observable<([E], MDVideocallSDK.Changeset?)>
  public func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor] = [], offset: Swift.Int = 0, limit: Swift.Int = 0) -> RxSwift.Observable<([E], MDVideocallSDK.Changeset?)>
  public func save(entity: E, update: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool) -> RxSwift.Observable<Swift.Void> where E == S.Element, S : Swift.Sequence
  public func update(properties: [MDVideocallSDK.AttributeValueType]) -> RxSwift.Observable<Swift.Void>
  public func delete(entity: E) -> RxSwift.Observable<Swift.Void>
  public func delete<S>(collection: S) -> RxSwift.Observable<Swift.Void> where E == S.Element, S : Swift.Sequence
  public func delete(with predicate: Foundation.NSPredicate) -> RxSwift.Observable<Swift.Void>
  public func clear(cascading: Swift.Bool = true) -> RxSwift.Observable<Swift.Void>
  public func fetch(by id: Swift.String, completion: @escaping (Swift.Result<E?, Swift.Error>) -> Swift.Void)
  public func fetch(completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void)
  public func query(with predicate: Foundation.NSPredicate, sorted descriptors: [Foundation.NSSortDescriptor] = [], offset: Swift.Int = 0, limit: Swift.Int = 0, completion: @escaping (Swift.Result<[E], Swift.Error>) -> Swift.Void)
  public func save(entity: E, update: Swift.Bool = true, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func save<S>(collection: S, update: Swift.Bool, clear: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where E == S.Element, S : Swift.Sequence
  public func update(properties: [MDVideocallSDK.AttributeValueType], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete(entity: E, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func delete<S>(collection: S, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where E == S.Element, S : Swift.Sequence
  public func delete(with predicate: Foundation.NSPredicate, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func clear(cascading: Swift.Bool, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public typealias EntityType = E
}
public struct SupportedSendFiles {
}
extension MDVideocallSDK.MessageSchema : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.MessageEntity {
    get
  }
  public init(managedObject _: MDVideocallSDK.MessageEntity) throws
  public typealias ManagedObject = MDVideocallSDK.MessageEntity
}
extension MDVideocallSDK.MessageSchema.Kind {
  public var object: MDVideocallSDK.MessageEntity.Kind {
    get
  }
}
extension MDVideocallSDK.MessageSchema.Status {
  public var object: MDVideocallSDK.MessageEntity.Status {
    get
  }
}
public struct AnyMedicalDirectoryListControllerType<ElementModel> : MDVideocallSDK.MedicalDirectoryListControllerType where ElementModel : MDVideocallSDK.Transmittable {
  public init<Concrete>(_ concrete: Concrete) where ElementModel == Concrete.ElementModel, Concrete : MDVideocallSDK.MedicalDirectoryListControllerType
  public func fetch(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[ElementModel], Swift.Error>) -> Swift.Void)
  public func get(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[ElementModel], Swift.Error>) -> Swift.Void)
}
public protocol VideoCallUseCaseProtocol : AnyObject {
  func call(completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  func cancel(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  func pickUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  func hangUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
}
public class VideoCallUseCase : MDVideocallSDK.VideoCallUseCaseProtocol {
  public init(repository: MDVideocallSDK.VideoCallRepositoryProtocol)
  public func call(completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  public func cancel(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel?) -> Swift.Void)
  public func pickUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  public func hangUp(by id: Swift.Int, with completion: @escaping (MDVideocallSDK.VideoCallModel) -> Swift.Void)
  @objc deinit
}
public enum MeetingDoctorsRole : Swift.Int, Swift.CaseIterable {
  case unknown
  case generalMedicine
  case pediatrics
  case psychology
  case sportsMedicine
  case customerCare
  case medicalSupport
  case personalTraining
  case commercial
  case medicalAppointment
  case cardiology
  case gynecology
  case pharmacy
  case sexology
  case nutrition
  case fertilityConsultant
  case nursing
  case medicalAdvisor
  case dermatology
  case customerCareIsaludColectivos
  case veterinary
  case ethology
  case doctorGoHealthAdvisor
  case fitnessCoaching
  case nutritionalCoaching
  case animalNutrition
  case medicalManager
  case coachMental
  public static var all: [MDVideocallSDK.MeetingDoctorsRole] {
    get
  }
  public static var none: [MDVideocallSDK.MeetingDoctorsRole] {
    get
  }
  public init(speciality: MDVideocallSDK.SpecialityTypeModel)
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [MDVideocallSDK.MeetingDoctorsRole]
  public typealias RawValue = Swift.Int
  public static var allCases: [MDVideocallSDK.MeetingDoctorsRole] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct MedicalProfessionalRequest : MDVideocallSDK.PaginableRequest {
  public let keywords: Swift.String?
  public let categoryId: Swift.String?
  public let specialityId: Swift.String?
  public let latitude: CoreLocation.CLLocationDegrees?
  public let longitude: CoreLocation.CLLocationDegrees?
  public let page: Swift.UInt?
  public let itemsPerPage: Swift.UInt?
  public init(page: MDVideocallSDK.PageRequest = PageRequest.default)
  public init(keywords: Swift.String?, categoryId: Swift.String?, specialityId: Swift.String?, latitude: CoreLocation.CLLocationDegrees?, longitude: CoreLocation.CLLocationDegrees?, page: Swift.UInt?, itemsPerPage: Swift.UInt?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RealmRepositoryController : MDVideocallSDK.RepositoryController {
  public var installation: MDVideocallSDK.AnyRepository<MDVideocallSDK.InstallationModel> {
    get
  }
  public var customerInstallation: MDVideocallSDK.AnyRepository<MDVideocallSDK.CustomerInstallationModel> {
    get
  }
  public var customerAuth: MDVideocallSDK.AnyRepository<MDVideocallSDK.CustomerAuthModel> {
    get
  }
  public var authentication: MDVideocallSDK.AnyRepository<MDVideocallSDK.AccountModel> {
    get
  }
  public var user: MDVideocallSDK.AnyRepository<MDVideocallSDK.UserModel> {
    get
  }
  public var inbox: MDVideocallSDK.AnyRepository<MDVideocallSDK.InboxContactModel> {
    get
  }
  public var conversations: MDVideocallSDK.AnyRepository<MDVideocallSDK.ConversationModel> {
    get
  }
  public var messages: MDVideocallSDK.AnyRepository<MDVideocallSDK.MessageModel> {
    get
  }
  public var schedules: MDVideocallSDK.AnyRepository<MDVideocallSDK.ScheduleModel> {
    get
  }
  public var allergy: MDVideocallSDK.AnyRepository<MDVideocallSDK.AllergyModel> {
    get
  }
  public var disease: MDVideocallSDK.AnyRepository<MDVideocallSDK.DiseaseModel> {
    get
  }
  public var medication: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicationModel> {
    get
  }
  public var imc: MDVideocallSDK.AnyRepository<MDVideocallSDK.IMCModel> {
    get
  }
  public var videoCallReport: MDVideocallSDK.AnyRepository<MDVideocallSDK.VideoCallReportModel> {
    get
  }
  public var derivationReport: MDVideocallSDK.AnyRepository<MDVideocallSDK.DerivationReportModel> {
    get
  }
  public var coverage: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalCoverageModel> {
    get
  }
  public var speciality: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalSpecialityModel> {
    get
  }
  public var professional: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalProfessionalModel> {
    get
  }
  public init(configuration: RealmSwift.Realm.Configuration)
  public init(provider: MDVideocallSDK.RealmStoreProvider, configuration: RealmSwift.Realm.Configuration)
  public func clear() -> RxSwift.Observable<Swift.Void>
}
public protocol RepositoryController {
  var installation: MDVideocallSDK.AnyRepository<MDVideocallSDK.InstallationModel> { get }
  var customerInstallation: MDVideocallSDK.AnyRepository<MDVideocallSDK.CustomerInstallationModel> { get }
  var customerAuth: MDVideocallSDK.AnyRepository<MDVideocallSDK.CustomerAuthModel> { get }
  var authentication: MDVideocallSDK.AnyRepository<MDVideocallSDK.AccountModel> { get }
  var user: MDVideocallSDK.AnyRepository<MDVideocallSDK.UserModel> { get }
  var inbox: MDVideocallSDK.AnyRepository<MDVideocallSDK.InboxContactModel> { get }
  var conversations: MDVideocallSDK.AnyRepository<MDVideocallSDK.ConversationModel> { get }
  var messages: MDVideocallSDK.AnyRepository<MDVideocallSDK.MessageModel> { get }
  var schedules: MDVideocallSDK.AnyRepository<MDVideocallSDK.ScheduleModel> { get }
  var allergy: MDVideocallSDK.AnyRepository<MDVideocallSDK.AllergyModel> { get }
  var disease: MDVideocallSDK.AnyRepository<MDVideocallSDK.DiseaseModel> { get }
  var medication: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicationModel> { get }
  var imc: MDVideocallSDK.AnyRepository<MDVideocallSDK.IMCModel> { get }
  var videoCallReport: MDVideocallSDK.AnyRepository<MDVideocallSDK.VideoCallReportModel> { get }
  var derivationReport: MDVideocallSDK.AnyRepository<MDVideocallSDK.DerivationReportModel> { get }
  var coverage: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalCoverageModel> { get }
  var speciality: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalSpecialityModel> { get }
  var professional: MDVideocallSDK.AnyRepository<MDVideocallSDK.MedicalProfessionalModel> { get }
  func clear() -> RxSwift.Observable<Swift.Void>
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDLabelS18W500 : MDVideocallSDK.MDLabelBase {
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PermissionWrapper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.PermissionWrapper {
  public static var microphonePermissions: AVFAudio.AVAudioSession.RecordPermission
  public static func checkMicrophoneAvailable(completion: @escaping ((Swift.Bool) -> Swift.Void))
  public static func requestMicrophonePermissions(completion: @escaping ((Swift.Bool) -> Swift.Void))
}
extension MDVideocallSDK.PermissionWrapper {
  public static var cameraPermissions: AVFoundation.AVAuthorizationStatus
  public static func checkVideoCameraAvailable(completion: @escaping ((AVFoundation.AVAuthorizationStatus) -> Swift.Void))
  public static func requestCameraPermissions(completion: @escaping ((Swift.Bool) -> Swift.Void))
}
extension MDVideocallSDK.PermissionWrapper {
  public static func notificationSettings(completion: @escaping (UserNotifications.UNAuthorizationStatus) -> Swift.Void)
}
@_hasMissingDesignatedInitializers open class MDANetworkReachabilityManager {
  public enum MDANetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(MDVideocallSDK.MDANetworkReachabilityManager.MDConnectionType)
  }
  public enum MDConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: MDVideocallSDK.MDANetworkReachabilityManager.MDConnectionType, b: MDVideocallSDK.MDANetworkReachabilityManager.MDConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (MDVideocallSDK.MDANetworkReachabilityManager.MDANetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: MDVideocallSDK.MDANetworkReachabilityManager.MDANetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: MDVideocallSDK.MDANetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension MDVideocallSDK.MDANetworkReachabilityManager.MDANetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: MDVideocallSDK.MDANetworkReachabilityManager.MDANetworkReachabilityStatus, rhs: MDVideocallSDK.MDANetworkReachabilityManager.MDANetworkReachabilityStatus) -> Swift.Bool
public enum MyHealthDeeplinkOption {
  case feeds(deeplink: MDVideocallSDK.FeedsDeeplinkOption)
  case medicalHistory(deeplink: MDVideocallSDK.MedicalHistoryDeeplinkOption)
}
extension MDVideocallSDK.MyHealthDeeplinkOption : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MyHealthDeeplinkOption, rhs: MDVideocallSDK.MyHealthDeeplinkOption) -> Swift.Bool
}
public struct PrescriptionSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let type: Swift.String?
  public let attributes: MDVideocallSDK.PrescriptionAttributesSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PrescriptionAttributesSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case professional
    case customer
    case diagnosis
    case medicalHistory
    case filepath
    case prescriptions
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let professional: Swift.String?
  public let customer: Swift.String?
  public let diagnosis: Swift.String?
  public let medicalHistory: Swift.String?
  public let filepath: Swift.String?
  public let prescriptions: [MDVideocallSDK.PrescriptionPrescriptionsSchema]?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PrescriptionPrescriptionsSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case activeIngredient
    case description
    case dosage
    case duration
    case quantity
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let code: Swift.String?
  public let activeIngredient: Swift.String?
  public let description: Swift.String?
  public let dosage: Swift.String?
  public let duration: Swift.String?
  public let quantity: Swift.Double?
  public let price: MDVideocallSDK.PrescriptionPriceSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PrescriptionPriceSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case price
    case currency
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let price: Swift.Double?
  public let currency: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MDVCExposedMethodsModel {
}
extension MDVideocallSDK.ScheduleModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.ScheduleEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.ScheduleEntity) throws
  public typealias ManagedObject = MDVideocallSDK.ScheduleEntity
}
extension MDVideocallSDK.ScheduleEntity {
  public var stateModel: MDVideocallSDK.ScheduleStateModel {
    get
  }
}
extension MDVideocallSDK.ScheduleStateModel {
  public var object: MDVideocallSDK.ScheduleEntity.State {
    get
  }
}
extension MDVideocallSDK.ScheduleEntity {
  public var weekDayModel: MDVideocallSDK.ScheduleWeekDayModel {
    get
  }
}
extension MDVideocallSDK.ScheduleWeekDayModel {
  public var object: MDVideocallSDK.ScheduleEntity.WeekDay {
    get
  }
}
public protocol DerivationReportAdapter {
  func fetch() -> RxSwift.Single<[MDVideocallSDK.DerivationReportSchema]>
}
public struct UserFeaturesModel {
  public let videoCall: Swift.Bool?
  public let videoCall1to1: Swift.Bool?
  public let hasFeeds: Swift.Bool?
  public init(videoCall: Swift.Bool? = nil, videoCall1to1: Swift.Bool? = nil, hasFeeds: Swift.Bool? = nil)
}
extension MDVideocallSDK.UserFeaturesModel {
  public init(schema: MDVideocallSDK.UserFeaturesSchema)
}
public class NoCacheInterceptor : MDVideocallSDK.MDARequestAdapter {
  public init()
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  @objc deinit
}
public struct Changeset {
  public let deleted: [Swift.Int]
  public let inserted: [Swift.Int]
  public let updated: [Swift.Int]
  public init(deleted: [Swift.Int], inserted: [Swift.Int], updated: [Swift.Int], offset: Swift.Int = 0, limit: Swift.Int = 0)
}
public struct AnyMedicalHistoryAdapter<SchemaType> : MDVideocallSDK.MedicalHistoryAdapter where SchemaType : MDVideocallSDK.MedicalHistorySchema {
  public init<Concrete>(_ concrete: Concrete) where SchemaType == Concrete.SchemaType, Concrete : MDVideocallSDK.MedicalHistoryAdapter
  public func fetch(by id: Swift.String) -> RxSwift.Single<SchemaType?>
  public func fetch() -> RxSwift.Single<[SchemaType]>
  public func save(entity: SchemaType, update: Swift.Bool) -> RxSwift.Single<SchemaType>
  public func delete(entity: SchemaType) -> RxSwift.Completable
}
public struct AnyIdentifiableAdapter<SchemaType> : MDVideocallSDK.IdentifiableAdapter where SchemaType : MDVideocallSDK.IdentifiableSchema {
  public init<Concrete>(_ concrete: Concrete) where SchemaType == Concrete.SchemaType, Concrete : MDVideocallSDK.IdentifiableAdapter
  public func fetch(by id: Swift.String) -> RxSwift.Single<SchemaType?>
  public func fetch() -> RxSwift.Single<[SchemaType]>
  public func save(entity: SchemaType, update: Swift.Bool) -> RxSwift.Single<SchemaType>
  public func delete(entity: SchemaType) -> RxSwift.Completable
}
public struct AnyMedicalHistoryDetailControllerType<ElementModel> : MDVideocallSDK.MedicalHistoryDetailControllerType where ElementModel : MDVideocallSDK.Transmittable {
  public init<Concrete>(_ concrete: Concrete) where ElementModel == Concrete.ElementModel, Concrete : MDVideocallSDK.MedicalHistoryDetailControllerType
  public func fetch(by id: Swift.String) -> RxSwift.Observable<ElementModel?>
  public func save(_ element: ElementModel, update: Swift.Bool) -> RxSwift.Observable<ElementModel>
  public func delete(_ element: ElementModel) -> RxSwift.Observable<Swift.Void>
}
public protocol UserModelType {
  var id: Swift.String { get }
  var firstName: Swift.String? { get }
  var lastName: Swift.String? { get }
  var email: Swift.String? { get }
  var phone: Swift.String? { get }
  var documentId: Swift.String? { get }
  var gender: MDVideocallSDK.UserGenderModel? { get }
  var status: MDVideocallSDK.UserRegistrationStatusModel? { get }
  var birthday: Foundation.Date? { get }
  var cardNumber: Swift.String? { get }
  var contract: Swift.String? { get }
  var coverage: Swift.String? { get }
  var company: Swift.String? { get }
  var isBanned: Swift.Bool { get }
  var features: MDVideocallSDK.UserFeaturesModel? { get }
  var termsAcceptedAt: Foundation.Date? { get set }
  var companyGroupCode: Swift.String? { get }
  var feed: MDVideocallSDK.UserFeedModel? { get }
  func hasAccess(to contact: MDVideocallSDK.InboxContactModel) -> Swift.Bool
}
public struct UserModel : MDVideocallSDK.UserModelType {
  public let id: Swift.String
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let email: Swift.String?
  public let phone: Swift.String?
  public let documentId: Swift.String?
  public let gender: MDVideocallSDK.UserGenderModel?
  public let status: MDVideocallSDK.UserRegistrationStatusModel?
  public let birthday: Foundation.Date?
  public let cardNumber: Swift.String?
  public let contract: Swift.String?
  public let coverage: Swift.String?
  public let company: Swift.String?
  public let isBanned: Swift.Bool
  public let features: MDVideocallSDK.UserFeaturesModel?
  public var termsAcceptedAt: Foundation.Date?
  public let companyGroupCode: Swift.String?
  public let feed: MDVideocallSDK.UserFeedModel?
  public var displayName: Swift.String {
    get
  }
  public var isClient: Swift.Bool {
    get
  }
  public init(id: Swift.String, firstName: Swift.String?, lastName: Swift.String?, email: Swift.String?, phone: Swift.String?, documentId: Swift.String?, gender: MDVideocallSDK.UserGenderModel?, status: MDVideocallSDK.UserRegistrationStatusModel?, birthday: Foundation.Date?, cardNumber: Swift.String?, contract: Swift.String?, coverage: Swift.String?, company: Swift.String?, isBanned: Swift.Bool, features: MDVideocallSDK.UserFeaturesModel?, termsAcceptedAt: Foundation.Date?, companyGroupCode: Swift.String?, feed: MDVideocallSDK.UserFeedModel?)
  public func hasAccess(to contact: MDVideocallSDK.InboxContactModel) -> Swift.Bool
}
extension MDVideocallSDK.UserModel {
  public init(id: Swift.String, schema: MDVideocallSDK.UserSchema)
}
public class EnvironmentLoader : MDVideocallSDK.Loader<MDVideocallSDK.BuildConfigurationType, MDVideocallSDK.Environment> {
  public init(loader: MDVideocallSDK.Loader<Swift.String, Foundation.Data>, mapper: MDVideocallSDK.CodableMapper = PropertyListMapper())
  @_semantics("optimize.sil.never") override public func load(_ source: MDVideocallSDK.BuildConfigurationType) -> MDVideocallSDK.Environment?
  @objc deinit
}
public protocol MeetingDoctorsDeeplinkViewControllerProtocol : AnyObject {
  func deeplink(_ deeplinkOption: MDVideocallSDK.MeetingDoctorsDeeplinkOption, animated: Swift.Bool) -> Swift.Bool
}
public class MDVideocallDoctorAvailableModel {
  final public let professionalId: Swift.String?
  final public let name: Swift.String?
  final public let specialty: Swift.String?
  final public let imageURL: Swift.String?
  public init(professionalId: Swift.String?, name: Swift.String?, specialty: Swift.String?, imageURL: Swift.String?)
  @objc deinit
}
public struct MedicationSchema : MDVideocallSDK.MedicalHistorySchema {
  public let id: Swift.UInt
  public let name: Swift.String?
  public let posology: Swift.String?
  public let details: Swift.String?
  public let patientHash: Swift.String?
  public init(id: Swift.UInt, name: Swift.String?, posology: Swift.String?, details: Swift.String?, patientHash: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MedicationSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicationSchema, rhs: MDVideocallSDK.MedicationSchema) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDPrimaryButton : MDVideocallSDK.MDBaseButton {
  @_Concurrency.MainActor(unsafe) public var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DerivationReportEntity : RealmSwift.Object {
  final public let id: RealmSwift.RealmOptional<Swift.Int>
  @objc dynamic public var type: Swift.String?
  @objc dynamic public var payload: Swift.String?
  @objc dynamic public var filename: Swift.String?
  @objc dynamic public var url: Swift.String?
  @objc dynamic public var company: MDVideocallSDK.CompanyReportEntity?
  @objc dynamic public var professional: MDVideocallSDK.ProfessionalReportEntity?
  @objc dynamic public var createdAt: Swift.String?
  @objc dynamic public var customerHash: Swift.String?
  @objc dynamic public var friendlyName: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.DerivationReportEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case type
    case payload
    case filename
    case url
    case company
    case professional
    case createdAt
    case customerHash
    case friendlyName
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers public class CompanyReportEntity : RealmSwift.Object {
  final public let id: RealmSwift.RealmOptional<Swift.Int>
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var logo: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.CompanyReportEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case logo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers public class ProfessionalReportEntity : RealmSwift.Object {
  final public let id: RealmSwift.RealmOptional<Swift.Int>
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var token: Swift.String?
  final public let connected: RealmSwift.RealmOptional<Swift.Bool>
  @objc dynamic public var professionalHash: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.ProfessionalReportEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case token
    case connected
    case professionalHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public enum MessengerRemoteNotificationModel {
  case message(professionalHash: Swift.String, specialityID: Swift.Int?)
  case link(Foundation.URL)
  case rating
  case silent
  case unknown
}
extension MDVideocallSDK.MessengerRemoteNotificationModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.MessengerRemoteNotificationModel, b: MDVideocallSDK.MessengerRemoteNotificationModel) -> Swift.Bool
}
extension MDVideocallSDK.MessengerRemoteNotificationModel {
  public init(schema: MDVideocallSDK.MessengerRemoteNotificationSchema)
}
public enum AuthType {
  case other([Swift.String : Swift.String])
  case none
}
public struct VoidResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias RemoteCompletionTypeAlias<Result> = (Swift.Result<Result, Foundation.NSError>) -> Swift.Void where Result : Swift.Decodable, Result : Swift.Encodable
public protocol RemoteManagerProtocol : AnyObject {
  func post<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders, parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  func get<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders, parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  func put<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders, parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  func delete<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders, parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
}
public class RemoteManager : MDVideocallSDK.RemoteManagerProtocol {
  public init(_ configuration: MDVideocallSDK.RemoteConfiguration)
  @objc deinit
  public func post<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders = [:], parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType = .none, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  public func get<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders = [:], parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType = .none, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  public func put<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders = [:], parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType = .none, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  public func delete<Result>(_ endpoint: Swift.String, headers: MDVideocallSDK.MDAHTTPHeaders = [:], parameters: Swift.Codable?, authType: MDVideocallSDK.AuthType = .none, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Result>) where Result : Swift.Decodable, Result : Swift.Encodable
  public func requestDocument(withName name: Swift.String, _ endpoint: Swift.String, method: MDVideocallSDK.MDHTTPMethod, parameters: Swift.Codable?, encoding: MDVideocallSDK.MDAParameterEncoding = MDAJSONEncoding.default, headers: MDVideocallSDK.MDAHTTPHeaders = [:], authType: MDVideocallSDK.AuthType = .none, completion: @escaping MDVideocallSDK.RemoteCompletionTypeAlias<Foundation.URL>)
  public func request(_ endpoint: Swift.String, method: MDVideocallSDK.MDHTTPMethod, parameters: Swift.Codable?, encoding: MDVideocallSDK.MDAParameterEncoding = MDAURLEncoding.default, headers: MDVideocallSDK.MDAHTTPHeaders = [:], authType: MDVideocallSDK.AuthType = .none, completion: @escaping (MDVideocallSDK.MDADataResponse<Foundation.Data>) -> Swift.Void)
}
extension MDVideocallSDK.DiseaseModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.DiseaseEntity
  public var managedObject: MDVideocallSDK.DiseaseEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.DiseaseEntity) throws
}
public protocol VideoCallStatusModelProtocol {
  var professional: MDVideocallSDK.VideoCallProfessionalModel? { get }
  var type: MDVideocallSDK.VideoCallRemoteNotificationType { get }
}
public struct VideoCallStatusModel : MDVideocallSDK.VideoCallStatusModelProtocol {
  public let professional: MDVideocallSDK.VideoCallProfessionalModel?
  public let type: MDVideocallSDK.VideoCallRemoteNotificationType
  public init(professional: MDVideocallSDK.VideoCallProfessionalModel?, type: MDVideocallSDK.VideoCallRemoteNotificationType = .unknown)
}
extension MDVideocallSDK.VideoCallStatusModel {
  public init(schema: MDVideocallSDK.VideoCallStatusSchema)
}
extension MDVideocallSDK.VideoCallStatusModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallStatusModel, b: MDVideocallSDK.VideoCallStatusModel) -> Swift.Bool
}
extension MDVideocallSDK.MDPermission {
  public static var notification: MDVideocallSDK.MDNotificationPermission {
    get
  }
}
@_inheritsConvenienceInitializers public class MDNotificationPermission : MDVideocallSDK.MDPermission {
  override open var type: MDVideocallSDK.MDPermissionTypeEnum {
    get
  }
  override public var status: MDVideocallSDK.MDPermissionStatusEnum {
    get
  }
  override public func request(completion: @escaping () -> Swift.Void)
  override public init()
  @objc deinit
}
extension MDVideocallSDK.MedicalCoverageModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.MedicalCoverageEntity
  public var managedObject: MDVideocallSDK.MedicalCoverageEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.MedicalCoverageEntity) throws
}
public class AlamofireCustomerInstallationAdapter : MDVideocallSDK.CustomerInstallationAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func installation(_ request: MDVideocallSDK.CustomerInstallationRequest) -> RxSwift.Single<MDVideocallSDK.CustomerInstallationSchema>
  public func installation(_ request: MDVideocallSDK.CustomerInstallationRequest, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationSchema, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct CustomerInstallationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case installationGuid
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let installationGuid: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerInstallationSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.CustomerInstallationSchema, b: MDVideocallSDK.CustomerInstallationSchema) -> Swift.Bool
}
public enum BuildConfigurationType : Swift.String, Swift.Codable, Swift.CodingKey {
  case debug
  case release
  case staging
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
extension Foundation.Date {
  public var isTomorrow: Swift.Bool {
    get
  }
}
public protocol MeetingDoctorsInstallationType {
  var installationId: Foundation.UUID { get }
  var systemVersion: Swift.String { get }
  var frameworkVersion: Swift.String { get }
  var deviceModel: Swift.String { get }
  var referrer: MDVideocallSDK.MeetingDoctorsReferrerType? { get }
}
public struct MeetingDoctorsInstallation : MDVideocallSDK.MeetingDoctorsInstallationType {
  public var installationId: Foundation.UUID {
    get
  }
  public var systemVersion: Swift.String {
    get
  }
  public var frameworkVersion: Swift.String {
    get
  }
  public var deviceModel: Swift.String {
    get
  }
  public var referrer: MDVideocallSDK.MeetingDoctorsReferrerType? {
    get
  }
  public init(from model: MDVideocallSDK.InstallationModel)
}
extension Foundation.DateFormatter {
  public static let yyyyMMddTHHmmss: Foundation.DateFormatter
  public static let yyyyMMddHHmmss: Foundation.DateFormatter
  public static let yyyyMMdd: Foundation.DateFormatter
  public static let yyyyMMddTHHmmssSSSZ: Foundation.DateFormatter
  public static let yyyyMMddTHHmmssZ: Foundation.DateFormatter
  public static let yyyyMMddTHHmmssSSSZZZZ: Foundation.DateFormatter
}
extension Foundation.DateFormatter {
  public static let iso8601: Foundation.DateFormatter
  public static let ddMMyyy: Foundation.DateFormatter
  public static let dd_MM_yyyy: Foundation.DateFormatter
  public static let HHmm: Foundation.DateFormatter
}
public enum UserGenderModel : Swift.String {
  case unknown
  case male
  case female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.UserSchema.Gender {
  public var model: MDVideocallSDK.UserGenderModel {
    get
  }
}
public protocol Transmittable {
  associatedtype SchemaObject : Swift.Decodable, Swift.Encodable
  var schemaObject: Self.SchemaObject { get }
  init(schemaObject: Self.SchemaObject) throws
}
public protocol RealmConfigurationAssembly {
  func resolve() -> RealmSwift.Realm.Configuration?
}
public class RealmConfigurationAssembler : MDVideocallSDK.RealmConfigurationAssembly {
  public var encryption: MDVideocallSDK.EncryptionProvider? {
    get
  }
  public init(buildType: MDVideocallSDK.BuildConfigurationType, encryption: MDVideocallSDK.EncryptionProviderAssembly, migration: MDVideocallSDK.RealmStoreMigrationProviderAssembly)
  public func resolve() -> RealmSwift.Realm.Configuration?
  @objc deinit
}
extension MDVideocallSDK.RealmConfigurationAssembler : MDVideocallSDK.Assembler {
  public typealias Component = RealmSwift.Realm.Configuration
}
public struct DataSchema<T> : Swift.Codable where T : MDVideocallSDK.IdentifiableSchema {
  public let data: T
  public init(data: T)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol FloatingChatModelType {
  var items: [MDVideocallSDK.FloatingChatItemsModelType]? { get set }
}
public struct FloatingChatModel : MDVideocallSDK.FloatingChatModelType {
  public var items: [MDVideocallSDK.FloatingChatItemsModelType]?
  public init(items: [MDVideocallSDK.FloatingChatItemsModelType]? = nil)
}
public protocol FloatingChatItemsModelType {
  var name: Swift.String { get set }
  var icon: UIKit.UIImage? { get set }
  var action: (() -> Swift.Void)? { get set }
}
public struct FloatingChatItemsModel : MDVideocallSDK.FloatingChatItemsModelType {
  public var name: Swift.String
  public var icon: UIKit.UIImage?
  public var action: (() -> Swift.Void)?
  public init(name: Swift.String = "", icon: UIKit.UIImage? = nil, action: (() -> Swift.Void)? = nil)
}
public struct FloatingChatVideoCallItemsModel : MDVideocallSDK.FloatingChatItemsModelType {
  public var name: Swift.String
  public var icon: UIKit.UIImage?
  public var action: (() -> Swift.Void)?
  public init(name: Swift.String = "", icon: UIKit.UIImage? = nil)
}
public protocol MeetingDoctorsReferrerType {
  var source: Swift.String { get }
  var medium: Swift.String? { get }
  var campaign: Swift.String? { get }
  var content: Swift.String? { get }
  var term: Swift.String? { get }
  var data: [Swift.String : Swift.String] { get }
}
public struct MeetingDoctorsReferrer : MDVideocallSDK.MeetingDoctorsReferrerType {
  public var source: Swift.String {
    get
  }
  public var medium: Swift.String? {
    get
  }
  public var campaign: Swift.String? {
    get
  }
  public var content: Swift.String? {
    get
  }
  public var term: Swift.String? {
    get
  }
  public var data: [Swift.String : Swift.String] {
    get
  }
  public init?(from model: MDVideocallSDK.ReferrerModel?)
}
extension MDVideocallSDK.SocketClientSchema {
  public static func build(connect data: [Any]) -> MDVideocallSDK.SocketClientSchema
  public static func build(disconnect data: [Any]) -> MDVideocallSDK.SocketClientSchema
  public static func build(status data: [Any]) -> MDVideocallSDK.SocketClientSchema
  public static func build(error data: [Any]) -> MDVideocallSDK.SocketClientSchema
}
extension MDVideocallSDK.SocketClientSchema.Output : SocketIO.SocketData {
  public enum Direction : Swift.Int {
    case previous
    case next
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func socketRepresentation() -> SocketIO.SocketData
}
public struct PropertyListMapper : MDVideocallSDK.CodableMapper {
  public let encoder: Foundation.PropertyListEncoder
  public let decoder: Foundation.PropertyListDecoder
  public init(decoder: Foundation.PropertyListDecoder = PropertyListDecoder(), encoder: Foundation.PropertyListEncoder = PropertyListEncoder())
  public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  public func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UICollectionViewCell, T : MDVideocallSDK.NibLoadable, T : MDVideocallSDK.ReusableCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(_: T.Type, for indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionViewCell, T : MDVideocallSDK.ReusableCell
}
public class AuthenticationController {
  public init(_ installation: MDVideocallSDK.InstallationController, repository: MDVideocallSDK.RepositoryController, remote: MDVideocallSDK.RemoteController, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func current(_ id: Swift.String) -> RxSwift.Observable<MDVideocallSDK.AccountModel?>
  public func authenticate(_ id: Swift.String, notifier: Foundation.NotificationCenter = NotificationCenter.default) -> RxSwift.Observable<MDVideocallSDK.AccountModel>
  public func updateUserInfo(_ account: MDVideocallSDK.AccountModel, notifier: Foundation.NotificationCenter = NotificationCenter.default) -> RxSwift.Observable<MDVideocallSDK.AccountModel>
  public func updateUserInfo(_ account: MDVideocallSDK.AccountModel, notifier: Foundation.NotificationCenter = NotificationCenter.default, completion: @escaping (Swift.Result<MDVideocallSDK.AccountModel?, Swift.Error>) -> Swift.Void)
  public func deauthenticate(notifier: Foundation.NotificationCenter = NotificationCenter.default) -> RxSwift.Observable<Swift.Void>
  public func authenticate(_ id: Swift.String, notifier: Foundation.NotificationCenter = NotificationCenter.default, completion: @escaping (Swift.Result<MDVideocallSDK.AccountModel?, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public protocol MessagesControllerType {
  func status(contact id: Swift.String) -> RxSwift.Observable<MDVideocallSDK.ContactStatusModel?>
  func fetch(room id: Swift.Int) -> RxSwift.Observable<([MDVideocallSDK.MessageModel], MDVideocallSDK.Changeset?)>
  func join(channel: Swift.String) -> RxSwift.Observable<MDVideocallSDK.SocketClientSchema.Input>
  func leave(room id: Swift.Int)
  func delete(room id: Swift.Int) -> RxSwift.Observable<Swift.Void>
  func send(message: MDVideocallSDK.MessageModel) -> RxSwift.Observable<Swift.Void>
  func update(message: MDVideocallSDK.MessageModel, status: MDVideocallSDK.MessageStatusModel)
  func metadata(for image: UIKit.UIImage?, at url: Foundation.URL?, photoLibrary: Photos.PHPhotoLibrary) -> RxSwift.Observable<MDVideocallSDK.MessageDataModel>
  func metadata(for data: Foundation.Data, at url: Foundation.URL) -> RxSwift.Observable<MDVideocallSDK.MessageDataModel>
  func unreadMessages(account: MDVideocallSDK.AccountModel) -> RxSwift.Observable<Swift.Int>
}
public class MessagesController : MDVideocallSDK.MessagesControllerType {
  public init(_ repository: MDVideocallSDK.RepositoryController, _ socket: MDVideocallSDK.AnySocketControllerStream, _ scheduler: RxSwift.ImmediateSchedulerType)
  public func status(contact id: Swift.String) -> RxSwift.Observable<MDVideocallSDK.ContactStatusModel?>
  public func fetch(room id: Swift.Int) -> RxSwift.Observable<([MDVideocallSDK.MessageModel], MDVideocallSDK.Changeset?)>
  public func join(channel: Swift.String) -> RxSwift.Observable<MDVideocallSDK.SocketClientSchema.Input>
  public func leave(room id: Swift.Int)
  @discardableResult
  public func delete(room id: Swift.Int) -> RxSwift.Observable<Swift.Void>
  public func send(message: MDVideocallSDK.MessageModel) -> RxSwift.Observable<Swift.Void>
  public func update(message: MDVideocallSDK.MessageModel, status: MDVideocallSDK.MessageStatusModel)
  public func metadata(for image: UIKit.UIImage?, at url: Foundation.URL?, photoLibrary: Photos.PHPhotoLibrary = PHPhotoLibrary.shared()) -> RxSwift.Observable<MDVideocallSDK.MessageDataModel>
  public func metadata(for data: Foundation.Data, at url: Foundation.URL) -> RxSwift.Observable<MDVideocallSDK.MessageDataModel>
  public func unreadMessages(account: MDVideocallSDK.AccountModel) -> RxSwift.Observable<Swift.Int>
  @objc deinit
}
public struct KeychainEncryptionProvider : MDVideocallSDK.EncryptionProvider {
  public var key: Foundation.Data? {
    get
  }
  public init?(_ id: Swift.String)
  public init(_ tag: Foundation.Data)
  public func randomData(ofLength length: Swift.Int) -> Foundation.Data
}
public enum SocketControllerModel {
  case connect(Swift.String)
  case disconnect(Swift.String)
  case status(MDVideocallSDK.ConnectionStatusModel)
  case error(Swift.Error)
  case reconnect
  case reconnectAttempt
}
extension MDVideocallSDK.SocketControllerModel {
  public var status: MDVideocallSDK.ConnectionStatusModel? {
    get
  }
}
public enum MDVideocallStatusType : Swift.String, Swift.Codable, Swift.Equatable {
  case onHold
  case assigned
  case onGoing
  case cancelled
  case finished
  case failed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MDVideocallStatus {
  case onHold(videocallId: Swift.String)
  case onGoing(participants: [MDVideocallSDK.MDCommonDataResponse<MDVideocallSDK.MDVideocallParticipantResponseModel>])
  case cancelled
  case finished
  case unknown
}
public enum MDVideocallPermission {
  case authorized(status: MDVideocallSDK.MDVideocallStatus)
  case notDetermined(status: MDVideocallSDK.MDVideocallStatus)
  case denied
  case unknown
}
public protocol MDNetworkSessionManagerProtocol {
  typealias CompletionHandler = (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void
  func request(_ request: Foundation.URLRequest, completion: @escaping Self.CompletionHandler) -> MDVideocallSDK.MDNetworkCancellableProtocol
}
public protocol MedicalDirectoryListControllerType {
  associatedtype ElementModel : MDVideocallSDK.Transmittable
  func fetch(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Self.ElementModel], Swift.Error>) -> Swift.Void)
  func get(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Self.ElementModel], Swift.Error>) -> Swift.Void)
}
extension MDVideocallSDK.MedicalDirectoryListControllerType {
  public func get(query _: MDVideocallSDK.MedicalQueryBuilder, completion _: @escaping (Swift.Result<[Self.ElementModel], Swift.Error>) -> Swift.Void)
  public func fetch(query _: MDVideocallSDK.MedicalQueryBuilder, completion _: @escaping (Swift.Result<[Self.ElementModel], Swift.Error>) -> Swift.Void)
}
public struct MedicalDirectoryListController<Model> : MDVideocallSDK.MedicalDirectoryListControllerType where Model : MDVideocallSDK.Transmittable, Model.SchemaObject : MDVideocallSDK.MedicalDirectorySchema {
  public typealias ElementModel = Model
  public init(_ repository: MDVideocallSDK.AnyRepository<Model>, _ adapter: MDVideocallSDK.AnyMedicalDirectoryAdapter<Model.SchemaObject>, scheduler: RxSwift.ImmediateSchedulerType, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func fetch(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
}
extension MDVideocallSDK.MedicalDirectoryListController where Model == MDVideocallSDK.MedicalCoverageModel {
  public func get(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
}
extension MDVideocallSDK.MedicalDirectoryListController where Model == MDVideocallSDK.MedicalSpecialityModel {
  public func get(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
}
extension MDVideocallSDK.MedicalDirectoryListController where Model == MDVideocallSDK.MedicalProfessionalModel {
  public func fetch(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
  public func get(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
}
extension MDVideocallSDK.MedicalDirectoryListController where Model == MDVideocallSDK.MedicalAddressModel {
  #warning("SimpleRepository applies on non-persistable models")
  public init(_ adapter: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalAddressSchema>, auth: MDVideocallSDK.CustomerAuthControllerProtocol)
  public func get(query: MDVideocallSDK.MedicalQueryBuilder, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
}
public struct Keystore : Swift.Codable {
  public let clientSecret: Swift.String
  public init(clientSecret: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.Keystore : Swift.Equatable {
  public static func == (a: MDVideocallSDK.Keystore, b: MDVideocallSDK.Keystore) -> Swift.Bool
}
public struct PrescriptionResponseModel : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case tin
    case url
    case lastModifiedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol MessageType {
  var sender: MDVideocallSDK.Sender { get }
  var messageId: Swift.String { get }
  var sentDate: Foundation.Date { get }
  var kind: MDVideocallSDK.MessageKind { get }
}
public protocol MessageStatusViewModelType {
  var icon: UIKit.UIImage? { get }
}
public enum MessageKind {
  case text(Swift.String)
  case attributedText(Foundation.NSAttributedString)
  case photo(MDVideocallSDK.MediaItem)
  case video(MDVideocallSDK.MediaItem)
  case location(MDVideocallSDK.LocationItem)
  case emoji(Swift.String)
  case custom(Any?)
}
public struct Sender {
  public let id: Swift.String
  public let displayName: Swift.String
  public init(id: Swift.String, displayName: Swift.String)
}
extension MDVideocallSDK.Sender : Swift.Equatable {
  public static func == (left: MDVideocallSDK.Sender, right: MDVideocallSDK.Sender) -> Swift.Bool
}
public struct MessageCellViewModel : MDVideocallSDK.MessageType {
  public enum Status : Swift.String {
    case pending
    case sent
    case delivered
    case received
    case read
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var model: MDVideocallSDK.MessageModel
  public let sender: MDVideocallSDK.Sender
  public var messageId: Swift.String {
    get
  }
  public var sentDate: Foundation.Date {
    get
  }
  public var kind: MDVideocallSDK.MessageKind {
    get
  }
  public var status: MDVideocallSDK.MessageCellViewModel.Status {
    get
  }
  public init(model: MDVideocallSDK.MessageModel, sender: MDVideocallSDK.Sender)
  public func update(status: MDVideocallSDK.MessageCellViewModel.Status) -> MDVideocallSDK.MessageCellViewModel
}
extension MDVideocallSDK.MessageCellViewModel {
  public var attachmentURL: Foundation.URL? {
    get
  }
}
extension MDVideocallSDK.MessageCellViewModel.Status : MDVideocallSDK.MessageStatusViewModelType {
  public var icon: UIKit.UIImage? {
    get
  }
}
extension MDVideocallSDK.MessageStatusModel {
  public init(view: MDVideocallSDK.MessageCellViewModel.Status)
}
public struct AnyMedicalDirectoryAdapter<SchemaType> : MDVideocallSDK.MedicalDirectoryAdapter where SchemaType : MDVideocallSDK.MedicalDirectorySchema {
  public init<Concrete>(_ concrete: Concrete) where SchemaType == Concrete.SchemaType, Concrete : MDVideocallSDK.MedicalDirectoryAdapter
  public func fetch<ParameterType>(_ request: ParameterType? = nil, type: ParameterType.Type = ParameterType.self, completion: @escaping (Swift.Result<[SchemaType], Swift.Error>) -> Swift.Void) where ParameterType : MDVideocallSDK.PaginableRequest
}
public struct CoreV2ArgumentNPSRequest : Swift.Codable {
  public let id: Swift.String
  public let professional: Swift.String
  public let customer: Swift.String
  public let type: Swift.String
  public let service: Swift.String
  public init(id: Swift.String, professional: Swift.String, customer: Swift.String, type: Swift.String, service: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerErrorSchema : Swift.Error, Swift.Decodable {
  public let message: Swift.String?
  public let error: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerErrorSchema : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MDVideocallSDK.CustomerErrorSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.CustomerErrorSchema, rhs: MDVideocallSDK.CustomerErrorSchema) -> Swift.Bool
}
extension UIKit.UITextView : UIKit.NSTextStorageDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textStorage(_: UIKit.NSTextStorage, didProcessEditing editedMask: UIKit.NSTextStorage.EditActions, range _: Foundation.NSRange, changeInLength _: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class TagEntity : RealmSwift.Object {
  convenience public init(id: Swift.String)
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.TagEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public enum MDVideocallType : Swift.String, Swift.Codable, Swift.Equatable {
  case pool
  case oneToOne
  public func callAsFunction() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StatusChangeSchema : Swift.Codable {
  public let status: Swift.Int
  public init(_ status: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.StatusChangeSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.StatusChangeSchema, b: MDVideocallSDK.StatusChangeSchema) -> Swift.Bool
}
extension UIKit.UIFont {
  public var weight: UIKit.UIFont.Weight {
    get
  }
}
public protocol MedicalDirectoryAdapter {
  associatedtype SchemaType : MDVideocallSDK.MedicalDirectorySchema
  func fetch<ParameterType>(_ request: ParameterType?, type: ParameterType.Type, completion: @escaping (Swift.Result<[Self.SchemaType], Swift.Error>) -> Swift.Void) where ParameterType : MDVideocallSDK.PaginableRequest
}
public enum FeedsDeeplinkOption {
  case main
  case detail(id: Swift.String)
  case detailWeb(url: Swift.String)
  case detailBrowser(url: Swift.String)
}
extension MDVideocallSDK.FeedsDeeplinkOption : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.FeedsDeeplinkOption, rhs: MDVideocallSDK.FeedsDeeplinkOption) -> Swift.Bool
}
public struct VideoCall1to1Request : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case professionalHash
    case component
    case version
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let professionalHash: Swift.String
  public let component: Swift.String
  public let version: Swift.String?
  public init(professionalHash: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class LocationEntity : RealmSwift.Object {
  @objc dynamic public var latitude: Swift.Double
  @objc dynamic public var longitude: Swift.Double
  @objc dynamic public var altitude: Swift.Double
  @objc dynamic public var verticalAccuracy: Swift.Double
  @objc dynamic public var horizontalAccuracy: Swift.Double
  @objc dynamic public var timestamp: Foundation.Date
  convenience public init(_ location: CoreLocation.CLLocation)
  @objc override dynamic public init()
  @objc deinit
}
public struct PersistableSocketInputStream : MDVideocallSDK.SocketInputStream {
  public var name: Swift.String {
    get
  }
  public init(client: MDVideocallSDK.AnySocketInputStream<MDVideocallSDK.SocketClientSchema.Input>, configuration: RealmSwift.Realm.Configuration)
  public init(client: MDVideocallSDK.AnySocketInputStream<MDVideocallSDK.SocketClientSchema.Input>, provider: MDVideocallSDK.RealmStoreProvider, configuration: RealmSwift.Realm.Configuration)
  public func on() -> RxSwift.Observable<MDVideocallSDK.SocketClientSchema.Input>
  public typealias EventType = MDVideocallSDK.SocketClientSchema.Input
}
public struct Endpoint : Swift.Codable {
  public var url: Foundation.URL? {
    get
  }
  public let scheme: Swift.String?
  public let host: Swift.String?
  public let port: Swift.Int?
  public let path: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.Endpoint {
  public init(url: Foundation.URL)
}
extension MDVideocallSDK.Endpoint : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.Endpoint, rhs: MDVideocallSDK.Endpoint) -> Swift.Bool
}
public struct ClientSocketOutputStream : MDVideocallSDK.SocketOutputStream {
  public var name: Swift.String {
    get
  }
  public init(_ stream: MDVideocallSDK.AnySocketOutputStream<SocketIO.SocketData>)
  public func emit(event: MDVideocallSDK.SocketClientSchema.Output) throws
  public func acknowledge(event: MDVideocallSDK.SocketClientSchema.Output) throws -> RxSwift.Single<MDVideocallSDK.SocketClientSchema.Input>
  public typealias EventType = MDVideocallSDK.SocketClientSchema.Output
}
public enum MDDataTransferError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  case noResponse
  case parsing(Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public protocol MDDataTransferServiceProtocol {
  typealias CompletionHandler<T> = (Swift.Result<T, Swift.Error>) -> Swift.Void
  @discardableResult
  func request<T, E>(endpoint: E, completion: @escaping Self.CompletionHandler<T>) -> MDVideocallSDK.MDNetworkCancellableProtocol? where T : Swift.Decodable, T : Swift.Encodable, T == E.Response, E : MDVideocallSDK.MDRequestableProtocol, E : MDVideocallSDK.MDResponseDecoderProtocol
}
public class AlamofireAuthenticationAdapter : MDVideocallSDK.AuthenticationAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func authenticate(_ request: MDVideocallSDK.AuthenticateRequest) -> RxSwift.Single<MDVideocallSDK.SessionSchema>
  public func authenticate(_ request: MDVideocallSDK.AuthenticateRequest, completion: @escaping (Swift.Result<MDVideocallSDK.SessionSchema, Swift.Error>) -> Swift.Void)
  public func user(_ request: MDVideocallSDK.UserRequest) -> RxSwift.Single<MDVideocallSDK.UserSchema>
  public func user(_ request: MDVideocallSDK.UserRequest, completion: @escaping (Swift.Result<MDVideocallSDK.UserSchema, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct VideoCallRemoteNotificationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case professional
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let professional: MDVideocallSDK.VideoCallProfessionalSchema?
  public let type: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallRemoteNotificationSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallRemoteNotificationSchema, b: MDVideocallSDK.VideoCallRemoteNotificationSchema) -> Swift.Bool
}
public enum VideoCallRemoteNotificationType : Swift.String {
  case assigned
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.VideoCallRemoteNotificationSchema {
  public var notificationType: MDVideocallSDK.VideoCallRemoteNotificationType {
    get
  }
}
public protocol MDEventProviderProtocol {
  func logEvent()
  func logEvent(_ event: MDVideocallSDK.MDEventProtocol)
}
extension MDVideocallSDK.MDEventProviderProtocol {
  public func logEvent()
  public func logEvent(_: MDVideocallSDK.MDEventProtocol)
}
open class MDEventProvider : MDVideocallSDK.MDEventProviderProtocol {
  public var event: MDVideocallSDK.MDEventProtocol?
  public init(event: MDVideocallSDK.MDEventProtocol? = nil)
  public func logEvent()
  public func logEvent(_: MDVideocallSDK.MDEventProtocol)
  @objc deinit
}
public struct MDATimeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension MDVideocallSDK.MDATimeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDATimeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct AuthenticateRequest : Swift.Codable {
  public let installationUUID: Swift.String
  public let sessionToken: Swift.String
  public let osName: MDVideocallSDK.OSName
  public let bundleId: Swift.String
  public init(_ uuid: Foundation.UUID, token: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.AuthenticateRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.AuthenticateRequest, rhs: MDVideocallSDK.AuthenticateRequest) -> Swift.Bool
}
public struct CustomerLoginRequest : Swift.Codable {
  public let userToken: Swift.String
  public let installationGuid: Swift.String
  public init(userToken: Swift.String, installationGuid: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerLoginRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.CustomerLoginRequest, rhs: MDVideocallSDK.CustomerLoginRequest) -> Swift.Bool
}
public struct EnvironmentVariables {
  public struct Inbox {
    public static let RetrieveAll: MDVideocallSDK.NamedProperty<Swift.Bool>
  }
  public struct Security {
    public static let Log: MDVideocallSDK.NamedProperty<Swift.Bool>
  }
}
public struct DerivationReportSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case type
    case payload
    case companyApiKey
    case customerHash
    case professionalHash
    case filename
    case friendlyName
    case url
    case company
    case professional
    case createdAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int?
  public let type: Swift.String?
  public let payload: Swift.String?
  public let companyApiKey: Swift.String?
  public let customerHash: Swift.String?
  public let professionalHash: Swift.String?
  public let filename: Swift.String?
  public let friendlyName: Swift.String?
  public let url: Swift.String?
  public let company: MDVideocallSDK.CompanyDerivationSchema?
  public let professional: MDVideocallSDK.ProfessionalDerivationSchema?
  public let createdAt: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CompanyDerivationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case name
    case logo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int?
  public let name: Swift.String?
  public let logo: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ProfessionalDerivationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case name
    case token
    case connected
    case hash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int?
  public let name: Swift.String?
  public let token: Swift.String?
  public let connected: Swift.Bool?
  public let hash: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol NotificationControllerType {
  func authorize(_ application: UIKit.UIApplication)
  @available(iOS 10.0, *)
  func authorize(_ application: UIKit.UIApplication, notification center: UserNotifications.UNUserNotificationCenter)
  func unreadMessageCount(for user: MDVideocallSDK.UserModel) -> RxSwift.Single<Swift.Int>
}
public class NotificationController : MDVideocallSDK.NotificationControllerType {
  public init(_ installation: MDVideocallSDK.InstallationController, remote: MDVideocallSDK.RemoteController)
  public func authorize(_ application: UIKit.UIApplication)
  @available(iOS 10.0, *)
  public func authorize(_ application: UIKit.UIApplication, notification center: UserNotifications.UNUserNotificationCenter)
  public func unreadMessageCount(for user: MDVideocallSDK.UserModel) -> RxSwift.Single<Swift.Int>
  @objc deinit
}
public struct IncomingMessageRequest : Swift.Codable {
  public let message: Swift.String
  public let professionalHash: Swift.String
  public init(message: Swift.String, professionalHash: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.IncomingMessageRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.IncomingMessageRequest, rhs: MDVideocallSDK.IncomingMessageRequest) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StatusView : UIKit.UIView {
  public enum Status {
    case online
    case offline
    case unknown
    public static func == (a: MDVideocallSDK.StatusView.Status, b: MDVideocallSDK.StatusView.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var status: MDVideocallSDK.StatusView.Status? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.Bundle {
  public static var packageBundle: Foundation.Bundle {
    get
  }
  public var versionNumber: Swift.String? {
    get
  }
  public var shortVersionNumber: Swift.String? {
    get
  }
  public var launchStoryboardName: Swift.String? {
    get
  }
  public var statusBarStyle: UIKit.UIStatusBarStyle? {
    get
  }
  public var isStatusBarHidden: Swift.Bool? {
    get
  }
  public var configuration: MDVideocallSDK.BuildConfigurationType? {
    get
  }
  public var buildTime: Swift.String? {
    get
  }
  public var buildNumber: Swift.String? {
    get
  }
  public var gitVersion: Swift.String? {
    get
  }
  public var isDebug: Swift.Bool? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDBaseButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var textFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@objc @_inheritsConvenienceInitializers public class VideoCallReportEntity : RealmSwift.Object {
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var patientHash: Swift.String?
  @objc dynamic public var pdfUrl: Swift.String?
  @objc dynamic public var owner: MDVideocallSDK.VideoCallUserEntity?
  @objc dynamic public var maker: MDVideocallSDK.VideoCallUserEntity?
  @objc dynamic public var createdAt: Swift.String?
  @objc dynamic public var updatedAt: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.VideoCallReportEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case name
    case patientHash
    case id
    case pdfUrl
    case owner
    case maker
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension MDVideocallSDK.MedicalSpecialityModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.MedicalSpecialityEntity
  public var managedObject: MDVideocallSDK.MedicalSpecialityEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.MedicalSpecialityEntity) throws
}
extension MDVideocallSDK.MDPermission {
  public static var camera: MDVideocallSDK.MDCameraPermission {
    get
  }
}
@_inheritsConvenienceInitializers public class MDCameraPermission : MDVideocallSDK.MDPermission {
  override open var type: MDVideocallSDK.MDPermissionTypeEnum {
    get
  }
  open var usageDescriptionKey: Swift.String? {
    get
  }
  override public var status: MDVideocallSDK.MDPermissionStatusEnum {
    get
  }
  override public func request(completion: @escaping () -> Swift.Void)
  override public init()
  @objc deinit
}
public class MDDefaultNetworkService {
  public init(sessionManager: MDVideocallSDK.MDNetworkSessionManagerProtocol = DefaultNetworkSessionManager())
  @objc deinit
}
extension MDVideocallSDK.MDDefaultNetworkService : MDVideocallSDK.MDNetworkServiceProtocol {
  public func request(endpoint: MDVideocallSDK.MDRequestableProtocol, completion: @escaping MDVideocallSDK.MDDefaultNetworkService.CompletionHandler) -> MDVideocallSDK.MDNetworkCancellableProtocol?
}
public protocol Routable : MDVideocallSDK.MDAURLConvertible {
  var baseURL: Foundation.URL? { get }
  var path: Swift.String? { get }
  var method: MDVideocallSDK.MDHTTPMethod { get }
  var encoding: MDVideocallSDK.MDAParameterEncoding { get }
  func with(path parameters: [Swift.String : Swift.String]) -> MDVideocallSDK.Routable
}
extension MDVideocallSDK.Routable {
  public var encoding: MDVideocallSDK.MDAParameterEncoding {
    get
  }
}
public struct Router : MDVideocallSDK.Routable {
  public let endpoint: MDVideocallSDK.Endpoint
  public let path: Swift.String?
  public let method: MDVideocallSDK.MDHTTPMethod
  public var baseURL: Foundation.URL? {
    get
  }
  public init(_ endpoint: MDVideocallSDK.Endpoint, path: Swift.String, method: MDVideocallSDK.MDHTTPMethod = .get)
  public func with(path parameters: [Swift.String : Swift.String]) -> MDVideocallSDK.Routable
  public func asURL() throws -> Foundation.URL
  public init(endpoint: MDVideocallSDK.Endpoint, path: Swift.String?, method: MDVideocallSDK.MDHTTPMethod)
}
extension MDVideocallSDK.Router {
  public static let pathLens: MDVideocallSDK.Lens<MDVideocallSDK.Router, Swift.String?>
}
public protocol RealmStoreAssembly {
  var configuration: RealmSwift.Realm.Configuration { get }
  var provider: MDVideocallSDK.RealmStoreProvider { get }
  func resolve() -> RealmSwift.Realm?
}
public class RealmStoreAssembler : MDVideocallSDK.RealmStoreAssembly {
  final public let configuration: RealmSwift.Realm.Configuration
  final public let provider: MDVideocallSDK.RealmStoreProvider
  public init(with configuration: RealmSwift.Realm.Configuration, provider: MDVideocallSDK.RealmStoreProvider)
  convenience public init(with configuration: MDVideocallSDK.RealmConfigurationAssembly, provider: MDVideocallSDK.RealmStoreProviderAssembly)
  public func resolve() -> RealmSwift.Realm?
  @objc deinit
}
extension MDVideocallSDK.RealmStoreAssembler : MDVideocallSDK.Assembler {
  public typealias Component = RealmSwift.Realm
}
public struct VideoCallStatusSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case professional
    case tokbox
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let professional: MDVideocallSDK.VideoCallProfessionalSchema?
  public let tokbox: MDVideocallSDK.VideoCallConsultationSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallStatusSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallStatusSchema, b: MDVideocallSDK.VideoCallStatusSchema) -> Swift.Bool
}
extension MDVideocallSDK.MedicalProfessionalModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.MedicalProfessionalEntity
  public var managedObject: MDVideocallSDK.MedicalProfessionalEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.MedicalProfessionalEntity) throws
}
extension MDVideocallSDK.MedicalProfessionalEntity.Kind {
  public var model: MDVideocallSDK.MedicalProfessionalModel.Kind {
    get
  }
}
public protocol CellParentViewProtocol {
  associatedtype CellType : UIKit.UIView
  func dequeueReusableCellFor(identifier: Swift.String, indexPath: Foundation.IndexPath) -> Self.CellType
  func dequeueReusableSupplementaryViewFor(kind: Swift.String, identifier: Swift.String, indexPath: Foundation.IndexPath) -> Self.CellType?
}
extension UIKit.UICollectionView : MDVideocallSDK.CellParentViewProtocol {
  public typealias CellType = UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCellFor(identifier: Swift.String, indexPath: Foundation.IndexPath) -> UIKit.UICollectionView.CellType
  @_Concurrency.MainActor(unsafe) public func dequeueReusableSupplementaryViewFor(kind: Swift.String, identifier: Swift.String, indexPath: Foundation.IndexPath) -> UIKit.UICollectionView.CellType?
}
extension UIKit.UITableView : MDVideocallSDK.CellParentViewProtocol {
  public typealias CellType = UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCellFor(identifier: Swift.String, indexPath: Foundation.IndexPath) -> UIKit.UITableView.CellType
  @_Concurrency.MainActor(unsafe) public func dequeueReusableSupplementaryViewFor(kind _: Swift.String, identifier _: Swift.String, indexPath _: Foundation.IndexPath) -> UIKit.UITableView.CellType?
}
public protocol ReusableViewProtocol {
  associatedtype ParentView : UIKit.UIView, MDVideocallSDK.CellParentViewProtocol
  var reuseIdentifier: Swift.String? { get }
  func prepareForReuse()
}
extension UIKit.UICollectionReusableView : MDVideocallSDK.ReusableViewProtocol {
  public typealias ParentView = UIKit.UICollectionView
}
extension UIKit.UITableViewCell : MDVideocallSDK.ReusableViewProtocol {
  public typealias ParentView = UIKit.UITableView
}
public enum ReusableViewType {
  case cell
  case supplementaryView(kind: Swift.String)
}
extension MDVideocallSDK.ReusableViewType : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ReusableViewType, rhs: MDVideocallSDK.ReusableViewType) -> Swift.Bool
}
public protocol ReusableViewConfigProtocol {
  associatedtype Item
  associatedtype View : MDVideocallSDK.ReusableViewProtocol
  func reuseIdentiferFor(item: Self.Item?, type: MDVideocallSDK.ReusableViewType, indexPath: Foundation.IndexPath) -> Swift.String
  @discardableResult
  func configure(view: Self.View, item: Self.Item?, type: MDVideocallSDK.ReusableViewType, parentView: Self.View.ParentView, indexPath: Foundation.IndexPath) -> Self.View
}
extension MDVideocallSDK.ReusableViewConfigProtocol where Self.View : UIKit.UITableViewCell {
  public func tableCellFor(item: Self.Item, tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Self.View
}
extension MDVideocallSDK.ReusableViewConfigProtocol where Self.View : UIKit.UICollectionViewCell {
  public func collectionCellFor(item: Self.Item, collectionView: UIKit.UICollectionView, indexPath: Foundation.IndexPath) -> Self.View
}
extension MDVideocallSDK.ReusableViewConfigProtocol where Self.View : UIKit.UICollectionReusableView {
  public func supplementaryViewFor(item: Self.Item?, kind: Swift.String, collectionView: UIKit.UICollectionView, indexPath: Foundation.IndexPath) -> Self.View
}
public struct ReusableViewConfig<Item, Cell> : MDVideocallSDK.ReusableViewConfigProtocol where Cell : MDVideocallSDK.ReusableViewProtocol {
  public typealias ViewConfigurator = (Cell, Item?, MDVideocallSDK.ReusableViewType, Cell.ParentView, Foundation.IndexPath) -> Cell
  public let reuseIdentifier: Swift.String
  public let type: MDVideocallSDK.ReusableViewType
  public let viewConfigurator: MDVideocallSDK.ReusableViewConfig<Item, Cell>.ViewConfigurator
  public init(reuseIdentifier: Swift.String, type: MDVideocallSDK.ReusableViewType = .cell, viewConfigurator: @escaping MDVideocallSDK.ReusableViewConfig<Item, Cell>.ViewConfigurator)
  public func reuseIdentiferFor(item _: Item?, type _: MDVideocallSDK.ReusableViewType, indexPath _: Foundation.IndexPath) -> Swift.String
  public func configure(view: Cell, item: Item?, type: MDVideocallSDK.ReusableViewType, parentView: Cell.ParentView, indexPath: Foundation.IndexPath) -> Cell
  public typealias View = Cell
}
public enum MeetingDoctorsVideoCallStatus {
  case assigned(MDVideocallSDK.VideoCallProfessionalModel)
  case unknown
}
extension MDVideocallSDK.MeetingDoctorsVideoCallStatus : Swift.Equatable {
  public static func == (a: MDVideocallSDK.MeetingDoctorsVideoCallStatus, b: MDVideocallSDK.MeetingDoctorsVideoCallStatus) -> Swift.Bool
}
public struct AlamofireProfessionalListAdapter : MDVideocallSDK.ProfessionalListAdapter {
  public func requestProfessionalDetail(_ professionalHash: Swift.String) -> RxSwift.Single<MDVideocallSDK.ContactSchema>
}
extension MDVideocallSDK.MeetingDoctors {
  final public class func getMyHealthMainViewController() -> MDVideocallSDK.MeetingDoctorsResult<UIKit.UIViewController>
}
public struct ProductSchema : MDVideocallSDK.MedicalDirectorySchema {
  public let id: Swift.UInt
  public let name: Swift.String
  public init(id: Swift.UInt, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ProductSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ProductSchema, rhs: MDVideocallSDK.ProductSchema) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class MDASessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set
  }
  open subscript(task: Foundation.URLSessionTask) -> MDVideocallSDK.MDARequest? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension MDVideocallSDK.MDASessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension MDVideocallSDK.MDASessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
}
extension MDVideocallSDK.MDASessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension MDVideocallSDK.MDASessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
extension MDVideocallSDK.MDASessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
public class JsonLoader : MDVideocallSDK.Loader<Foundation.URL, [Swift.String : Any]> {
  public init(_ loader: MDVideocallSDK.Loader<Foundation.URL, Foundation.Data>)
  @_semantics("optimize.sil.never") override public func load(_ source: Foundation.URL) -> [Swift.String : Any]?
  @objc deinit
}
extension MDVideocallSDK.SocketClientStatus {
  public static func wrap(from rawValue: SocketIO.SocketIOStatus?) -> MDVideocallSDK.SocketClientStatus?
}
public struct VideoCallConsultationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case videoCallId
    case tokenId
    case sessionId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let videoCallId: Swift.Int?
  public let tokenId: Swift.String?
  public let sessionId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallConsultationSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallConsultationSchema, b: MDVideocallSDK.VideoCallConsultationSchema) -> Swift.Bool
}
public enum ContactRoleModel : Swift.String {
  case unknown
  case commercial
  case administrative
  case doctor
  case support
  case free
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AlamofireMedicalHistoryAdapter<E> : MDVideocallSDK.MedicalHistoryAdapter where E : MDVideocallSDK.MedicalHistorySchema {
  public init(session: MDVideocallSDK.SessionAdapter, operation: MDVideocallSDK.MedicalHistoryOperation)
  public func fetch(by id: Swift.String) -> RxSwift.Single<E?>
  public func fetch() -> RxSwift.Single<[E]>
  public func save(entity: E, update: Swift.Bool = false) -> RxSwift.Single<E>
  public func delete(entity: E) -> RxSwift.Completable
  public typealias SchemaType = E
}
public struct AlamofireIdentifiableAdapter<E> : MDVideocallSDK.IdentifiableAdapter where E : MDVideocallSDK.IdentifiableSchema {
  public init(session: MDVideocallSDK.SessionAdapter, operation: MDVideocallSDK.MedicalHistoryOperation)
  public func fetch(by id: Swift.String) -> RxSwift.Single<E?>
  public func fetch() -> RxSwift.Single<[E]>
  public func save(entity: E, update: Swift.Bool = false) -> RxSwift.Single<E>
  public func delete(entity: E) -> RxSwift.Completable
  public typealias SchemaType = E
}
public enum ScheduleAvailabilityModel : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case holidays
  case now
  case soon
  case tomorrow
  case forthcoming
  public func next() -> MDVideocallSDK.ScheduleAvailabilityModel
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelId: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
public struct NativeSocketInputStream : MDVideocallSDK.SocketInputStream {
  public let name: Swift.String
  public init(client: SocketIO.SocketIOClient, event: MDVideocallSDK.SocketListenerType)
  public init(client: SocketIO.SocketIOClient, event: SocketIO.SocketClientEvent)
  public func on() -> RxSwift.Observable<[Any]>
  public typealias EventType = [Any]
}
public enum VideoCallWorkflow : Swift.String, Swift.Codable {
  case oneToOne
  case pull
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VideoCallSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case workflow
    case roomId
    case professionalHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int
  public let workflow: MDVideocallSDK.VideoCallWorkflow?
  public let roomId: Swift.Int?
  public let professionalHash: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallSchema, b: MDVideocallSDK.VideoCallSchema) -> Swift.Bool
}
extension MDVideocallSDK.CustomerInstallationModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.CustomerInstallationEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.CustomerInstallationEntity) throws
  public typealias ManagedObject = MDVideocallSDK.CustomerInstallationEntity
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDScrollView : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_: Swift.Set<UIKit.UITouch>, with _: UIKit.UIEvent?)
  @objc deinit
}
public class AcceptJSONRequestInterceptor : MDVideocallSDK.MDARequestAdapter {
  public init()
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AvatarView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
final public class MDDefaultDataTransferService {
  public init(networkService: MDVideocallSDK.MDNetworkServiceProtocol = MDDefaultNetworkService())
  @objc deinit
}
extension MDVideocallSDK.MDDefaultDataTransferService : MDVideocallSDK.MDDataTransferServiceProtocol {
  final public func request<T, E>(endpoint: E, completion: @escaping MDVideocallSDK.MDDefaultDataTransferService.CompletionHandler<T>) -> MDVideocallSDK.MDNetworkCancellableProtocol? where T : Swift.Decodable, T : Swift.Encodable, T == E.Response, E : MDVideocallSDK.MDRequestableProtocol, E : MDVideocallSDK.MDResponseDecoderProtocol
}
public struct ConversationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case lastMessage
    case pendingMessages
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int
  public let lastMessage: MDVideocallSDK.LastMessageSchema?
  public let pendingMessages: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ConversationSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.ConversationSchema, rhs: MDVideocallSDK.ConversationSchema) -> Swift.Bool
}
public protocol NibLoadable : AnyObject {
  static var nibName: Swift.String { get }
  static func instantiate() -> Self
}
extension MDVideocallSDK.NibLoadable where Self : UIKit.UIView {
  public static var nibName: Swift.String {
    get
  }
  public static func instantiate() -> Self
}
@objc @_inheritsConvenienceInitializers public class MessageEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var room: Swift.String?
  @objc dynamic public var sender: Swift.String?
  @objc dynamic public var content: Swift.String?
  final public let conversation: RealmSwift.LinkingObjects<MDVideocallSDK.ConversationEntity>
  final public let timestamp: RealmSwift.RealmOptional<Foundation.TimeInterval>
  final public let width: RealmSwift.RealmOptional<Swift.Int>
  final public let height: RealmSwift.RealmOptional<Swift.Int>
  final public let size: RealmSwift.RealmOptional<Swift.Int>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.MessageEntity {
  public enum Attributes : MDVideocallSDK.AttributeValueType {
    public var parameter: MDVideocallSDK.AttributeValue {
      get
    }
    case id(Swift.String)
    case room(Swift.String)
    case sender(Swift.String)
    case content(Swift.String)
    case statusValue(Swift.String)
    case kindValue(Swift.String)
    case attachmentValue(Swift.String)
    case thumbnailValue(Swift.String)
    case timestamp(Foundation.TimeInterval)
    case width(Swift.Int)
    case height(Swift.Int)
    case size(Swift.Int)
  }
}
extension MDVideocallSDK.MessageEntity {
  public enum Status : Swift.String {
    case pending
    case sent
    case delivered
    case received
    case read
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var status: MDVideocallSDK.MessageEntity.Status? {
    get
    set
  }
}
extension MDVideocallSDK.MessageEntity {
  public enum Kind : Swift.String {
    case text
    case image
    case file
    case note
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var kind: MDVideocallSDK.MessageEntity.Kind? {
    get
    set
  }
}
extension MDVideocallSDK.MessageEntity {
  public var attachment: Foundation.URL? {
    get
    set
  }
}
extension MDVideocallSDK.MessageEntity {
  public var thumbnail: Foundation.URL? {
    get
    set
  }
}
extension MDVideocallSDK.MDHTTP {
  public enum Method : Swift.String {
    case options
    case get
    case head
    case post
    case put
    case patch
    case delete
    case trace
    case connect
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol CustomerNotificationsControllerProtocol {
  func register(_ token: Swift.String) -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  func unregister() -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
}
public class CustomerNotificationsController : MDVideocallSDK.CustomerNotificationsControllerProtocol {
  public init(installation: MDVideocallSDK.CustomerInstallationControllerProtocol, auth: MDVideocallSDK.CustomerAuthControllerProtocol, remote: MDVideocallSDK.RemoteController, scheduler: RxSwift.ImmediateSchedulerType)
  public func register(_ token: Swift.String) -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  public func unregister() -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  @objc deinit
}
public struct DeletedSchema : Swift.Codable {
  public let message: Swift.String
  public init(message: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UserRegistrationStatusModel : Swift.String {
  case unknown
  case freemium
  case processing
  case formalized
  case canceled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.UserSchema.RegistrationStatus {
  public var model: MDVideocallSDK.UserRegistrationStatusModel {
    get
  }
}
extension UIKit.UIFont.Weight {
  public var toInt: Swift.Int {
    get
  }
}
public struct MDSegmentedControlAppearance {
  public var backgroundColor: UIKit.UIColor
  public var selectedBackgroundColor: UIKit.UIColor
  public var unselectedTextAttributes: [Foundation.NSAttributedString.Key : Any]?
  public var selectedTextAttributes: [Foundation.NSAttributedString.Key : Any]?
  public var bottomLineColor: UIKit.UIColor
  public var selectorColor: UIKit.UIColor
  public var bottomLineHeight: CoreFoundation.CGFloat
  public var selectorHeight: CoreFoundation.CGFloat
  public var itemTopPadding: CoreFoundation.CGFloat
  public var selectorOffsetFromLabel: CoreFoundation.CGFloat?
  public var selectorSpansFullItemWidth: Swift.Bool
  public var labelsOnEndsFloatToEdges: Swift.Bool
}
public protocol MDSegmentedControlDelegate : AnyObject {
  func segmentedControl(_ segmentedControl: MDVideocallSDK.MDSegmentedControlView, willPressItemAt index: Swift.Int)
  func segmentedControl(_ segmentedControl: MDVideocallSDK.MDSegmentedControlView, didPressItemAt index: Swift.Int)
}
extension MDVideocallSDK.MDSegmentedControlDelegate {
  public func segmentedControl(_: MDVideocallSDK.MDSegmentedControlView, willPressItemAt _: Swift.Int)
  public func segmentedControl(_: MDVideocallSDK.MDSegmentedControlView, didPressItemAt _: Swift.Int)
}
public typealias MDSegmentedControlAction = (_ segmentedControl: MDVideocallSDK.MDSegmentedControlView, _ index: Swift.Int) -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) public class MDSegmentedControlView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var action: MDVideocallSDK.MDSegmentedControlAction?
  @_Concurrency.MainActor(unsafe) public var appearance: MDVideocallSDK.MDSegmentedControlAppearance! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titles: [Swift.String]! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect = .zero, titles: [Swift.String] = [], action: MDVideocallSDK.MDSegmentedControlAction? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func selectItem(at index: Swift.Int, withAnimation animation: Swift.Bool)
  @objc deinit
}
@objc public enum FloatyItemLabelPositionType : Swift.Int {
  case left
  case right
  case top
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class FloatyItem : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var size: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var buttonColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var hasShadow: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var circleShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var titleShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var handler: ((MDVideocallSDK.FloatyItem) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var imageOffset: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var imageSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) weak open var actionButton: MDVideocallSDK.Floaty?
  @objc @_Concurrency.MainActor(unsafe) open var titleLabelPosition: MDVideocallSDK.FloatyItemLabelPositionType {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var iconImageView: UIKit.UIImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var icon: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var iconTintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var itemBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public protocol TModel {
}
extension MDVideocallSDK.MeetingDoctorsResult {
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension MDVideocallSDK.MeetingDoctorsResult {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> MDVideocallSDK.MeetingDoctorsResult<T>
  public func compactMap<T>(_ transform: (Value) throws -> T) -> MDVideocallSDK.MeetingDoctorsResult<T>
}
public class NamedProperty<T> : MDVideocallSDK.Property {
  final public let name: Swift.String
  public var value: T?
  public init(_ name: Swift.String, default value: T? = nil)
  public typealias ValueType = T
  @objc deinit
}
public protocol Assembler {
  associatedtype Component
  func resolve() -> Self.Component?
}
public struct MessengerRemoteNotificationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case professional
    case link
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let professional: MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema?
  public let link: Swift.String?
  public let type: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MessengerRemoteNotificationSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MessengerRemoteNotificationSchema, rhs: MDVideocallSDK.MessengerRemoteNotificationSchema) -> Swift.Bool
}
public enum MessengerRemoteNotificationType : Swift.String {
  case messageCreated
  case openLink
  case ratingRequest
  case silent
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.MessengerRemoteNotificationSchema {
  public var notificationType: MDVideocallSDK.MessengerRemoteNotificationType {
    get
  }
  public var linkURL: Foundation.URL? {
    get
  }
}
public struct MessengerProfessionalRemoteNotificationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case hash
    case specialityID
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let hash: Swift.String?
  public let specialityID: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema, b: MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema) -> Swift.Bool
}
public protocol MedicalHistoryOperation {
  var endpoint: MDVideocallSDK.Endpoint { get }
  var noun: Swift.String { get }
  func fetch(by id: Swift.String) -> MDVideocallSDK.Routable
  func fetch() -> MDVideocallSDK.Routable
  func save() -> MDVideocallSDK.Routable
  func update(by id: Swift.String) -> MDVideocallSDK.Routable
  func delete(by id: Swift.String) -> MDVideocallSDK.Routable
}
extension MDVideocallSDK.MedicalHistoryOperation {
  public func fetch(by id: Swift.String) -> MDVideocallSDK.Routable
  public func fetch() -> MDVideocallSDK.Routable
  public func save() -> MDVideocallSDK.Routable
  public func update(by id: Swift.String) -> MDVideocallSDK.Routable
  public func delete(by id: Swift.String) -> MDVideocallSDK.Routable
}
public struct AllergyOperation : MDVideocallSDK.MedicalHistoryOperation {
  public let endpoint: MDVideocallSDK.Endpoint
  public let noun: Swift.String
  public init(_ endpoint: MDVideocallSDK.Endpoint)
}
public struct DiseaseOperation : MDVideocallSDK.MedicalHistoryOperation {
  public let endpoint: MDVideocallSDK.Endpoint
  public let noun: Swift.String
  public init(_ endpoint: MDVideocallSDK.Endpoint)
}
public struct MedicationOperation : MDVideocallSDK.MedicalHistoryOperation {
  public let endpoint: MDVideocallSDK.Endpoint
  public let noun: Swift.String
  public init(_ endpoint: MDVideocallSDK.Endpoint)
}
public struct ImcOperation : MDVideocallSDK.MedicalHistoryOperation {
  public let endpoint: MDVideocallSDK.Endpoint
  public let noun: Swift.String
  public init(_ endpoint: MDVideocallSDK.Endpoint)
}
public struct VideoCallReportOperation : MDVideocallSDK.MedicalHistoryOperation {
  public let endpoint: MDVideocallSDK.Endpoint
  public let noun: Swift.String
  public init(_ endpoint: MDVideocallSDK.Endpoint)
}
@_inheritsConvenienceInitializers public class UserDefaultsProperty<T> : MDVideocallSDK.NamedProperty<T> where T : Swift.Decodable, T : Swift.Encodable {
  public enum Keys : Swift.String {
    case jwt
    case event
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  convenience public init(_ key: MDVideocallSDK.UserDefaultsProperty<T>.Keys, default value: T? = nil)
  convenience override public init(_ name: Swift.String, default value: T? = nil)
  public init(_ name: Swift.String, store: Foundation.UserDefaults = UserDefaults.standard, mapper: MDVideocallSDK.CodableMapper = PropertyListMapper(), default value: T? = nil)
  override public var value: T? {
    get
    set
  }
  @objc deinit
}
public protocol ErrorDataResponseSerializerProtocol : MDVideocallSDK.MDADataResponseSerializerProtocol {
  associatedtype ErrorType
  var serializeError: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> MDVideocallSDK.MDAResult<Self.ErrorType> { get }
}
extension UIKit.UIFont {
  public enum S10 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S11 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S12 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S14 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S16 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S17 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S18 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S20 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S22 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S24 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w500: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S25 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S30 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
  public enum S32 {
    public static let w100: UIKit.UIFont
    public static let w200: UIKit.UIFont
    public static let w300: UIKit.UIFont
    public static let w400: UIKit.UIFont
    public static let w600: UIKit.UIFont
    public static let w700: UIKit.UIFont
    public static let w800: UIKit.UIFont
    public static let w900: UIKit.UIFont
  }
}
public struct AnyMedicalHistoryListControllerType<ElementModel> : MDVideocallSDK.MedicalHistoryListControllerType where ElementModel : MDVideocallSDK.Transmittable {
  public init<Concrete>(_ concrete: Concrete) where ElementModel == Concrete.ElementModel, Concrete : MDVideocallSDK.MedicalHistoryListControllerType
  public func fetch(patient hash: Swift.String) -> RxSwift.Observable<([ElementModel], MDVideocallSDK.Changeset?)>
}
public enum VideoStatusModel : Swift.String, Swift.Codable {
  case invisible
  case videoAvailable
  case busy
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol PaginableRequest : Swift.Decodable, Swift.Encodable {
  var page: Swift.UInt? { get }
  var itemsPerPage: Swift.UInt? { get }
}
extension MDVideocallSDK.PaginableRequest {
  public var page: Swift.UInt? {
    get
  }
  public var itemsPerPage: Swift.UInt? {
    get
  }
}
public struct PageRequest : MDVideocallSDK.PaginableRequest {
  public static let `default`: MDVideocallSDK.PageRequest
  public let page: Swift.UInt?
  public let itemsPerPage: Swift.UInt?
  public init(page: Swift.UInt? = nil, itemsPerPage: Swift.UInt? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
extension MDVideocallSDK.ConversationSchema : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.ConversationEntity {
    get
  }
  public init(managedObject _: MDVideocallSDK.ConversationEntity) throws
  public typealias ManagedObject = MDVideocallSDK.ConversationEntity
}
public protocol IMCModelType {
  var id: Swift.String { get }
  var weight: Swift.Int? { get }
  var height: Swift.Int? { get }
  var value: Swift.Float? { get }
  var patientHash: Swift.String { get }
  var updatedAt: Foundation.Date? { get }
  var createdAt: Foundation.Date? { get }
}
public struct IMCModel : MDVideocallSDK.IMCModelType {
  public static let Stub: MDVideocallSDK.IMCModel
  public let id: Swift.String
  public let weight: Swift.Int?
  public let height: Swift.Int?
  public let value: Swift.Float?
  public let patientHash: Swift.String
  public let updatedAt: Foundation.Date?
  public let createdAt: Foundation.Date?
  public init(id: Swift.String, weight: Swift.Int?, height: Swift.Int?, value: Swift.Float?, patientHash: Swift.String, updatedAt: Foundation.Date?, createdAt: Foundation.Date?)
}
extension MDVideocallSDK.IMCModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.IMCModel, rhs: MDVideocallSDK.IMCModel) -> Swift.Bool
}
extension MDVideocallSDK.IMCModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.IMCSchema
  public var schemaObject: MDVideocallSDK.IMCSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.IMCSchema) throws
}
extension MDVideocallSDK.IMCModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Swift.String>
  public static let weightLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Swift.Int?>
  public static let heightLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Swift.Int?>
  public static let valueLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Swift.Float?>
  public static let patientHashLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Swift.String>
  public static let updatedAtLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Foundation.Date?>
  public static let createdAtLens: MDVideocallSDK.Lens<MDVideocallSDK.IMCModel, Foundation.Date?>
}
extension Swift.PartialKeyPath where Root == MDVideocallSDK.IMCModel {
  public var stringValue: Swift.String {
    get
  }
}
public protocol MeetingDoctorsFilterType {
  var profiles: [MDVideocallSDK.MeetingDoctorsRole] { get }
  var limit: Swift.Int { get }
  var excludeRoles: Swift.Bool { get }
}
public struct MeetingDoctorsFilter : MDVideocallSDK.MeetingDoctorsFilterType {
  public static let `default`: MDVideocallSDK.MeetingDoctorsFilter
  public static let none: MDVideocallSDK.MeetingDoctorsFilter
  public let profiles: [MDVideocallSDK.MeetingDoctorsRole]
  public let limit: Swift.Int
  public let excludeRoles: Swift.Bool
  public init(profiles: [MDVideocallSDK.MeetingDoctorsRole] = MeetingDoctorsRole.none, take limit: Swift.Int = 0, excludeRoles: Swift.Bool = true)
}
public protocol CustomerInstallationModelProtocol {
  var id: Swift.String { get }
  var installationGuid: Swift.String { get }
  var pushToken: Swift.String? { get }
}
public struct CustomerInstallationModel : MDVideocallSDK.CustomerInstallationModelProtocol {
  public let id: Swift.String
  public let installationGuid: Swift.String
  public var pushToken: Swift.String?
  public init(id: Swift.String, installationGuid: Swift.String, pushToken: Swift.String?)
}
extension MDVideocallSDK.CustomerInstallationModel {
  public init(id: Swift.String, schema: MDVideocallSDK.CustomerInstallationSchema)
}
extension MDVideocallSDK.CustomerInstallationModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerInstallationModel, Swift.String>
  public static let installationGuidLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerInstallationModel, Swift.String>
  public static let pushTokenLens: MDVideocallSDK.Lens<MDVideocallSDK.CustomerInstallationModel, Swift.String?>
}
extension MDVideocallSDK.CustomerInstallationModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.CustomerInstallationModel, b: MDVideocallSDK.CustomerInstallationModel) -> Swift.Bool
}
public struct InboxHeaderCellViewModel {
}
public enum NetworkType {
  case notReachable
  case unknown
  case ethernetOrWiFi
  case wwan
  public static func == (a: MDVideocallSDK.NetworkType, b: MDVideocallSDK.NetworkType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NetworkMonitorType : AnyObject {
  var isReachable: Swift.Bool? { get }
  func startMonitoring()
  func stopMonitoring()
  func updateMonitor(completion: @escaping (MDVideocallSDK.NetworkType) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class NetworkMonitor : MDVideocallSDK.NetworkMonitorType {
  public static let sharedInstance: MDVideocallSDK.NetworkMonitor
  @objc deinit
  final public var isReachable: Swift.Bool? {
    get
  }
  final public func startMonitoring()
  final public func stopMonitoring()
  final public func updateMonitor(completion: @escaping (MDVideocallSDK.NetworkType) -> Swift.Void)
}
public protocol MedicalCoverageModelType {
  var id: Swift.String { get }
  var name: Swift.String { get }
}
public struct MedicalCoverageModel : MDVideocallSDK.MedicalCoverageModelType {
  public let id: Swift.String
  public let name: Swift.String
  public init(id: Swift.String, name: Swift.String)
}
extension MDVideocallSDK.MedicalCoverageModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicalCoverageSchema
  public var schemaObject: MDVideocallSDK.MedicalCoverageSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.MedicalCoverageSchema) throws
}
extension MDVideocallSDK.DerivationReportModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.DerivationReportEntity
  public var managedObject: MDVideocallSDK.DerivationReportEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.DerivationReportEntity) throws
}
extension MDVideocallSDK.CompanyReportModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.CompanyReportEntity
  public var managedObject: MDVideocallSDK.CompanyReportEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.CompanyReportEntity) throws
}
extension MDVideocallSDK.ProfessionalReportModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.ProfessionalReportEntity
  public var managedObject: MDVideocallSDK.ProfessionalReportEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.ProfessionalReportEntity) throws
}
public enum ScheduleWeekDayModel : Swift.String {
  case unknown
  case sunday
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDPrimaryButton {
  public struct ButtonAction {
  }
  @_hasMissingDesignatedInitializers public class Builder {
    @discardableResult
    public func with(text: Swift.String?) -> MDVideocallSDK.MDPrimaryButton.Builder
    @discardableResult
    public func with(backgroundColor: UIKit.UIColor?) -> MDVideocallSDK.MDPrimaryButton.Builder
    @discardableResult
    public func with(height: CoreFoundation.CGFloat?) -> MDVideocallSDK.MDPrimaryButton.Builder
    @discardableResult
    public func with(isEnabled: Swift.Bool?) -> MDVideocallSDK.MDPrimaryButton.Builder
    @discardableResult
    public func with(target: Any?, selector: ObjectiveC.Selector, controlEvent: UIKit.UIControl.Event) -> MDVideocallSDK.MDPrimaryButton.Builder
    @discardableResult
    public func with(buttonAction: MDVideocallSDK.MDPrimaryButton.ButtonAction) -> MDVideocallSDK.MDPrimaryButton.Builder
    public func build() -> MDVideocallSDK.MDPrimaryButton
    @objc deinit
  }
}
open class MDAMultipartFormData {
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  public var boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: MDVideocallSDK.MDAHTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
public enum SocketStreamError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  public enum EventDecodingFailureReason {
    case unexpectedResponseFormat(event: Swift.String, data: [Any])
    case undefinedAckTransformation
  }
  public enum SocketFailureReason {
    case emitFailed(event: Swift.String, items: [Any], underlyingError: Swift.Error)
    case ackFailed(ack: Swift.Int, items: [Any], underlyingError: Swift.Error)
    case ackNotFound
    case description(reason: Swift.String)
    case unknown
  }
  public enum StreamFailureReason {
    case factoryMethodFailed
    case illegalStreamState
    public static func == (a: MDVideocallSDK.SocketStreamError.StreamFailureReason, b: MDVideocallSDK.SocketStreamError.StreamFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case eventDecodingFailed(reason: MDVideocallSDK.SocketStreamError.EventDecodingFailureReason)
  case socketFailed(reason: MDVideocallSDK.SocketStreamError.SocketFailureReason)
  case outputStreamFailed(reason: MDVideocallSDK.SocketStreamError.StreamFailureReason)
  case inputStreamFailed(reason: MDVideocallSDK.SocketStreamError.StreamFailureReason)
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension MDVideocallSDK.SocketStreamError {
  public var underlyingError: Swift.Error? {
    get
  }
}
public struct IMCSchema : MDVideocallSDK.IdentifiableSchema {
  public let id: Swift.UInt
  public let weight: Swift.Int
  public let height: Swift.Int
  public let value: Swift.Float
  public let patientHash: Swift.String?
  public let updatedAt: Foundation.Date?
  public let createdAt: Foundation.Date?
  public init(id: Swift.UInt, weight: Swift.Int, height: Swift.Int, value: Swift.Float, patientHash: Swift.String?, updatedAt: Foundation.Date?, createdAt: Foundation.Date?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.IMCSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.IMCSchema, rhs: MDVideocallSDK.IMCSchema) -> Swift.Bool
}
extension MDVideocallSDK.ConversationModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.ConversationEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.ConversationEntity) throws
  public typealias ManagedObject = MDVideocallSDK.ConversationEntity
}
public class AlamofireSessionAdapter : MDVideocallSDK.SessionAdapter {
  final public let adapters: MDVideocallSDK.CompositeRequestAdapter?
  final public let mapper: MDVideocallSDK.CodableMapper
  final public let endpoint: MDVideocallSDK.Endpoint
  public init(_ session: MDVideocallSDK.AlamofireSession, endpoint: MDVideocallSDK.Endpoint, mapper: MDVideocallSDK.CodableMapper = JsonMapper())
  public func request<R, S, E>(_ route: MDVideocallSDK.Routable, parameter: R?, error _: E.Type) -> RxSwift.Single<S> where R : Swift.Encodable, S : Swift.Decodable, E : Swift.Decodable, E : Swift.Error
  public func request<R, S, E>(_ route: MDVideocallSDK.Routable, parameter: R?, error _: E.Type, completion: @escaping (Swift.Result<S, Swift.Error>) -> Swift.Void) where R : Swift.Encodable, S : Swift.Decodable, E : Swift.Decodable, E : Swift.Error
  public func append(adapter: MDVideocallSDK.MDARequestAdapter?)
  public func clear()
  @objc deinit
}
public struct MessageSchema {
  public enum Kind : Swift.String, Swift.Codable {
    case text
    case image
    case file
    case note
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.Int, Swift.Codable {
    case pending
    case sent
    case delivered
    case received
    case read
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Metadata {
    case text(content: Swift.String)
    case image(url: Foundation.URL, thumb: Foundation.URL, width: Swift.Int, height: Swift.Int, size: Swift.Int)
    case file(name: Swift.String, url: Foundation.URL, size: Swift.Int)
    case none
  }
  public let id: Swift.String
  public let from: Swift.String
  public let type: MDVideocallSDK.MessageSchema.Kind
  public let conversationId: Swift.Int
  public let status: MDVideocallSDK.MessageSchema.Status
  public let timestamp: Foundation.TimeInterval
  public let metadata: MDVideocallSDK.MessageSchema.Metadata
}
extension MDVideocallSDK.MessageSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case from
    case conversationId
    case createdAt
    case timestamp
    case status
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.MessageSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MessageSchema, rhs: MDVideocallSDK.MessageSchema) -> Swift.Bool
}
extension MDVideocallSDK.MessageSchema.Metadata : Swift.Codable {
  public enum TextCodingKeys : Swift.String, Swift.CodingKey {
    case content
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum ImageCodingKeys : Swift.String, Swift.CodingKey {
    case url
    case thumb
    case width
    case height
    case size
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum FileCodingKeys : Swift.String, Swift.CodingKey {
    case url
    case name
    case size
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.MessageSchema.Metadata : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MessageSchema.Metadata, rhs: MDVideocallSDK.MessageSchema.Metadata) -> Swift.Bool
}
extension MDVideocallSDK.MedicationModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.MedicationEntity
  public var managedObject: MDVideocallSDK.MedicationEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.MedicationEntity) throws
}
public struct AnyNavigatable<Destination> : MDVideocallSDK.Navigatable {
  public init<Concrete>(_ concrete: Concrete) where Destination == Concrete.Destination, Concrete : MDVideocallSDK.Navigatable
  public func navigate(to destination: Destination)
}
public protocol VideoCall1to1Adapter {
  func requestVideoCall1to1(_ professionalHash: Swift.String) -> RxSwift.Single<MDVideocallSDK.VideoCall1to1Schema>
  func cancel(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  func send(error: MDVideocallSDK.ErrorBodyModel, videoconsultation id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.ErrorSchema>
}
public enum MDAResult<Value> {
  case success(Value)
  case failure(Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension MDVideocallSDK.MDAResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDAResult : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDAResult {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> MDVideocallSDK.MDAResult<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> MDVideocallSDK.MDAResult<T>
  public func mapError<T>(_ transform: (Swift.Error) -> T) -> MDVideocallSDK.MDAResult<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (Swift.Error) throws -> T) -> MDVideocallSDK.MDAResult<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) throws -> Swift.Void) rethrows -> MDVideocallSDK.MDAResult<Value>
  @discardableResult
  public func withError(_ closure: (Swift.Error) throws -> Swift.Void) rethrows -> MDVideocallSDK.MDAResult<Value>
  @discardableResult
  public func ifSuccess(_ closure: () throws -> Swift.Void) rethrows -> MDVideocallSDK.MDAResult<Value>
  @discardableResult
  public func ifFailure(_ closure: () throws -> Swift.Void) rethrows -> MDVideocallSDK.MDAResult<Value>
}
public struct CustomerUserSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case hash
    case token
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let hash: Swift.String
  public let token: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerUserSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.CustomerUserSchema, rhs: MDVideocallSDK.CustomerUserSchema) -> Swift.Bool
}
extension Foundation.NSAttributedString {
  public func size(maxWidth: CoreFoundation.CGFloat, font: UIKit.UIFont? = nil) -> CoreFoundation.CGSize
}
public enum MeetingDoctorsSaturation : Swift.String {
  case high
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SocketEventType {
  var name: Swift.String { get }
}
public enum SocketEmissionType : Swift.String, MDVideocallSDK.SocketEventType {
  case contacts
  case joinConversation
  case leaveConverstation
  case message
  case messageList
  case messageStatus
  case startTyping
  case stopTyping
  case deleteConversation
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SocketListenerType : Swift.String, MDVideocallSDK.SocketEventType {
  case update
  case contacts
  case joinConversation
  case message
  case messageList
  case messageStatus
  case startTyping
  case stopTyping
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.SocketListenerType {
  public func decode(_ decoder: MDVideocallSDK.CodableMapper, data: Foundation.Data) throws -> MDVideocallSDK.SocketClientSchema.Input
}
extension MDVideocallSDK.SocketEmissionType {
  public var ackTransformation: MDVideocallSDK.SocketListenerType? {
    get
  }
}
public protocol MedicalHistoryAdapter {
  associatedtype SchemaType : MDVideocallSDK.MedicalHistorySchema
  func fetch(by id: Swift.String) -> RxSwift.Single<Self.SchemaType?>
  func fetch() -> RxSwift.Single<[Self.SchemaType]>
  func save(entity: Self.SchemaType, update: Swift.Bool) -> RxSwift.Single<Self.SchemaType>
  func delete(entity: Self.SchemaType) -> RxSwift.Completable
}
public protocol IdentifiableAdapter {
  associatedtype SchemaType : MDVideocallSDK.IdentifiableSchema
  func fetch(by id: Swift.String) -> RxSwift.Single<Self.SchemaType?>
  func fetch() -> RxSwift.Single<[Self.SchemaType]>
  func save(entity: Self.SchemaType, update: Swift.Bool) -> RxSwift.Single<Self.SchemaType>
  func delete(entity: Self.SchemaType) -> RxSwift.Completable
}
public enum LogLevel : Swift.String, Swift.Codable {
  case off
  case error
  case warning
  case info
  case debug
  case verbose
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class AlamofireCustomerAuthAdapter : MDVideocallSDK.CustomerAuthAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func login(_ request: MDVideocallSDK.CustomerLoginRequest) -> RxSwift.Single<MDVideocallSDK.CustomerAuthSchema>
  public func login(_ request: MDVideocallSDK.CustomerLoginRequest, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerAuthSchema, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public protocol MDNetworkCancellableProtocol {
  func cancel()
}
extension Foundation.URLSessionTask : MDVideocallSDK.MDNetworkCancellableProtocol {
}
public class MDVideocallJoinRequestModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIImage {
  public func croppedImage(bounds: CoreFoundation.CGRect) -> UIKit.UIImage
  public func thumbnailImage(thumbnailSize: Swift.Int, transparentBorder _: Swift.Int, cornerRadius _: Swift.Int, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public func resizedImage(newSize: CoreFoundation.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public func resizedImageWithContentMode(contentMode: UIKit.UIView.ContentMode, bounds: CoreFoundation.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public func resizedImage(newSize: CoreFoundation.CGSize, transform: CoreFoundation.CGAffineTransform, drawTransposed transpose: Swift.Bool, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public func transformForOrientation(newSize: CoreFoundation.CGSize) -> CoreFoundation.CGAffineTransform
  public func resizedData(maxCount: Swift.Int = 512) -> (Foundation.Data?, CoreFoundation.CGSize)
  public func withShadow(blur: CoreFoundation.CGFloat = 10, offset: CoreFoundation.CGSize = .zero, color: UIKit.UIColor = UIColor(white: 0, alpha: 0.8)) -> UIKit.UIImage
}
public struct MedicalSpecialityRequest : MDVideocallSDK.PaginableRequest {
  public let categoryId: Swift.String
  public let page: Swift.UInt?
  public let itemsPerPage: Swift.UInt?
  public init(categoryId: Swift.String, page: MDVideocallSDK.PageRequest = PageRequest.default)
  public init(categoryId: Swift.String, page: Swift.UInt?, itemsPerPage: Swift.UInt?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerAuthModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.CustomerAuthEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.CustomerAuthEntity) throws
  public typealias ManagedObject = MDVideocallSDK.CustomerAuthEntity
}
public enum MeetingDoctorsDeeplinkOption {
  case messenger(option: MDVideocallSDK.MessengerDeeplinkOption)
  case videoCall
  case myHealth(option: MDVideocallSDK.MyHealthDeeplinkOption)
  case unknown
}
extension MDVideocallSDK.MeetingDoctorsDeeplinkOption : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MeetingDoctorsDeeplinkOption, rhs: MDVideocallSDK.MeetingDoctorsDeeplinkOption) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class CustomerAuthEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var accessToken: Swift.String?
  @objc dynamic public var tokenType: Swift.String?
  @objc dynamic public var user: MDVideocallSDK.CustomerUserEntity?
  public var expiresIn: RealmSwift.RealmOptional<Swift.Double>
  @objc dynamic public var updatedAt: Foundation.Date?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.CustomerAuthEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case accessToken
    case tokenType
    case user
    case expiresIn
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers public class IMCEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  final public let weight: RealmSwift.RealmProperty<Swift.Int?>
  final public let height: RealmSwift.RealmProperty<Swift.Int?>
  final public let value: RealmSwift.RealmProperty<Swift.Float?>
  @objc dynamic public var patientHash: Swift.String?
  @objc dynamic public var updatedAt: Foundation.Date?
  @objc dynamic public var createdAt: Foundation.Date?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.IMCEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case weight
    case height
    case value
    case patientHash
    case updatedAt
    case createdAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public struct RemoteConfiguration {
  public typealias AuthRequest = () -> MDVideocallSDK.AuthType
  public let defaultHeaders: MDVideocallSDK.MDAHTTPHeaders
  public let timeout: Swift.Int
  public let retryAttempts: Swift.Int
  public let authAttempt: MDVideocallSDK.RemoteConfiguration.AuthRequest
  public init(baseUrl: Swift.String, defaultHeaders: MDVideocallSDK.MDAHTTPHeaders = [:], timeout: Swift.Int = 30, retryAttempts: Swift.Int = 1, authAttempt: @escaping MDVideocallSDK.RemoteConfiguration.AuthRequest = { return .none })
  public var session: MDVideocallSDK.MDASessionManager {
    mutating get
    set
  }
}
public class SocketNativeStream : MDVideocallSDK.SocketStream {
  public var error: RxSwift.Observable<[Any]> {
    get
  }
  public var status: RxSwift.Observable<[Any]> {
    get
  }
  public init(manager: SocketIO.SocketManager, timeout: Foundation.TimeInterval = 10)
  public func connect<Credentials>(credentials: Credentials?) -> RxSwift.Observable<[Any]> where Credentials : MDVideocallSDK.SocketCredentials
  public func disconnect() -> RxSwift.Observable<[Any]>
  public func input(stream event: MDVideocallSDK.SocketListenerType) throws -> MDVideocallSDK.AnySocketInputStream<[Any]>
  public func output(stream event: MDVideocallSDK.SocketEmissionType) throws -> MDVideocallSDK.AnySocketOutputStream<SocketIO.SocketData>
  public func join(namespace _: Swift.String)
  public func leave()
  public func clear()
  public typealias SocketInputType = [Any]
  public typealias SocketNativeType = [Any]
  public typealias SocketOutputType = SocketIO.SocketData
  @objc deinit
}
public struct SetupSchema : Swift.Codable {
  public let maxOnlineCommercials: Swift.Int?
  public let minAppVersion: Swift.Int
  public let referrer: Swift.String?
  public let medicalHistory: MDVideocallSDK.MedicalHistory?
  public let termsUrl: Swift.String?
  public let privacyUrl: Swift.String?
  public let videoCall: MDVideocallSDK.MDVideocallModel?
  public let professionalList: [MDVideocallSDK.SetupProfessionalListSchema]?
  public let feed: MDVideocallSDK.MDFeedModel?
  public static var lastSetup: MDVideocallSDK.SetupSchema? {
    get
    set
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.SetupSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.SetupSchema, rhs: MDVideocallSDK.SetupSchema) -> Swift.Bool
}
public struct MedicalHistory : Swift.Codable {
  public let active: Swift.Bool
  public let options: MDVideocallSDK.OptionsSchema
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MedicalHistory : Swift.Equatable {
  public static func == (a: MDVideocallSDK.MedicalHistory, b: MDVideocallSDK.MedicalHistory) -> Swift.Bool
}
public struct OptionsSchema : Swift.Codable {
  public let hasMedicalDerivations: Swift.Bool
  public let hasMedicalReports: Swift.Bool
  public let hasPrescription: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.OptionsSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.OptionsSchema, b: MDVideocallSDK.OptionsSchema) -> Swift.Bool
}
public struct SetupProfessionalListSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case endpoint
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let type: Swift.String?
  public let endpoint: Swift.String?
  public var layoutType: MDVideocallSDK.SetupProfessionalListType? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.SetupProfessionalListSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.SetupProfessionalListSchema, b: MDVideocallSDK.SetupProfessionalListSchema) -> Swift.Bool
}
public enum SetupProfessionalListType : Swift.String {
  case vertical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MDVideocallModel : Swift.Codable {
  public let timeout: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MDVideocallModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.MDVideocallModel, b: MDVideocallSDK.MDVideocallModel) -> Swift.Bool
}
public struct MDFeedModel : Swift.Codable {
  public let hasFeed: Swift.Bool?
  public let homepage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MDFeedModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.MDFeedModel, b: MDVideocallSDK.MDFeedModel) -> Swift.Bool
}
extension CoreLocation.CLLocationCoordinate2D {
  public func calculateBoundingCoordinates(withDistance distance: Swift.Double) -> (CoreLocation.CLLocationCoordinate2D, CoreLocation.CLLocationCoordinate2D)
  public func formatAsLatLonString(withDecimalPlaces places: Swift.Int = 5) -> (Swift.String, Swift.String)
}
public struct AnySocketInputStream<EventType> : MDVideocallSDK.SocketInputStream {
  public var name: Swift.String {
    get
  }
  public init<Concrete>(_ concrete: Concrete) where EventType == Concrete.EventType, Concrete : MDVideocallSDK.SocketInputStream
  public func on() -> RxSwift.Observable<EventType>
}
public struct AnySocketOutputStream<EventType> : MDVideocallSDK.SocketOutputStream {
  public var name: Swift.String {
    get
  }
  public init<Concrete>(_ concrete: Concrete) where EventType == Concrete.EventType, Concrete : MDVideocallSDK.SocketOutputStream
  public func emit(event: EventType) throws
  public func acknowledge(event: EventType) throws -> RxSwift.Single<MDVideocallSDK.SocketClientSchema.Input>
}
public struct AnySocketStream<NativeType, InputType, OutputType> : MDVideocallSDK.SocketStream {
  public typealias SocketNativeType = NativeType
  public typealias SocketInputType = InputType
  public typealias SocketOutputType = OutputType
  public init<Concrete>(_ concrete: Concrete) where NativeType == Concrete.SocketNativeType, InputType == Concrete.SocketInputType, OutputType == Concrete.SocketOutputType, Concrete : MDVideocallSDK.SocketStream
  public func connect<Credentials>(credentials: Credentials?) -> RxSwift.Observable<MDVideocallSDK.AnySocketStream<NativeType, InputType, OutputType>.SocketNativeType> where Credentials : MDVideocallSDK.SocketCredentials
  @discardableResult
  public func disconnect() -> RxSwift.Observable<MDVideocallSDK.AnySocketStream<NativeType, InputType, OutputType>.SocketNativeType>
  public func input(stream event: MDVideocallSDK.SocketListenerType) throws -> MDVideocallSDK.AnySocketInputStream<MDVideocallSDK.AnySocketStream<NativeType, InputType, OutputType>.SocketInputType>
  public func output(stream event: MDVideocallSDK.SocketEmissionType) throws -> MDVideocallSDK.AnySocketOutputStream<MDVideocallSDK.AnySocketStream<NativeType, InputType, OutputType>.SocketOutputType>
  public func join(namespace: Swift.String)
  public func leave()
  public func clear()
  public var error: RxSwift.Observable<MDVideocallSDK.AnySocketStream<NativeType, InputType, OutputType>.SocketNativeType> {
    get
  }
  public var status: RxSwift.Observable<MDVideocallSDK.AnySocketStream<NativeType, InputType, OutputType>.SocketNativeType> {
    get
  }
}
public struct KeyboardNotification {
  public let frameBegin: CoreFoundation.CGRect
  public let frameEnd: CoreFoundation.CGRect
  public let animationDuration: Swift.Double
  public let animationCurve: UIKit.UIView.AnimationCurve
  public let isLocal: Swift.Bool
  public init?(_ notification: Foundation.Notification)
}
public struct TypingSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case conversationId
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let conversationId: Swift.Int
  public let userId: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.TypingSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.TypingSchema, rhs: MDVideocallSDK.TypingSchema) -> Swift.Bool
}
public protocol VideoCallReportModelType {
  var id: Swift.Int { get }
  var pdfUrl: Swift.String? { get }
  var owner: MDVideocallSDK.VideoCallUserModel? { get }
  var maker: MDVideocallSDK.VideoCallUserModel? { get }
  var createdAt: Foundation.Date? { get }
  var updatedAt: Foundation.Date? { get }
}
public struct VideoCallReportModel : MDVideocallSDK.VideoCallReportModelType {
  public let id: Swift.Int
  public let pdfUrl: Swift.String?
  public let owner: MDVideocallSDK.VideoCallUserModel?
  public let maker: MDVideocallSDK.VideoCallUserModel?
  public let createdAt: Foundation.Date?
  public let updatedAt: Foundation.Date?
  public init(id: Swift.Int, pdfUrl: Swift.String?, owner: MDVideocallSDK.VideoCallUserModel?, maker: MDVideocallSDK.VideoCallUserModel?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?)
}
extension MDVideocallSDK.VideoCallReportModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.VideoCallReportModel, rhs: MDVideocallSDK.VideoCallReportModel) -> Swift.Bool
}
extension MDVideocallSDK.VideoCallReportModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.VideoCallReportSchema
  public var schemaObject: MDVideocallSDK.VideoCallReportSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.VideoCallReportSchema) throws
}
extension MDVideocallSDK.VideoCallReportModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallReportModel, Swift.Int>
  public static let pdfUrlLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallReportModel, Swift.String?>
  public static let ownerLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallReportModel, MDVideocallSDK.VideoCallUserModel?>
  public static let makerLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallReportModel, MDVideocallSDK.VideoCallUserModel?>
  public static let createdAtLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallReportModel, Foundation.Date?>
  public static let updatedAtLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallReportModel, Foundation.Date?>
}
public protocol ConversationModelType {
  var id: Swift.String { get }
  var messages: [MDVideocallSDK.MessageModel] { get }
  var lastMessageTimestamp: Foundation.TimeInterval? { get }
}
public struct ConversationModel : MDVideocallSDK.ConversationModelType {
  public let id: Swift.String
  public let messages: [MDVideocallSDK.MessageModel]
  public let lastMessageTimestamp: Foundation.TimeInterval?
  public init(id: Swift.String, messages: [MDVideocallSDK.MessageModel], lastMessageTimestamp: Foundation.TimeInterval?)
}
extension MDVideocallSDK.IMCModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.IMCEntity
  public var managedObject: MDVideocallSDK.IMCEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.IMCEntity) throws
}
public protocol RealmStoreProviderAssembly {
  func resolve() -> MDVideocallSDK.RealmStoreProvider?
}
public class RealmStoreProviderAssembler : MDVideocallSDK.RealmStoreProviderAssembly {
  public init()
  public func resolve() -> MDVideocallSDK.RealmStoreProvider?
  @objc deinit
}
extension MDVideocallSDK.RealmStoreProviderAssembler : MDVideocallSDK.Assembler {
  public typealias Component = MDVideocallSDK.RealmStoreProvider
}
extension Swift.Collection {
  public func toDictionary<K, V>(_ transform: (_ element: Self.Iterator.Element) -> [K : V]) -> [K : V] where K : Swift.Hashable
  public subscript(optional i: Self.Index) -> Self.Iterator.Element? {
    get
  }
}
public enum SpecialityTypeModel : Swift.String, Swift.CaseIterable {
  case unknown
  case generalMedicine
  case pediatrics
  case psychology
  case sportsMedicine
  case customerCare
  case medicalSupport
  case personalTraining
  case commercial
  case medicalAppointment
  case cardiology
  case gynecology
  case pharmacy
  case sexology
  case nutrition
  case fertilityConsultant
  case nursing
  case medicalAdvisor
  case dermatology
  case customerCareIsaludColectivos
  case veterinary
  case ethology
  case doctorGoHealthAdvisor
  case fitnessCoaching
  case nutritionalCoaching
  case animalNutrition
  case medicalManager
  case coachMental
  public static var all: [MDVideocallSDK.SpecialityTypeModel] {
    get
  }
  public static var none: [MDVideocallSDK.SpecialityTypeModel] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [MDVideocallSDK.SpecialityTypeModel]
  public typealias RawValue = Swift.String
  public static var allCases: [MDVideocallSDK.SpecialityTypeModel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension MDVideocallSDK.SpecialityTypeModel {
  public var id: Swift.String {
    get
  }
}
public struct Environment : Swift.Decodable {
  public let endpoint: [MDVideocallSDK.EndpointType : MDVideocallSDK.Endpoint]
  public let requestTimeout: Swift.Int?
  public let logLevel: MDVideocallSDK.LogLevel?
  public let reportCrashes: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.Environment : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.Environment, rhs: MDVideocallSDK.Environment) -> Swift.Bool
}
public protocol MDEventProtocol {
  var eventName: Swift.String { get }
  var eventParameters: [Swift.String : Any]? { get }
}
open class MDEvent : MDVideocallSDK.MDEventProtocol {
  public var eventName: Swift.String
  public var eventParameters: [Swift.String : Any]?
  public init(eventName: Swift.String, eventParameters: [Swift.String : Any]? = nil)
  @objc deinit
}
public struct VideoCallResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let data: MDVideocallSDK.VideoCallSchema
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallResponse : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallResponse, b: MDVideocallSDK.VideoCallResponse) -> Swift.Bool
}
extension Foundation.Date {
  public var isYesterday: Swift.Bool {
    get
  }
}
extension Foundation.Date {
  public var isToday: Swift.Bool {
    get
  }
}
public struct AlamofireDerivationReportAdapter : MDVideocallSDK.DerivationReportAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func fetch() -> RxSwift.Single<[MDVideocallSDK.DerivationReportSchema]>
}
public struct CustomerRegisterNotificationRequest : Swift.Codable {
  public let token: Swift.String
  public let os: Swift.String
  public let deviceId: Swift.String
  public init(token: Swift.String, deviceId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerRegisterNotificationRequest : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.CustomerRegisterNotificationRequest, rhs: MDVideocallSDK.CustomerRegisterNotificationRequest) -> Swift.Bool
}
public protocol MeetingDoctorsStringsType {
  var meetingDoctorsMedicalHistoryStrings: MDVideocallSDK.MeetingDoctorsMedicalHistoryStringsType { get set }
  var meetingDoctorsVideoCallStrings: MDVideocallSDK.MeetingDoctorsVideoCallStringsType { get set }
  var meetingDoctorsProfessionalListStrings: MDVideocallSDK.MeetingDoctorsProfessionalListStringsType { get set }
}
public struct MeetingDoctorsStrings : MDVideocallSDK.MeetingDoctorsStringsType {
  public var meetingDoctorsMedicalHistoryStrings: MDVideocallSDK.MeetingDoctorsMedicalHistoryStringsType
  public var meetingDoctorsVideoCallStrings: MDVideocallSDK.MeetingDoctorsVideoCallStringsType
  public var meetingDoctorsProfessionalListStrings: MDVideocallSDK.MeetingDoctorsProfessionalListStringsType
}
public protocol MeetingDoctorsMedicalHistoryStringsType {
  var mainTitle: Swift.String? { get set }
  var recipeDisclaimerTitle: Swift.String? { get set }
  var recipeDisclaimerDescription: Swift.String? { get set }
  var recipeBodyMessage: Swift.String? { get set }
  var recipeEmptyMessage: Swift.String? { get set }
}
public struct MeetingDoctorsMedicalHistoryStrings : MDVideocallSDK.MeetingDoctorsMedicalHistoryStringsType {
  public var mainTitle: Swift.String?
  public var recipeDisclaimerTitle: Swift.String?
  public var recipeDisclaimerDescription: Swift.String?
  public var recipeBodyMessage: Swift.String?
  public var recipeEmptyMessage: Swift.String?
}
public protocol MeetingDoctorsVideoCallStringsType {
}
public struct MeetingDoctorsVideoCallStrings : MDVideocallSDK.MeetingDoctorsVideoCallStringsType {
}
public protocol MeetingDoctorsProfessionalListStringsType {
  var listTitleHeader: Swift.String? { get set }
}
public struct MeetingDoctorsProfessionalListStrings : MDVideocallSDK.MeetingDoctorsProfessionalListStringsType {
  public var listTitleHeader: Swift.String?
}
public enum MessengerDeeplinkOption {
  case chat(searchOption: MDVideocallSDK.MeetingDoctorsSearchOption, actionMessage: MDVideocallSDK.MeetingDoctorsActionMessage, specialityID: Swift.Int?)
}
extension MDVideocallSDK.MessengerDeeplinkOption : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MessengerDeeplinkOption, rhs: MDVideocallSDK.MessengerDeeplinkOption) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class ScheduleEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var userId: Swift.String?
  final public let firstPeriodStart: RealmSwift.RealmOptional<Swift.Int>
  final public let firstPeriodEnd: RealmSwift.RealmOptional<Swift.Int>
  final public let secondPeriodStart: RealmSwift.RealmOptional<Swift.Int>
  final public let secondPeriodEnd: RealmSwift.RealmOptional<Swift.Int>
  final public let contact: RealmSwift.LinkingObjects<MDVideocallSDK.ContactEntity>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.ScheduleEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case userId
    case stateValue
    case weekDayValue
    case firstPeriodStart
    case firstPeriodEnd
    case secondPeriodStart
    case secondPeriodEnd
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension MDVideocallSDK.ScheduleEntity {
  public enum State : Swift.String {
    case unknown
    case disabled
    case enabled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var state: MDVideocallSDK.ScheduleEntity.State? {
    get
    set
  }
}
extension MDVideocallSDK.ScheduleEntity {
  public enum WeekDay : Swift.String {
    case unknown
    case sunday
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var weekDay: MDVideocallSDK.ScheduleEntity.WeekDay? {
    get
    set
  }
}
public class MDVideocallErrorModel : Swift.Codable {
  final public let code: Swift.Int?
  final public let message: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class MDAServerTrustPolicyManager {
  final public let policies: [Swift.String : MDVideocallSDK.MDAServerTrustPolicy]
  public init(policies: [Swift.String : MDVideocallSDK.MDAServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> MDVideocallSDK.MDAServerTrustPolicy?
  @objc deinit
}
public enum MDAServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((_ serverTrust: Security.SecTrust, _ host: Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
public protocol MedicalAddressModelType {
  var address: Swift.String? { get }
  var location: CoreLocation.CLLocationCoordinate2D? { get }
}
public struct MedicalAddressModel : MDVideocallSDK.MedicalAddressModelType {
  public let address: Swift.String?
  public let location: CoreLocation.CLLocationCoordinate2D?
  public init(address: Swift.String?, location: CoreLocation.CLLocationCoordinate2D?)
}
extension MDVideocallSDK.MedicalAddressModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicalAddressSchema
  public var schemaObject: MDVideocallSDK.MedicalAddressSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.MedicalAddressSchema) throws
}
public protocol MDPermissionsProviderProtocol {
  static func request(permission: MDVideocallSDK.MDPermission, completion: @escaping (Swift.Bool) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class MDPermissionsProvider : MDVideocallSDK.MDPermissionsProviderProtocol {
  public static func request(permission: MDVideocallSDK.MDPermission, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FloatyViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let floaty: MDVideocallSDK.Floaty
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MessageView : UIKit.UICollectionReusableView {
  @_Concurrency.MainActor(unsafe) open class func reuseIdentifier() -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MessageDateHeaderView : MDVideocallSDK.MessageView {
  @_Concurrency.MainActor(unsafe) override open class func reuseIdentifier() -> Swift.String
  @_Concurrency.MainActor(unsafe) final public let dateLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MessageDateFooterView : MDVideocallSDK.MessageView {
  @_Concurrency.MainActor(unsafe) override open class func reuseIdentifier() -> Swift.String
  @_Concurrency.MainActor(unsafe) final public let dateLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func labelPosition(isFromCurrentSender: Swift.Bool)
  @objc deinit
}
public protocol MediaItem {
  var url: Foundation.URL? { get }
  var image: UIKit.UIImage? { get }
  var placeholderImage: UIKit.UIImage { get }
  var size: CoreFoundation.CGSize { get }
}
public protocol LocationItem {
  var location: CoreLocation.CLLocation { get }
  var size: CoreFoundation.CGSize { get }
}
public struct MessagePhotoModel : MDVideocallSDK.MediaItem {
  public var url: Foundation.URL?
  public var image: UIKit.UIImage?
  public var placeholderImage: UIKit.UIImage
  public var size: CoreFoundation.CGSize
}
public struct MessageImageModel : MDVideocallSDK.ChatMediaItemProtocol {
  public var url: Foundation.URL?
  public var image: UIKit.UIImage?
  public var placeholderImage: UIKit.UIImage
  public var size: CoreFoundation.CGSize
}
public struct ChatFileItemModel : MDVideocallSDK.ChatFileItemProtocol {
  public var data: Foundation.Data?
  public var name: Swift.String
  public var url: Foundation.URL
  public var size: Swift.Int
}
@objc @_inheritsConvenienceInitializers public class MedicalCoverageEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.MedicalCoverageEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public class MDVideocallRequestModel : Swift.Codable {
  public init(id: Swift.String?, apiKey: Swift.String?, consultation: Swift.Int?, type: MDVideocallSDK.MDVideocallType?, speciality: Swift.String?, participants: [MDVideocallSDK.MDVideocallParticipantRequestModel]?, group: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol SocketNativeStreamAssembly {
  func resolve() -> MDVideocallSDK.SocketNativeStream?
}
public class SocketNativeStreamAssembler : MDVideocallSDK.SocketNativeStreamAssembly {
  final public let environment: MDVideocallSDK.Environment
  final public let manager: SocketIO.SocketManager
  public init(manager: SocketIO.SocketManager, environment: MDVideocallSDK.Environment)
  public func resolve() -> MDVideocallSDK.SocketNativeStream?
  @objc deinit
}
extension MDVideocallSDK.SocketNativeStreamAssembler : MDVideocallSDK.Assembler {
  public typealias Component = MDVideocallSDK.SocketNativeStream
}
open class MDASessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: MDVideocallSDK.MDAUploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(Swift.Error)
  }
  public static let `default`: MDVideocallSDK.MDASessionManager
  public static let defaultHTTPHeaders: MDVideocallSDK.MDAHTTPHeaders
  public static let multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: MDVideocallSDK.MDASessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: MDVideocallSDK.MDARequestAdapter?
  open var retrier: MDVideocallSDK.MDARequestRetrier? {
    get
    set
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: MDVideocallSDK.MDASessionDelegate = MDASessionDelegate(), mdaserverTrustPolicyManager: MDVideocallSDK.MDAServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: MDVideocallSDK.MDASessionDelegate, mdaserverTrustPolicyManager: MDVideocallSDK.MDAServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .get, parameters: MDVideocallSDK.MDAParameters? = nil, encoding: MDVideocallSDK.MDAParameterEncoding = MDAURLEncoding.default, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDADataRequest
  @discardableResult
  open func request(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDADataRequest
  @discardableResult
  open func download(_ url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .get, parameters: MDVideocallSDK.MDAParameters? = nil, encoding: MDVideocallSDK.MDAParameterEncoding = MDAURLEncoding.default, headers: MDVideocallSDK.MDAHTTPHeaders? = nil, to destination: MDVideocallSDK.MDADownloadRequest.DownloadFileDestination? = nil) -> MDVideocallSDK.MDADownloadRequest
  @discardableResult
  open func download(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, to destination: MDVideocallSDK.MDADownloadRequest.DownloadFileDestination? = nil) -> MDVideocallSDK.MDADownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: MDVideocallSDK.MDADownloadRequest.DownloadFileDestination? = nil) -> MDVideocallSDK.MDADownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDAUploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDAUploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDAUploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDAUploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDAUploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDAUploadRequest
  open func upload(multipartFormData: @escaping (MDVideocallSDK.MDAMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MDASessionManager.multipartFormDataEncodingMemoryThreshold, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((MDVideocallSDK.MDASessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (MDVideocallSDK.MDAMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MDASessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((MDVideocallSDK.MDASessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> MDVideocallSDK.MDAStreamRequest
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> MDVideocallSDK.MDAStreamRequest
}
public enum ConnectionStatusModel : Swift.Int {
  case notConnected
  case disconnected
  case connecting
  case connected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MDVideocallSDK.ConnectionStatusModel {
  public var isConnected: Swift.Bool {
    get
  }
}
extension MDVideocallSDK.ConnectionStatusModel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct DefaultEncryptionProvider : MDVideocallSDK.EncryptionProvider {
}
@_inheritsConvenienceInitializers public class ImageLoader : MDVideocallSDK.Loader<Foundation.URL, RxSwift.Single<UIKit.UIImage>> {
  convenience override public init()
  public init(loaders: [Swift.String : MDVideocallSDK.Loader<Foundation.URL, RxSwift.Single<UIKit.UIImage>>])
  override public func load(_ source: Foundation.URL) -> RxSwift.Single<UIKit.UIImage>?
  public subscript(scheme: Swift.String) -> MDVideocallSDK.Loader<Foundation.URL, RxSwift.Single<UIKit.UIImage>>? {
    get
    set
  }
  @objc deinit
}
public enum ActionMessageSchemaValues : Swift.String {
  case success
  case invalidMessage
  case invalidProfessional
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ActionMessageSchema : Swift.Codable {
  public let message: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.ActionMessageSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.ActionMessageSchema, b: MDVideocallSDK.ActionMessageSchema) -> Swift.Bool
}
public struct SectionModel<Section, ItemType> {
  public var model: Section
  public var items: [MDVideocallSDK.SectionModel<Section, ItemType>.Item]
  public init(model: Section, items: [MDVideocallSDK.SectionModel<Section, ItemType>.Item])
}
extension MDVideocallSDK.SectionModel : MDVideocallSDK.SectionModelType {
  public typealias Identity = Section
  public typealias Item = ItemType
  public var identity: Section {
    get
  }
}
extension MDVideocallSDK.SectionModel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MDVideocallSDK.SectionModel {
  public init(original: MDVideocallSDK.SectionModel<Section, MDVideocallSDK.SectionModel<Section, ItemType>.Item>, items: [MDVideocallSDK.SectionModel<Section, ItemType>.Item])
}
extension MDVideocallSDK.SectionModel : Swift.Equatable where Section : Swift.Equatable, ItemType : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.SectionModel<Section, ItemType>, rhs: MDVideocallSDK.SectionModel<Section, ItemType>) -> Swift.Bool
}
public protocol SectionModelType {
  associatedtype Item
  var items: [Self.Item] { get }
  init(original: Self, items: [Self.Item])
}
public struct MDCommonSimpleDataResponse<Data> : Swift.Codable where Data : Swift.Decodable, Data : Swift.Encodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let data: Data
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class EnvironmentProperty<T> : MDVideocallSDK.NamedProperty<T> where T : Swift.LosslessStringConvertible {
  convenience override public init(_ name: Swift.String, default value: T? = nil)
  public init(_ name: Swift.String, store: Foundation.ProcessInfo, default value: T? = nil)
  override public var value: T? {
    get
    set
  }
  @objc deinit
}
public protocol CascadeDeleting {
  func delete<S>(_ objects: S, cascading: Swift.Bool) where S : Swift.Sequence, S.Element : RealmSwiftObject
  func delete(_ object: RealmSwift.Object, cascading: Swift.Bool)
}
public protocol RealmStore : MDVideocallSDK.CascadeDeleting {
  init() throws
  init(configuration: RealmSwift.Realm.Configuration) throws
  func write(_ block: (() throws -> Swift.Void)) throws
  func add(_ object: RealmSwift.Object, update: Swift.Bool)
  func add<S>(_ objects: S, update: Swift.Bool) where S : Swift.Sequence, S.Element : RealmSwiftObject
  @discardableResult
  func create<T>(_ type: T.Type, value: Any, update: Swift.Bool) -> T where T : RealmSwiftObject
  func delete<S>(_ objects: S) where S : Swift.Sequence, S.Element : RealmSwiftObject
  func deleteAll()
  func objects<T>(_ type: T.Type) -> RealmSwift.Results<T> where T : RealmSwiftObject
  func object<T, K>(ofType type: T.Type, forPrimaryKey key: K) -> T? where T : RealmSwiftObject
  func observe(_ block: @escaping RealmSwift.NotificationBlock) -> RealmSwift.NotificationToken
}
extension RealmSwift.Realm : MDVideocallSDK.RealmStore {
  public init() throws
  public init(configuration: RealmSwift.Realm.Configuration) throws
  public func write(_ block: (() throws -> Swift.Void)) throws
  public func delete<S>(_ objects: S, cascading: Swift.Bool = false) where S : Swift.Sequence, S.Element : RealmSwiftObject
  public func delete(_ object: RealmSwift.Object, cascading: Swift.Bool = false)
  public func add(_ object: RealmSwift.Object, update: Swift.Bool)
  public func add<S>(_ objects: S, update: Swift.Bool) where S : Swift.Sequence, S.Element : RealmSwiftObject
  @discardableResult
  public func create<T>(_ type: T.Type, value: Any, update: Swift.Bool) -> T where T : RealmSwiftObject
}
public protocol EncryptionProviderAssembly {
  func resolve() -> MDVideocallSDK.EncryptionProvider?
}
public class EncryptionProviderAssembler : MDVideocallSDK.EncryptionProviderAssembly {
  public init(_ tag: Swift.String, configuration: MDVideocallSDK.BuildConfigurationType)
  public func resolve() -> MDVideocallSDK.EncryptionProvider?
  @objc deinit
}
extension MDVideocallSDK.EncryptionProviderAssembler : MDVideocallSDK.Assembler {
  public typealias Component = MDVideocallSDK.EncryptionProvider
}
public enum MDPermissionStatusEnum : Swift.Int {
  case authorized
  case denied
  case notDetermined
  case notSupported
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ApplicationServiceDelegate : UIKit.UIResponder, UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) @objc public var window: UIKit.UIWindow?
  @_Concurrency.MainActor(unsafe) open var services: [MDVideocallSDK.ApplicationServicePlugin] {
    get
  }
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationDidFinishLaunching(_ application: UIKit.UIApplication)
  @available(iOS 6.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, willFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil) -> Swift.Bool
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil) -> Swift.Bool
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationWillResignActive(_ application: UIKit.UIApplication)
  @available(iOS, introduced: 2.0, deprecated: 9.0, message: "Please use application:openURL:options:")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleOpen url: Foundation.URL) -> Swift.Bool
  @available(iOS, introduced: 4.2, deprecated: 9.0, message: "Please use application:openURL:options:")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, open url: Foundation.URL, sourceApplication: Swift.String?, annotation: Any) -> Swift.Bool
  @available(iOS 9.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationDidReceiveMemoryWarning(_ application: UIKit.UIApplication)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationWillTerminate(_ application: UIKit.UIApplication)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationSignificantTimeChange(_ application: UIKit.UIApplication)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, willChangeStatusBarOrientation newStatusBarOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didChangeStatusBarOrientation oldStatusBarOrientation: UIKit.UIInterfaceOrientation)
  @available(iOS, introduced: 8.0, deprecated: 10.0, message: "Use UserNotification UNNotification Settings instead")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didRegister notificationSettings: UIKit.UIUserNotificationSettings)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  @available(iOS, introduced: 3.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any])
  @available(iOS, introduced: 4.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didReceive notification: UIKit.UILocalNotification)
  @available(iOS, introduced: 8.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleActionWithIdentifier identifier: Swift.String?, for notification: UIKit.UILocalNotification, completionHandler: @escaping () -> Swift.Void)
  @available(iOS, introduced: 9.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleActionWithIdentifier identifier: Swift.String?, forRemoteNotification userInfo: [Swift.AnyHashable : Any], withResponseInfo responseInfo: [Swift.AnyHashable : Any], completionHandler: @escaping () -> Swift.Void)
  @available(iOS, introduced: 8.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleActionWithIdentifier identifier: Swift.String?, forRemoteNotification userInfo: [Swift.AnyHashable : Any], completionHandler: @escaping () -> Swift.Void)
  @available(iOS, introduced: 9.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleActionWithIdentifier identifier: Swift.String?, for notification: UIKit.UILocalNotification, withResponseInfo responseInfo: [Swift.AnyHashable : Any], completionHandler: @escaping () -> Swift.Void)
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, performActionFor shortcutItem: UIKit.UIApplicationShortcutItem, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleEventsForBackgroundURLSession identifier: Swift.String, completionHandler: @escaping () -> Swift.Void)
  @available(iOS 8.2, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, handleWatchKitExtensionRequest userInfo: [Swift.AnyHashable : Any]?, reply: @escaping ([Swift.AnyHashable : Any]?) -> Swift.Void)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationShouldRequestHealthAuthorization(_ application: UIKit.UIApplication)
  @available(iOS 4.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationDidEnterBackground(_ application: UIKit.UIApplication)
  @available(iOS 4.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationWillEnterForeground(_ application: UIKit.UIApplication)
  @available(iOS 4.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationProtectedDataWillBecomeUnavailable(_ application: UIKit.UIApplication)
  @available(iOS 4.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func applicationProtectedDataDidBecomeAvailable(_ application: UIKit.UIApplication)
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, shouldAllowExtensionPointIdentifier extensionPointIdentifier: UIKit.UIApplication.ExtensionPointIdentifier) -> Swift.Bool
  @available(iOS 6.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, viewControllerWithRestorationIdentifierPath identifierComponents: [Swift.String], coder: Foundation.NSCoder) -> UIKit.UIViewController?
  @available(iOS 6.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, shouldSaveApplicationState coder: Foundation.NSCoder) -> Swift.Bool
  @available(iOS 6.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, shouldRestoreApplicationState coder: Foundation.NSCoder) -> Swift.Bool
  @available(iOS 6.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, willEncodeRestorableStateWith coder: Foundation.NSCoder)
  @available(iOS 6.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didDecodeRestorableStateWith coder: Foundation.NSCoder)
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, willContinueUserActivityWithType userActivityType: Swift.String) -> Swift.Bool
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didFailToContinueUserActivityWithType userActivityType: Swift.String, error: Swift.Error)
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didUpdate userActivity: Foundation.NSUserActivity)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol UserPreferencesType {
  var uuid: MDVideocallSDK.NamedProperty<Foundation.UUID> { get }
  var keystore: MDVideocallSDK.NamedProperty<MDVideocallSDK.Keystore> { get }
  var lastInboxUpdate: MDVideocallSDK.NamedProperty<Foundation.Date> { get }
  var isVideoCallStarted: MDVideocallSDK.NamedProperty<Swift.Bool> { get }
  var lastSocketUpdate: MDVideocallSDK.NamedProperty<Foundation.Date> { get }
  func clear(_ bundle: Foundation.Bundle)
}
public struct UserPreferences : MDVideocallSDK.UserPreferencesType {
  public var uuid: MDVideocallSDK.NamedProperty<Foundation.UUID> {
    get
  }
  public var keystore: MDVideocallSDK.NamedProperty<MDVideocallSDK.Keystore> {
    get
  }
  public var lastInboxUpdate: MDVideocallSDK.NamedProperty<Foundation.Date> {
    get
  }
  public var isVideoCallStarted: MDVideocallSDK.NamedProperty<Swift.Bool> {
    get
  }
  public var lastSocketUpdate: MDVideocallSDK.NamedProperty<Foundation.Date> {
    get
  }
  public init(_ defaults: Foundation.UserDefaults)
  public func clear(_ bundle: Foundation.Bundle)
}
@objc @_inheritsConvenienceInitializers open class FloatyManager : ObjectiveC.NSObject {
  open var button: MDVideocallSDK.Floaty {
    get
  }
  @objc override dynamic public init()
  open var font: UIKit.UIFont {
    get
    set
  }
  open var rtlMode: Swift.Bool {
    get
    set
  }
  open func show(_ animated: Swift.Bool = true)
  open func hide(_ animated: Swift.Bool = true)
  open func toggle(_ animated: Swift.Bool = true)
  open var hidden: Swift.Bool {
    get
  }
  @objc deinit
}
public class SocketClientStream : MDVideocallSDK.SocketStream {
  public var error: RxSwift.Observable<MDVideocallSDK.SocketClientSchema> {
    get
  }
  public var status: RxSwift.Observable<MDVideocallSDK.SocketClientSchema> {
    get
  }
  public init(client: MDVideocallSDK.SocketNativeStream, mapper: MDVideocallSDK.CodableMapper)
  @objc deinit
  public func connect<Credentials>(credentials: Credentials? = nil) -> RxSwift.Observable<MDVideocallSDK.SocketClientSchema> where Credentials : MDVideocallSDK.SocketCredentials
  public func disconnect() -> RxSwift.Observable<MDVideocallSDK.SocketClientSchema>
  public func input(stream event: MDVideocallSDK.SocketListenerType) throws -> MDVideocallSDK.AnySocketInputStream<MDVideocallSDK.SocketClientSchema.Input>
  public func output(stream event: MDVideocallSDK.SocketEmissionType) throws -> MDVideocallSDK.AnySocketOutputStream<MDVideocallSDK.SocketClientSchema.Output>
  public func join(namespace: Swift.String)
  public func leave()
  public func clear()
  public typealias SocketInputType = MDVideocallSDK.SocketClientSchema.Input
  public typealias SocketNativeType = MDVideocallSDK.SocketClientSchema
  public typealias SocketOutputType = MDVideocallSDK.SocketClientSchema.Output
}
public struct ProfessionalReportModel {
  public let id: Swift.Int?
  public let token: Swift.String?
  public let name: Swift.String?
  public let connected: Swift.Bool?
  public let hash: Swift.String?
  public init(id: Swift.Int?, token: Swift.String?, name: Swift.String?, connected: Swift.Bool?, hash: Swift.String?)
}
@available(iOS 14.5, tvOS 14.5, *)
extension MDVideocallSDK.MDPermission {
  public static var tracking: MDVideocallSDK.MDTrackingPermission {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOS 14.5, tvOS 14.5, *)
public class MDTrackingPermission : MDVideocallSDK.MDPermission {
  override open var type: MDVideocallSDK.MDPermissionTypeEnum {
    get
  }
  open var usageDescriptionKey: Swift.String? {
    get
  }
  override public var status: MDVideocallSDK.MDPermissionStatusEnum {
    get
  }
  override public func request(completion: @escaping () -> Swift.Void)
  override public init()
  @objc deinit
}
public struct CompanyReportModel {
  public let id: Swift.Int?
  public let name: Swift.String?
  public let logo: Swift.String?
  public init(id: Swift.Int?, name: Swift.String?, logo: Swift.String?)
}
public class InstallationController {
  public var current: RxSwift.Observable<MDVideocallSDK.InstallationModel?> {
    get
  }
  public func current(completion: @escaping (Swift.Result<MDVideocallSDK.InstallationModel?, Swift.Error>) -> Swift.Void)
  public var medicalHistoryActiveAndOptions: MDVideocallSDK.MedicalHistoryActiveAndOptionsModel?
  public var setup: MDVideocallSDK.SetupSchema?
  public init(_ id: MDVideocallSDK.NamedProperty<Foundation.UUID>, keystore: MDVideocallSDK.Keystore, repository: MDVideocallSDK.RepositoryController, remote: MDVideocallSDK.RemoteController, scheduler: RxSwift.ImmediateSchedulerType)
  public func fetch() -> RxSwift.Observable<MDVideocallSDK.InstallationModel?>
  public func setup(in bundle: Foundation.Bundle) -> RxSwift.Observable<MDVideocallSDK.SetupSchema>
  public func installation(with setup: MDVideocallSDK.SetupSchema, in bundle: Foundation.Bundle) -> RxSwift.Observable<MDVideocallSDK.InstallationModel>
  public func update(model: MDVideocallSDK.InstallationModel, deviceToken: Swift.String) -> RxSwift.Observable<MDVideocallSDK.InstallationModel>
  public func ping(in bundle: Foundation.Bundle) -> RxSwift.Completable
  public func fetch(completion: @escaping (Swift.Result<MDVideocallSDK.InstallationModel?, Swift.Error>) -> Swift.Void)
  public func setup(in bundle: Foundation.Bundle, completion: @escaping (Swift.Result<MDVideocallSDK.InstallationModel?, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct MDCommonDataMetaResponse<Data, Meta> : Swift.Codable where Data : Swift.Decodable, Data : Swift.Encodable, Meta : Swift.Decodable, Meta : Swift.Encodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    case meta
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let data: [Data]
  public let meta: Meta
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PhotoViewController : MDVideocallSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension MDVideocallSDK.PhotoViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in _: UIKit.UIScrollView) -> UIKit.UIView?
}
extension Foundation.NSNotification.Name {
  public struct MDATask {
    public static let DidResume: Foundation.Notification.Name
    public static let DidSuspend: Foundation.Notification.Name
    public static let DidCancel: Foundation.Notification.Name
    public static let DidComplete: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct MDAKey {
    public static let Task: Swift.String
    public static let ResponseData: Swift.String
  }
}
public struct VideoCallReportSchema : MDVideocallSDK.MedicalHistorySchema {
  public var name: Swift.String?
  public var patientHash: Swift.String?
  public let id: Swift.UInt
  public let pdfUrl: Swift.String?
  public let owner: MDVideocallSDK.VideoCallUserSchema?
  public let maker: MDVideocallSDK.VideoCallUserSchema?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public init(name: Swift.String?, patientHash: Swift.String?, id: Swift.UInt, pdfUrl: Swift.String?, owner: MDVideocallSDK.VideoCallUserSchema?, maker: MDVideocallSDK.VideoCallUserSchema?, createdAt: Swift.String?, updatedAt: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallReportSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.VideoCallReportSchema, rhs: MDVideocallSDK.VideoCallReportSchema) -> Swift.Bool
}
public protocol VideoCallAdapter {
  func call() -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  func cancel(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  func pickUp(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  func hangUp(by id: Swift.Int) -> RxSwift.Single<MDVideocallSDK.VideoCallResponse>
  func videoCallStatus() -> RxSwift.Single<MDVideocallSDK.VideoCallStatusResponse>
}
public protocol VideoCallProfessionalModelProtocol {
  var name: Swift.String? { get }
  var avatar: Swift.String? { get }
  var detail: Swift.String? { get }
}
public struct VideoCallProfessionalModel : MDVideocallSDK.VideoCallProfessionalModelProtocol {
  public let name: Swift.String?
  public let avatar: Swift.String?
  public let detail: Swift.String?
  public init(name: Swift.String?, avatar: Swift.String?, detail: Swift.String?)
}
extension MDVideocallSDK.VideoCallProfessionalModel {
  public init(schema: MDVideocallSDK.VideoCallProfessionalSchema?)
}
extension MDVideocallSDK.VideoCallProfessionalModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallProfessionalModel, b: MDVideocallSDK.VideoCallProfessionalModel) -> Swift.Bool
}
public enum MDPermissionTypeEnum : Swift.Int {
  case camera
  case photoLibrary
  case notification
  case microphone
  case calendar
  case contacts
  case reminders
  case speech
  case locationWhenInUse
  case locationAlways
  case motion
  case mediaLibrary
  case bluetooth
  case tracking
  case faceID
  case siri
  case health
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MeetingDoctorsDateDecodingStrategy : MDVideocallSDK.DateDecodingStrategy {
  public init()
  public func date(_ decoder: Swift.Decoder) throws -> Foundation.Date
}
public struct MeetingDoctorsDateEncodingStrategy : MDVideocallSDK.DateEncodingStrategy {
  public init()
  public func value(_ date: Foundation.Date, _ encoder: Swift.Encoder) throws
}
public enum RemoteError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  case responseSerializationFailed(error: Swift.Error?)
  case invaliEndpoint(type: MDVideocallSDK.EndpointType)
  case invalidAdapterState
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class ConstrainedHeightTextViewDelegate : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public init(constraint: UIKit.NSLayoutConstraint, maximumLength: Swift.Int = 50)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc deinit
}
public protocol RemoteController {
  var installation: MDVideocallSDK.InstallationAdapter { get }
  var customerInstallation: MDVideocallSDK.CustomerInstallationAdapter { get }
  var customerAuth: MDVideocallSDK.CustomerAuthAdapter { get }
  var customerNotifications: MDVideocallSDK.CustomerNotificationsAdapter { get }
  var videoCall: MDVideocallSDK.VideoCallAdapter { get }
  var authentication: MDVideocallSDK.AuthenticationAdapter { get }
  var notification: MDVideocallSDK.NotificationAdapter { get }
  var allergy: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.AllergySchema> { get }
  var disease: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.DiseaseSchema> { get }
  var medication: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.MedicationSchema> { get }
  var imc: MDVideocallSDK.AnyIdentifiableAdapter<MDVideocallSDK.IMCSchema> { get }
  var coverage: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalCoverageSchema> { get }
  var speciality: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalSpecialitySchema> { get }
  var professional: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalProfessionalSchema> { get }
  var address: MDVideocallSDK.AnyMedicalDirectoryAdapter<MDVideocallSDK.MedicalAddressSchema> { get }
  var videoCallReport: MDVideocallSDK.AnyMedicalHistoryAdapter<MDVideocallSDK.VideoCallReportSchema> { get }
  var derivation: MDVideocallSDK.DerivationReportAdapter { get }
  var videoCall1to1: MDVideocallSDK.VideoCall1to1Adapter { get }
  var professionalList: MDVideocallSDK.ProfessionalListAdapter { get }
  func join(account: MDVideocallSDK.AccountModel)
  func joinCustomer(auth: MDVideocallSDK.CustomerAuthModel)
  func joinProfessional(by token: Swift.String)
}
public protocol ScheduleAvailabilityViewModelType {
  func string(from date: Foundation.Date, locale: Foundation.Locale) -> Swift.String
}
public struct CustomerNotificationSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CustomerNotificationSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.CustomerNotificationSchema, b: MDVideocallSDK.CustomerNotificationSchema) -> Swift.Bool
}
public struct VideoCallStatusResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let data: MDVideocallSDK.VideoCallStatusSchema
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.VideoCallStatusResponse : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallStatusResponse, b: MDVideocallSDK.VideoCallStatusResponse) -> Swift.Bool
}
public protocol CustomerInstallationControllerProtocol {
  func fetch() -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel?>
  func update(pushToken: Swift.String?) -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  func installation(in _: Foundation.Bundle, id _: Foundation.UUID) -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  func fetch(completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationModel?, Swift.Error>) -> Swift.Void)
  func update(pushToken: Swift.String?, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationModel?, Swift.Error>) -> Swift.Void)
  func installation(in _: Foundation.Bundle, id _: Foundation.UUID, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationModel?, Swift.Error>) -> Swift.Void)
}
public class CustomerInstallationController : MDVideocallSDK.CustomerInstallationControllerProtocol {
  public init(keystore: MDVideocallSDK.Keystore, repository: MDVideocallSDK.RepositoryController, remote: MDVideocallSDK.RemoteController, scheduler: RxSwift.ImmediateSchedulerType)
  public func fetch() -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel?>
  public func update(pushToken: Swift.String?) -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  public func installation(in bundle: Foundation.Bundle, id chatId: Foundation.UUID) -> RxSwift.Observable<MDVideocallSDK.CustomerInstallationModel>
  public func fetch(completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationModel?, Swift.Error>) -> Swift.Void)
  public func update(pushToken: Swift.String?, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationModel?, Swift.Error>) -> Swift.Void)
  public func installation(in bundle: Foundation.Bundle, id chatId: Foundation.UUID, completion: @escaping (Swift.Result<MDVideocallSDK.CustomerInstallationModel?, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public protocol RealmStoreMigrationProviderAssembly {
  func resolve() -> MDVideocallSDK.StoreMigrationProvider?
}
public class RealmStoreMigrationProviderAssembler : MDVideocallSDK.RealmStoreMigrationProviderAssembly {
  public init()
  public func resolve() -> MDVideocallSDK.StoreMigrationProvider?
  @objc deinit
}
public struct ReferralSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let type: Swift.String?
  public let attributes: MDVideocallSDK.ReferralAttributesSchema?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReferralAttributesSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case professional
    case professionalName
    case customer
    case consultation
    case medicalHistory
    case diagnosis
    case orientation
    case referral
    case speciality
    case doctor
    case filepath
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let professional: Swift.String?
  public let professionalName: Swift.String?
  public let customer: Swift.String?
  public let consultation: Swift.String?
  public let medicalHistory: Swift.String?
  public let diagnosis: Swift.String?
  public let orientation: Swift.String?
  public let referral: Swift.String?
  public let speciality: Swift.String?
  public let doctor: Swift.String?
  public let filepath: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MDHTTP {
  public enum StatusCode : Swift.Int, Swift.Error {
    public enum ResponseType {
      case informational
      case success
      case redirection
      case clientError
      case serverError
      case undefined
      public static func == (a: MDVideocallSDK.MDHTTP.StatusCode.ResponseType, b: MDVideocallSDK.MDHTTP.StatusCode.ResponseType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case `continue`
    case switchingProtocols
    case processing
    case ok
    case created
    case accepted
    case nonAuthoritativeInformation
    case noContent
    case resetContent
    case partialContent
    case multiStatus
    case alreadyReported
    case IMUsed
    case multipleChoices
    case movedPermanently
    case found
    case seeOther
    case notModified
    case useProxy
    case switchProxy
    case temporaryRedirect
    case permenantRedirect
    case badRequest
    case unauthorized
    case paymentRequired
    case forbidden
    case notFound
    case methodNotAllowed
    case notAcceptable
    case proxyAuthenticationRequired
    case requestTimeout
    case conflict
    case gone
    case lengthRequired
    case preconditionFailed
    case payloadTooLarge
    case URITooLong
    case unsupportedMediaType
    case rangeNotSatisfiable
    case expectationFailed
    case teapot
    case misdirectedRequest
    case unprocessableEntity
    case locked
    case failedDependency
    case upgradeRequired
    case preconditionRequired
    case tooManyRequests
    case requestHeaderFieldsTooLarge
    case noResponse
    case unavailableForLegalReasons
    case SSLCertificateError
    case SSLCertificateRequired
    case HTTPRequestSentToHTTPSPort
    case clientClosedRequest
    case internalServerError
    case notImplemented
    case badGateway
    case serviceUnavailable
    case gatewayTimeout
    case HTTPVersionNotSupported
    case variantAlsoNegotiates
    case insufficientStorage
    case loopDetected
    case notExtended
    case networkAuthenticationRequired
    public var responseType: MDVideocallSDK.MDHTTP.StatusCode.ResponseType {
      get
    }
    public func callAsFunction() -> Swift.Int
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Foundation.HTTPURLResponse {
  public var status: MDVideocallSDK.MDHTTP.StatusCode? {
    get
  }
}
public struct CommonMetaSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case size
    case page
    case total
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let size: Swift.Int?
  public let page: Swift.Int?
  public let total: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol MDAURLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : MDVideocallSDK.MDAURLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : MDVideocallSDK.MDAURLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : MDVideocallSDK.MDAURLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol MDAURLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension MDVideocallSDK.MDAURLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : MDVideocallSDK.MDAURLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .get, parameters: MDVideocallSDK.MDAParameters? = nil, encoding: MDVideocallSDK.MDAParameterEncoding = MDAURLEncoding.default, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDADataRequest
@discardableResult
public func request(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDADataRequest
@discardableResult
public func download(_ url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .get, parameters: MDVideocallSDK.MDAParameters? = nil, encoding: MDVideocallSDK.MDAParameterEncoding = MDAURLEncoding.default, headers: MDVideocallSDK.MDAHTTPHeaders? = nil, to destination: MDVideocallSDK.MDADownloadRequest.DownloadFileDestination? = nil) -> MDVideocallSDK.MDADownloadRequest
@discardableResult
public func download(_ urlRequest: MDVideocallSDK.MDAURLRequestConvertible, to destination: MDVideocallSDK.MDADownloadRequest.DownloadFileDestination? = nil) -> MDVideocallSDK.MDADownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: MDVideocallSDK.MDADownloadRequest.DownloadFileDestination? = nil) -> MDVideocallSDK.MDADownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDAUploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDAUploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDAUploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDAUploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil) -> MDVideocallSDK.MDAUploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible) -> MDVideocallSDK.MDAUploadRequest
public func upload(multipartFormData: @escaping (MDVideocallSDK.MDAMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MDASessionManager.multipartFormDataEncodingMemoryThreshold, to url: MDVideocallSDK.MDAURLConvertible, method: MDVideocallSDK.MDHTTPMethod = .post, headers: MDVideocallSDK.MDAHTTPHeaders? = nil, encodingCompletion: ((MDVideocallSDK.MDASessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (MDVideocallSDK.MDAMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MDASessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: MDVideocallSDK.MDAURLRequestConvertible, encodingCompletion: ((MDVideocallSDK.MDASessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> MDVideocallSDK.MDAStreamRequest
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> MDVideocallSDK.MDAStreamRequest
public protocol RepositoryControllerAssembly {
  func resolve() -> MDVideocallSDK.RepositoryController?
}
public class AlamofireInstallationAdapter : MDVideocallSDK.InstallationAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func setup(_ request: MDVideocallSDK.SetupRequest) -> RxSwift.Single<MDVideocallSDK.SetupSchema>
  public func setup(_ request: MDVideocallSDK.SetupRequest, completion: @escaping (Swift.Result<MDVideocallSDK.SetupSchema?, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public protocol MedicalDirectorySchema : MDVideocallSDK.IdentifiableSchema {
  var name: Swift.String { get }
}
public struct MedicalDirectoryGenericSchema : MDVideocallSDK.MedicalDirectorySchema {
  public let id: Swift.UInt
  public let name: Swift.String
  public init(id: Swift.UInt, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SpecialitySchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case code
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int
  public let code: Swift.String?
  public let name: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.SpecialitySchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.SpecialitySchema, rhs: MDVideocallSDK.SpecialitySchema) -> Swift.Bool
}
public protocol MDNetworkServiceProtocol {
  typealias CompletionHandler = (Swift.Result<Foundation.Data?, Swift.Error>) -> Swift.Void
  func request(endpoint: MDVideocallSDK.MDRequestableProtocol, completion: @escaping Self.CompletionHandler) -> MDVideocallSDK.MDNetworkCancellableProtocol?
}
public struct LastMessageSchema {
  public let type: MDVideocallSDK.MessageSchema.Kind
  public let timestamp: Foundation.Date
  public let metadata: MDVideocallSDK.MessageSchema.Metadata
}
extension MDVideocallSDK.LastMessageSchema : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case createdAt
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.LastMessageSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.LastMessageSchema, rhs: MDVideocallSDK.LastMessageSchema) -> Swift.Bool
}
public struct ClientSocketInputStream : MDVideocallSDK.SocketInputStream {
  public var name: Swift.String {
    get
  }
  public init(_ event: MDVideocallSDK.SocketListenerType, stream: MDVideocallSDK.AnySocketInputStream<[Any]>, mapper: MDVideocallSDK.CodableMapper)
  public func on() -> RxSwift.Observable<MDVideocallSDK.SocketClientSchema.Input>
  public typealias EventType = MDVideocallSDK.SocketClientSchema.Input
}
public protocol MeetingDoctorsImagesType {
  var meetingDoctorsMedicalHistoryImages: MDVideocallSDK.MeetingDoctorsMedicalHistoryImagesType { get set }
  var meetingDoctorsProfessionalListImages: MDVideocallSDK.MeetingDoctorsProfessionalListImagesType { get set }
  var meetingDoctorsChatImages: MDVideocallSDK.MeetingDoctorsChatImagesType { get set }
  var meetingDoctorsProfileImages: MDVideocallSDK.MeetingDoctorsProfileImagesType { get set }
}
public struct MeetingDoctorsImages : MDVideocallSDK.MeetingDoctorsImagesType {
  public var meetingDoctorsMedicalHistoryImages: MDVideocallSDK.MeetingDoctorsMedicalHistoryImagesType
  public var meetingDoctorsProfessionalListImages: MDVideocallSDK.MeetingDoctorsProfessionalListImagesType
  public var meetingDoctorsChatImages: MDVideocallSDK.MeetingDoctorsChatImagesType
  public var meetingDoctorsProfileImages: MDVideocallSDK.MeetingDoctorsProfileImagesType
}
public protocol MeetingDoctorsMedicalHistoryImagesType {
  var mainIcon: UIKit.UIImage? { get set }
  var allergiesIcon: UIKit.UIImage? { get set }
  var diseasesIcon: UIKit.UIImage? { get set }
  var medicationsIcon: UIKit.UIImage? { get set }
  var imcsIcon: UIKit.UIImage? { get set }
  var videoCallReportIcon: UIKit.UIImage? { get set }
  var derivationsIcon: UIKit.UIImage? { get set }
  var myDocumentsIcon: UIKit.UIImage? { get set }
  var recipeIcon: UIKit.UIImage? { get set }
}
public protocol MeetingDoctorsProfessionalListImagesType {
  var scheduleIcon: UIKit.UIImage? { get set }
  var headerIcon: UIKit.UIImage? { get set }
}
public protocol MeetingDoctorsChatImagesType {
  var disconnectMessageAlertIcon: UIKit.UIImage? { get set }
  var rightNavigationBarButtonIcon: UIKit.UIImage? { get set }
}
public struct MeetingDoctorsMedicalHistoryImages : MDVideocallSDK.MeetingDoctorsMedicalHistoryImagesType {
  public var mainIcon: UIKit.UIImage?
  public var allergiesIcon: UIKit.UIImage?
  public var diseasesIcon: UIKit.UIImage?
  public var medicationsIcon: UIKit.UIImage?
  public var imcsIcon: UIKit.UIImage?
  public var videoCallReportIcon: UIKit.UIImage?
  public var derivationsIcon: UIKit.UIImage?
  public var myDocumentsIcon: UIKit.UIImage?
  public var recipeIcon: UIKit.UIImage?
}
public struct MeetingDoctorsProfessionalListImages : MDVideocallSDK.MeetingDoctorsProfessionalListImagesType {
  public var scheduleIcon: UIKit.UIImage?
  public var headerIcon: UIKit.UIImage?
}
public struct MeetingDoctorsChatImages : MDVideocallSDK.MeetingDoctorsChatImagesType {
  public var disconnectMessageAlertIcon: UIKit.UIImage?
  public var rightNavigationBarButtonIcon: UIKit.UIImage?
}
public protocol MeetingDoctorsProfileImagesType {
  var profileHeaderImage: UIKit.UIImage? { get set }
  var profileNavBarIcon: UIKit.UIImage? { get set }
}
public struct MeetingDoctorsProfileImages : MDVideocallSDK.MeetingDoctorsProfileImagesType {
  public var profileHeaderImage: UIKit.UIImage?
  public var profileNavBarIcon: UIKit.UIImage?
}
public enum SocketClientStatus : Swift.Int {
  case notConnected
  case disconnected
  case connecting
  case connected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MDVideocallSDK.LocationModel : MDVideocallSDK.Persistable {
  final public var managedObject: MDVideocallSDK.LocationEntity {
    get
  }
  convenience public init(managedObject: MDVideocallSDK.LocationEntity) throws
  public typealias ManagedObject = MDVideocallSDK.LocationEntity
}
@objc @_inheritsConvenienceInitializers public class MedicalProfessionalEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var typeValue: Swift.String?
  @objc dynamic public var phone: Swift.String?
  @objc dynamic public var address: Swift.String?
  @objc dynamic public var zip: Swift.String?
  final public let latitude: RealmSwift.RealmOptional<Swift.Double>
  final public let longitude: RealmSwift.RealmOptional<Swift.Double>
  final public let coverages: RealmSwift.List<MDVideocallSDK.TagEntity>
  final public let specialities: RealmSwift.List<MDVideocallSDK.TagEntity>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.MedicalProfessionalEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case name
    case typeValue
    case phone
    case address
    case zip
    case latitude
    case longitude
    case coverages
    case specialities
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension MDVideocallSDK.MedicalProfessionalEntity {
  public var location: CoreLocation.CLLocationCoordinate2D? {
    get
  }
}
extension MDVideocallSDK.MedicalProfessionalEntity {
  public enum Kind : Swift.String {
    case unknown
    case professional
    case center
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: MDVideocallSDK.MedicalProfessionalEntity.Kind {
    get
    set
  }
}
public struct MDCompaniesArgumentGetResponse : Swift.Codable {
  public let id: Swift.String?
  public let apiKey: Swift.String?
  public let professional: Swift.String?
  public let customer: Swift.String?
  public let timezone: Swift.String?
  public let type: Swift.String?
  public let service: Swift.String?
  public let survey: MDVideocallSDK.MDCompaniesArgumentSurveyGetResponse?
  public let createdAt: Foundation.Date?
  public let ratedAt: Foundation.Date?
  public let sentAt: Foundation.Date?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MDCompaniesArgumentSurveyGetResponse : Swift.Codable {
  public let title: Swift.String
  public let body: Swift.String
  public let form: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class PropertyListLoader : MDVideocallSDK.Loader<Foundation.URL, [Swift.String : Any]> {
  public init(_ loader: MDVideocallSDK.Loader<Foundation.URL, Foundation.Data>, format: Foundation.PropertyListSerialization.PropertyListFormat = .xml)
  @_semantics("optimize.sil.never") override public func load(_ source: Foundation.URL) -> [Swift.String : Any]?
  @objc deinit
}
public struct DiseaseSchema : MDVideocallSDK.MedicalHistorySchema {
  public let id: Swift.UInt
  public let name: Swift.String?
  public let details: Swift.String?
  public let diagnosis: Foundation.Date?
  public let resolution: Foundation.Date?
  public let patientHash: Swift.String?
  public init(id: Swift.UInt, name: Swift.String?, details: Swift.String?, diagnosis: Foundation.Date?, resolution: Foundation.Date?, patientHash: Swift.String?)
}
extension MDVideocallSDK.DiseaseSchema {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MDVideocallSDK.DiseaseSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.DiseaseSchema, rhs: MDVideocallSDK.DiseaseSchema) -> Swift.Bool
}
public struct JoinConversationSchema : Swift.Codable {
  public let id: Swift.Int
  public init(_ id: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.JoinConversationSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.JoinConversationSchema, b: MDVideocallSDK.JoinConversationSchema) -> Swift.Bool
}
public enum MeetingDoctorsSearchOption {
  case professionalId([Swift.String], forceOnline: Swift.Bool = false)
  case speciality([MDVideocallSDK.MeetingDoctorsRole], exclude: Swift.Bool, forceOnline: Swift.Bool = true)
  case professionalHash([Swift.String], forceOnline: Swift.Bool = false)
}
extension MDVideocallSDK.MeetingDoctorsSearchOption : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MeetingDoctorsSearchOption, rhs: MDVideocallSDK.MeetingDoctorsSearchOption) -> Swift.Bool
}
public protocol SocketManagerAssembly {
  func resolve() -> SocketIO.SocketManager?
}
public class SocketManagerAssembler : MDVideocallSDK.SocketManagerAssembly {
  public var configuration: SocketIO.SocketIOClientConfiguration
  final public let environment: MDVideocallSDK.Environment
  public init(environment: MDVideocallSDK.Environment, configuration: SocketIO.SocketIOClientConfiguration)
  public func resolve() -> SocketIO.SocketManager?
  @objc deinit
}
extension MDVideocallSDK.SocketManagerAssembler : MDVideocallSDK.Assembler {
  public typealias Component = SocketIO.SocketManager
}
extension MDVideocallSDK.VideoCallUserModel : MDVideocallSDK.Persistable {
  public typealias ManagedObject = MDVideocallSDK.VideoCallUserEntity
  public var managedObject: MDVideocallSDK.VideoCallUserEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.VideoCallUserEntity) throws
}
public struct CountSchema : Swift.Codable {
  public let count: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.CountSchema : Swift.Equatable {
  public static func == (a: MDVideocallSDK.CountSchema, b: MDVideocallSDK.CountSchema) -> Swift.Bool
}
public struct MedicalHistoryActiveAndOptionsModel {
  public let active: Swift.Bool
  public let medicalHistory: [MDVideocallSDK.MedicalHistoryModel]
  public init(active: Swift.Bool, medicalHistory: [MDVideocallSDK.MedicalHistoryModel])
}
@_hasMissingDesignatedInitializers public class MedicalHistoryActiveAndOptionConverter {
  @objc deinit
}
public protocol MedicationModelType {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var posology: Swift.String? { get }
  var details: Swift.String? { get }
  var patientHash: Swift.String { get }
}
public struct MedicationModel : MDVideocallSDK.MedicationModelType {
  public static let Stub: MDVideocallSDK.MedicationModel
  public let id: Swift.String
  public let name: Swift.String
  public let posology: Swift.String?
  public let details: Swift.String?
  public let patientHash: Swift.String
  public init(id: Swift.String, name: Swift.String, posology: Swift.String?, details: Swift.String?, patientHash: Swift.String)
}
extension MDVideocallSDK.MedicationModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicationModel, rhs: MDVideocallSDK.MedicationModel) -> Swift.Bool
}
extension MDVideocallSDK.MedicationModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.MedicationSchema
  public var schemaObject: MDVideocallSDK.MedicationSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.MedicationSchema) throws
}
extension MDVideocallSDK.MedicationModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicationModel, Swift.String>
  public static let nameLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicationModel, Swift.String>
  public static let posologyLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicationModel, Swift.String?>
  public static let detailsLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicationModel, Swift.String?>
  public static let patientHashLens: MDVideocallSDK.Lens<MDVideocallSDK.MedicationModel, Swift.String>
}
public class ErrorBodyModel : Swift.Codable {
  final public let code: Swift.Int
  final public let name: Swift.String
  final public let message: Swift.String
  final public let scope: Swift.String
  public init(code: Swift.Int = 0, name: Swift.String = "", message: Swift.String = "", scope: Swift.String = "")
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct MedicalCoverageSchema : MDVideocallSDK.MedicalDirectorySchema {
  public let id: Swift.UInt
  public let name: Swift.String
  public init(id: Swift.UInt, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MedicalCoverageSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalCoverageSchema, rhs: MDVideocallSDK.MedicalCoverageSchema) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDGradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var colors: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gradientStart: CoreFoundation.CGPoint.Point {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gradientEnd: CoreFoundation.CGPoint.Point {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var locations: [Foundation.NSNumber]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect = .zero)
  @objc deinit
}
public class MDVideocallResponseModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias Decoration<T> = (T) -> Swift.Void
public struct ViewStyle<T> where T : UIKit.UIView {
  public init(styling: @escaping MDVideocallSDK.Decoration<T>)
  public static func compose(_ styles: MDVideocallSDK.ViewStyle<T>...) -> MDVideocallSDK.ViewStyle<T>
  public func composing(with other: MDVideocallSDK.ViewStyle<T>) -> MDVideocallSDK.ViewStyle<T>
  public func composing(with otherStyling: @escaping MDVideocallSDK.Decoration<T>) -> MDVideocallSDK.ViewStyle<T>
  public func apply(to view: T)
  public func apply(to views: T...)
}
extension UIKit.UIFont.Weight {
  public static let w100: UIKit.UIFont.Weight
  public static let w200: UIKit.UIFont.Weight
  public static let w300: UIKit.UIFont.Weight
  public static let w400: UIKit.UIFont.Weight
  public static let w500: UIKit.UIFont.Weight
  public static let w600: UIKit.UIFont.Weight
  public static let w700: UIKit.UIFont.Weight
  public static let w800: UIKit.UIFont.Weight
  public static let w900: UIKit.UIFont.Weight
}
@_hasMissingDesignatedInitializers public class ProfessionalsRepository {
  public static func setIsProfessional()
  public static func setIsUser()
  public static func getIsProfessional() -> Swift.Bool
  @objc deinit
}
public enum MeetingDoctorsError : Swift.Error, Foundation.LocalizedError, Foundation.CustomNSError {
  public enum IllegalStateExceptionReason {
    case frameworkInitializationFailed
    case invalidBundleId
    case userNotLoged
    case installationNotCreated
    public static func == (a: MDVideocallSDK.MeetingDoctorsError.IllegalStateExceptionReason, b: MDVideocallSDK.MeetingDoctorsError.IllegalStateExceptionReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum MessengerExceptionReason {
    case cantNavigateTopViewControllerIsNotMessengerViewController(deeplinkOption: MDVideocallSDK.MessengerDeeplinkOption)
  }
  public enum MyHealthExceptionReason {
    case cantNavigateTopViewControllerIsNotMDMyHealthMainViewController(deeplinkOption: MDVideocallSDK.MyHealthDeeplinkOption)
  }
  public enum GroupsExceptionReason {
    case cantCreateInstallation
    case cantLogin
    case cantRegisterFirebaseForNotifications
    public static func == (a: MDVideocallSDK.MeetingDoctorsError.GroupsExceptionReason, b: MDVideocallSDK.MeetingDoctorsError.GroupsExceptionReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum VideoCallExceptionReason {
    case cantRequestVideoCall
    case cantNavigateExternalOriginIsRequired
    case cantStartVideoCall
    case videoCallNotStartedPreviously
    case videoCallForbidden
    case hasPending1to1
    case cantSendCancelMessage
    public static func == (a: MDVideocallSDK.MeetingDoctorsError.VideoCallExceptionReason, b: MDVideocallSDK.MeetingDoctorsError.VideoCallExceptionReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case illegalStateException(reason: MDVideocallSDK.MeetingDoctorsError.IllegalStateExceptionReason)
  case storyboardFailed
  case noDoctorFound
  case accessDeniedToOpenChat
  case accessDeniedToMedicalHistory
  case couldNotReceiveMessage
  case cantDeeplinkToUnknown
  case notificationContentNotBelongingToFramework
  case messenger(reason: MDVideocallSDK.MeetingDoctorsError.MessengerExceptionReason)
  case myHealth(reason: MDVideocallSDK.MeetingDoctorsError.MyHealthExceptionReason)
  case groups(reason: MDVideocallSDK.MeetingDoctorsError.GroupsExceptionReason)
  case videoCall(reason: MDVideocallSDK.MeetingDoctorsError.VideoCallExceptionReason)
  case unknown(error: Swift.Error)
  case ProfessionalListDatasourceEmpty
  case CantAuthenticateUser
  public enum DataBase : Swift.Error {
    case databaseNotConfigured
    public static func == (a: MDVideocallSDK.MeetingDoctorsError.DataBase, b: MDVideocallSDK.MeetingDoctorsError.DataBase) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public protocol ReusableCell : AnyObject {
  static var reuseIdentifier: Swift.String { get }
}
extension MDVideocallSDK.ReusableCell where Self : UIKit.UITableViewCell {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
extension MDVideocallSDK.ReusableCell where Self : UIKit.UICollectionViewCell {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
public protocol SessionAdapterAssembly {
  func resolve(with mapper: MDVideocallSDK.CodableMapper) -> MDVideocallSDK.SessionAdapter?
}
public class AlamofireSessionAssembler : MDVideocallSDK.SessionAdapterAssembly {
  final public let environment: MDVideocallSDK.Environment
  final public let type: MDVideocallSDK.EndpointType
  final public let bundle: Foundation.Bundle
  public init(in bundle: Foundation.Bundle, environment: MDVideocallSDK.Environment, type: MDVideocallSDK.EndpointType)
  public func resolve(with mapper: MDVideocallSDK.CodableMapper) -> MDVideocallSDK.SessionAdapter?
  @objc deinit
}
public protocol CodableMapperAssembly {
  func resolve() -> MDVideocallSDK.CodableMapper?
}
public class JsonMapperAssembler : MDVideocallSDK.CodableMapperAssembly {
  public var encoder: Foundation.JSONEncoder? {
    get
  }
  public var decoder: Foundation.JSONDecoder? {
    get
  }
  public init()
  public func resolve() -> MDVideocallSDK.CodableMapper?
  @objc deinit
}
extension MDVideocallSDK.JsonMapperAssembler : MDVideocallSDK.Assembler {
  public typealias Component = MDVideocallSDK.CodableMapper
}
public protocol MDARequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias MDARequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
public protocol MDARequestRetrier {
  func should(_ manager: MDVideocallSDK.MDASessionManager, retry request: MDVideocallSDK.MDARequest, with error: Swift.Error, completion: @escaping MDVideocallSDK.MDARequestRetryCompletion)
}
public typealias MDAHTTPHeaders = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers open class MDARequest {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: MDVideocallSDK.MDATaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
  }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  open class func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension MDVideocallSDK.MDARequest : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension MDVideocallSDK.MDARequest : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class MDADataRequest : MDVideocallSDK.MDARequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping MDVideocallSDK.MDADataRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class MDADownloadRequest : MDVideocallSDK.MDARequest {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static let createIntermediateDirectories: MDVideocallSDK.MDADownloadRequest.DownloadOptions
    public static let removePreviousFile: MDVideocallSDK.MDADownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = MDVideocallSDK.MDADownloadRequest.DownloadOptions
    public typealias Element = MDVideocallSDK.MDADownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: MDVideocallSDK.MDADownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  open func cancel(createResumeData: Swift.Bool)
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping MDVideocallSDK.MDADownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> MDVideocallSDK.MDADownloadRequest.DownloadFileDestination
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class MDAUploadRequest : MDVideocallSDK.MDADataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping MDVideocallSDK.MDAUploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
open class MDAStreamRequest : MDVideocallSDK.MDARequest {
  @objc deinit
}
public struct ItemSchema<T> : Swift.Codable where T : MDVideocallSDK.IdentifiableSchema {
  public let item: T
  public init(item: T)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class BundleDataLoader : MDVideocallSDK.Loader<Swift.String, Foundation.Data> {
  public init(_ bundle: Foundation.Bundle, loader: MDVideocallSDK.Loader<Foundation.URL, Foundation.Data>, ofType type: Swift.String)
  @_semantics("optimize.sil.never") override public func load(_ source: Swift.String) -> Foundation.Data?
  @objc deinit
}
public struct MDEventField : Swift.Identifiable {
  public enum EventName {
    public static let userSession: Swift.String
    public static let videocallPool: Swift.String
    public static let professionalList: Swift.String
    public static let professionalChat: Swift.String
    public static let feedsList: Swift.String
    public static let feedsClick: Swift.String
  }
  public enum EventType {
    public static let view: Swift.String
    public static let click: Swift.String
  }
  public let id: Swift.String?
  public let time: Foundation.Date?
  public let type: Swift.String?
  public let name: Swift.String?
  public let user: Swift.String?
  public let value: Swift.String?
  public let param: [Swift.String : Any]?
  public init(id: Swift.String? = UUID().uuidString, time: Foundation.Date? = Date(), type: Swift.String?, name: Swift.String?, user: Swift.String?, value: Swift.String? = nil, param: [Swift.String : Any]? = nil)
  public typealias ID = Swift.String?
}
extension MDVideocallSDK.MDEventField : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum RequestGenerationError : Swift.Error {
  case components
  public static func == (a: MDVideocallSDK.RequestGenerationError, b: MDVideocallSDK.RequestGenerationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MDVideocallSDK.MDRequestableProtocol {
  public var path: Swift.String {
    get
  }
  public var method: MDVideocallSDK.MDHTTP.Method {
    get
  }
  public var headers: [MDVideocallSDK.MDHTTP.Header.Key : Swift.String]? {
    get
  }
  public var body: Foundation.Data? {
    get
  }
  public var queryItems: [Swift.String : Swift.String]? {
    get
  }
  public var maxRetries: Swift.Int {
    get
  }
  public func getURLRequest() -> Foundation.URLRequest?
}
public protocol MDEventServiceProtocol {
  func log(event: MDVideocallSDK.MDEventField)
}
@_hasMissingDesignatedInitializers public class MDEventService : MDVideocallSDK.MDEventServiceProtocol {
  public static let shared: MDVideocallSDK.MDEventServiceProtocol
  public var eventList: [Swift.String]? {
    get
    set
  }
  @objc deinit
  public func log(event: MDVideocallSDK.MDEventField)
}
public struct MDRequest : MDVideocallSDK.MDRequestableProtocol {
  public var url: Swift.String
  public var path: Swift.String
  public var method: MDVideocallSDK.MDHTTP.Method
  public var headers: [MDVideocallSDK.MDHTTP.Header.Key : Swift.String]?
  public var body: Foundation.Data?
  public var queryItems: [Swift.String : Swift.String]?
  public init(url: Swift.String, path: Swift.String, method: MDVideocallSDK.MDHTTP.Method, headers: [MDVideocallSDK.MDHTTP.Header.Key : Swift.String]?, body: Foundation.Data?, queryItems: [Swift.String : Swift.String]?)
  public func getURLRequest() throws -> Foundation.URLRequest
}
public enum KeychainAccessOption {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleAlways
  case accessibleWhenPasscodeSetThisDeviceOnly
  case accessibleAlwaysThisDeviceOnly
  public var value: Swift.String {
    get
  }
  public static func == (a: MDVideocallSDK.KeychainAccessOption, b: MDVideocallSDK.KeychainAccessOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class DefaultNetworkSessionManager : ObjectiveC.NSObject, MDVideocallSDK.MDNetworkSessionManagerProtocol {
  public func request(_ request: Foundation.URLRequest, completion: @escaping MDVideocallSDK.DefaultNetworkSessionManager.CompletionHandler) -> MDVideocallSDK.MDNetworkCancellableProtocol
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.DefaultNetworkSessionManager : Foundation.URLSessionDelegate {
  @objc dynamic public func urlSession(_: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class VideoCallUserEntity : RealmSwift.Object {
  @objc dynamic public var userHash: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var avatar: Swift.String?
  @objc dynamic public var userDescription: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.VideoCallUserEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case userHash
    case name
    case avatar
    case userDescription
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UITableViewCell, T : MDVideocallSDK.NibLoadable, T : MDVideocallSDK.ReusableCell
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UITableViewCell, T : MDVideocallSDK.ReusableCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(_: T.Type) -> T where T : UIKit.UITableViewCell, T : MDVideocallSDK.ReusableCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(_: T.Type, for indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell, T : MDVideocallSDK.ReusableCell
}
public struct MedicalProfessionalSchema : MDVideocallSDK.MedicalDirectorySchema {
  public enum Kind : Swift.UInt, Swift.Codable {
    case unknown
    case professional
    case center
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public let id: Swift.UInt
  public let name: Swift.String
  public let type: MDVideocallSDK.MedicalProfessionalSchema.Kind
  public let phone: Swift.String
  public let address: Swift.String
  public let zip: Swift.String
  public let latitude: CoreLocation.CLLocationDegrees?
  public let longitude: CoreLocation.CLLocationDegrees?
  public let distance: Swift.String?
  public let categories: [Swift.UInt]?
  public let specialities: [Swift.UInt]?
  public var location: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public init(id: Swift.UInt, name: Swift.String, type: MDVideocallSDK.MedicalProfessionalSchema.Kind, phone: Swift.String, address: Swift.String, zip: Swift.String, latitude: CoreLocation.CLLocationDegrees?, longitude: CoreLocation.CLLocationDegrees?, distance: Swift.String?, categories: [Swift.UInt]?, specialities: [Swift.UInt]?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MDVideocallSDK.MedicalProfessionalSchema : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalProfessionalSchema, rhs: MDVideocallSDK.MedicalProfessionalSchema) -> Swift.Bool
}
extension MDVideocallSDK.MedicalProfessionalSchema.Kind : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.MedicalProfessionalSchema.Kind, rhs: MDVideocallSDK.MedicalProfessionalSchema.Kind) -> Swift.Bool
}
public protocol ActionMessageAdapter {
  func requestMessage(_ request: MDVideocallSDK.IncomingMessageRequest) -> RxSwift.Single<MDVideocallSDK.ActionMessageSchema>
}
public protocol Property {
  associatedtype ValueType
  var name: Swift.String { get }
  var value: Self.ValueType? { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDLabelS20W900 : MDVideocallSDK.MDLabelBase {
  @_Concurrency.MainActor(unsafe) override public func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDVideocallProcessBaseViewController : MDVideocallSDK.MDVideocallBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func setNavigationTitle()
  @objc @_Concurrency.MainActor(unsafe) open func closeProcess()
  @_Concurrency.MainActor(unsafe) open func didSelectRowAt(indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func numberOfRowsInSection(section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func cellForRowAt(indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MDVideocallSDK.MDVideocallProcessBaseViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension MDVideocallSDK.MDVideocallProcessBaseViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MDGradientShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func startAnimating()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol Loadable {
  associatedtype Source
  associatedtype Element
  func load(_ source: Self.Source) -> Self.Element?
}
open class Loader<S, T> : MDVideocallSDK.Loadable {
  public init()
  open func load(_: S) -> T?
  public typealias Element = T
  public typealias Source = S
  @objc deinit
}
public class AlamofireNotificationAdapter : MDVideocallSDK.NotificationAdapter {
  public init(session: MDVideocallSDK.SessionAdapter)
  public func unread(_ request: MDVideocallSDK.MessageCountRequest) -> RxSwift.Single<MDVideocallSDK.CountSchema>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MDDisclaimerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var action: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol InboxControllerType {
  func fetch(user: MDVideocallSDK.UserModel, filter: MDVideocallSDK.InboxController.Filter) -> RxSwift.Observable<([MDVideocallSDK.InboxContactModel], MDVideocallSDK.Changeset?)>
  func refresh()
  func user(_ model: MDVideocallSDK.UserModel) -> RxSwift.Observable<MDVideocallSDK.UserModel?>
}
public class InboxController : MDVideocallSDK.InboxControllerType {
  public struct Filter {
    public let roles: [MDVideocallSDK.SpecialityTypeModel]
    public let status: [MDVideocallSDK.ContactStatusModel]
    public let ids: [Swift.String]
    public let roomIds: [Swift.String]
    public let professionalHashes: [Swift.String]
    public let limit: Swift.Int
    public let excludeRoles: Swift.Bool
    public init(roles: [MDVideocallSDK.SpecialityTypeModel], status: [MDVideocallSDK.ContactStatusModel] = ContactStatusModel.allCases, ids: [Swift.String] = [], roomIds: [Swift.String] = [], professionalHashes: [Swift.String] = [], limit: Swift.Int = 0, excludeRoles: Swift.Bool = false)
  }
  public init(_ repository: MDVideocallSDK.RepositoryController, _ socket: MDVideocallSDK.AnySocketControllerStream, scheduler: RxSwift.ImmediateSchedulerType)
  public func fetch(user: MDVideocallSDK.UserModel, filter: MDVideocallSDK.InboxController.Filter) -> RxSwift.Observable<([MDVideocallSDK.InboxContactModel], MDVideocallSDK.Changeset?)>
  public func refresh()
  public func user(_ model: MDVideocallSDK.UserModel) -> RxSwift.Observable<MDVideocallSDK.UserModel?>
  @objc deinit
}
extension MDVideocallSDK.InboxController.Filter {
  public var predicate: Foundation.NSPredicate {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AvatarStatusView : UIKit.UIView {
  public enum Size : CoreFoundation.CGFloat {
    case small
    case mid
    case big
    case unknown
    public init?(rawValue: CoreFoundation.CGFloat)
    public typealias RawValue = CoreFoundation.CGFloat
    public var rawValue: CoreFoundation.CGFloat {
      get
    }
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var avatarView: MDVideocallSDK.AvatarView!
  @_Concurrency.MainActor(unsafe) public var status: MDVideocallSDK.StatusView.Status? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusSize: MDVideocallSDK.AvatarStatusView.Size? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var urlString: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var avatarBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onClick: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder unarchiver: Foundation.NSCoder)
  @objc deinit
}
public class MDCV2VideoConsultationsRequest : Swift.Codable {
  public init(workflow: Swift.String?, professionalHash: Swift.String?, speciality: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
final public class ImageLoaderManager {
  public init(networkService: MDVideocallSDK.MDNetworkServiceProtocol = MDDefaultNetworkService(sessionManager: NotSecuredNetworkSessionManager()))
  @objc deinit
}
public protocol VideoCallConsultationModelProtocol {
  var videoCallId: Swift.Int? { get }
  var tokenId: Swift.String? { get }
  var sessionId: Swift.String? { get }
}
public struct VideoCallConsultationModel : MDVideocallSDK.VideoCallConsultationModelProtocol {
  public let videoCallId: Swift.Int?
  public let tokenId: Swift.String?
  public let sessionId: Swift.String?
  public init(videoCallId: Swift.Int?, tokenId: Swift.String?, sessionId: Swift.String?)
}
extension MDVideocallSDK.VideoCallConsultationModel {
  public init(schema: MDVideocallSDK.VideoCallConsultationSchema)
}
extension MDVideocallSDK.VideoCallConsultationModel : Swift.Equatable {
  public static func == (a: MDVideocallSDK.VideoCallConsultationModel, b: MDVideocallSDK.VideoCallConsultationModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class FileManagerWrapper {
  public static func download(url: Foundation.URL, completion: @escaping (Foundation.URL?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
extension MDVideocallSDK.InboxContactModel : MDVideocallSDK.Persistable {
  public var managedObject: MDVideocallSDK.ContactEntity {
    get
  }
  public init(managedObject: MDVideocallSDK.ContactEntity) throws
  public typealias ManagedObject = MDVideocallSDK.ContactEntity
}
extension MDVideocallSDK.ContactEntity.Role {
  public var model: MDVideocallSDK.ContactRoleModel {
    get
  }
}
extension MDVideocallSDK.ContactEntity.Status {
  public var model: MDVideocallSDK.ContactStatusModel {
    get
  }
}
extension MDVideocallSDK.ContactEntity.VideoStatus {
  public var model: MDVideocallSDK.VideoStatusModel {
    get
  }
}
extension MDVideocallSDK.ContactEntity {
  public var specialityType: MDVideocallSDK.SpecialityTypeModel {
    get
  }
}
extension Foundation.NSMutableAttributedString {
  @discardableResult
  public func bold(_ text: Swift.String, color: UIKit.UIColor? = .black, fontSize size: Swift.Int? = 17) -> Foundation.NSMutableAttributedString
  @discardableResult
  public func normal(_ text: Swift.String, color: UIKit.UIColor? = .black, fontSize size: Swift.Int? = 17) -> Foundation.NSMutableAttributedString
  @discardableResult
  public func underline(_ text: Swift.String, color: UIKit.UIColor? = .black, fontSize size: Swift.Int? = 17) -> Foundation.NSMutableAttributedString
  @discardableResult
  public func italic(_ text: Swift.String, color: UIKit.UIColor? = .black, fontSize size: Swift.Int? = 17) -> Foundation.NSMutableAttributedString
}
public struct RemoteRequestRetrier : MDVideocallSDK.MDARequestRetrier {
  public init(_ maxAttemptCount: Swift.Int = Int.max, delay: MDVideocallSDK.DelayOptions)
  public func should(_: MDVideocallSDK.MDASessionManager, retry request: MDVideocallSDK.MDARequest, with error: Swift.Error, completion: @escaping MDVideocallSDK.MDARequestRetryCompletion)
}
public protocol DateDecodingStrategy {
  func date(_ decoder: Swift.Decoder) throws -> Foundation.Date
}
extension MDVideocallSDK.DateDecodingStrategy {
  public func date(_: Swift.Decoder) throws -> Foundation.Date
}
public protocol VideoCallUserModelType {
  var hash: Swift.String { get }
  var name: Swift.String? { get }
  var avatar: Swift.String? { get }
  var description: Swift.String? { get }
}
public struct VideoCallUserModel : MDVideocallSDK.VideoCallUserModelType {
  public static let Stub: MDVideocallSDK.VideoCallUserModel
  public let hash: Swift.String
  public let name: Swift.String?
  public let avatar: Swift.String?
  public let description: Swift.String?
  public init(hash: Swift.String, name: Swift.String?, avatar: Swift.String?, description: Swift.String?)
}
extension MDVideocallSDK.VideoCallUserModel : MDVideocallSDK.Transmittable {
  public typealias SchemaObject = MDVideocallSDK.VideoCallUserSchema
  public var schemaObject: MDVideocallSDK.VideoCallUserSchema {
    get
  }
  public init(schemaObject: MDVideocallSDK.VideoCallUserSchema) throws
}
extension MDVideocallSDK.VideoCallUserModel : Swift.Equatable {
  public static func == (lhs: MDVideocallSDK.VideoCallUserModel, rhs: MDVideocallSDK.VideoCallUserModel) -> Swift.Bool
}
extension MDVideocallSDK.VideoCallUserModel {
  public static let hashLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallUserModel, Swift.String>
  public static let nameLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallUserModel, Swift.String?>
  public static let avatarLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallUserModel, Swift.String?>
  public static let descriptionLens: MDVideocallSDK.Lens<MDVideocallSDK.VideoCallUserModel, Swift.String?>
}
public enum DelayOptions {
  case immediate
  case constant(time: Swift.Double)
  case exponential(initial: Swift.Double, multiplier: Swift.Double, maxDelay: Swift.Double)
  case custom(closure: (Swift.UInt) -> Swift.Double)
}
extension MDVideocallSDK.DelayOptions {
  public func make(_ attempt: Swift.UInt) -> Swift.Double
}
public class ClientSecretRequestInterceptor : MDVideocallSDK.MDARequestAdapter {
  public init(key: MDVideocallSDK.Keystore)
  public func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InstallationEntity : RealmSwift.Object {
  @objc dynamic public var id: Swift.String?
  @objc dynamic public var uuid: Swift.String?
  @objc dynamic public var osType: Swift.String?
  @objc dynamic public var osVersion: Swift.String?
  @objc dynamic public var libVersion: Swift.String?
  @objc dynamic public var model: Swift.String?
  @objc dynamic public var deviceToken: Swift.String?
  @objc dynamic public var locale: Swift.String?
  @objc dynamic public var timeZone: Swift.String?
  @objc dynamic public var referrer: Swift.String?
  @objc dynamic public var location: MDVideocallSDK.LocationEntity?
  @objc dynamic public var createdAt: Foundation.Date
  @objc dynamic public var updatedAt: Foundation.Date
  final public let account: RealmSwift.LinkingObjects<MDVideocallSDK.AccountEntity>
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension MDVideocallSDK.InstallationEntity {
  public enum Attributes : Swift.String, Swift.CodingKey {
    case id
    case uuid
    case osType
    case osVersion
    case libVersion
    case model
    case deviceToken
    case locale
    case timeZone
    case referrer
    case location
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public protocol MessageModelType : Swift.CustomStringConvertible {
  var id: Swift.String { get }
  var room: Swift.String { get }
  var sender: Swift.String { get }
  var metadata: MDVideocallSDK.MessageDataModel { get }
  var kind: MDVideocallSDK.MessageTypeModel { get }
  var status: MDVideocallSDK.MessageStatusModel { get }
  var timestamp: Foundation.TimeInterval { get }
}
public struct MessageModel : MDVideocallSDK.MessageModelType {
  public let id: Swift.String
  public let room: Swift.String
  public let sender: Swift.String
  public let metadata: MDVideocallSDK.MessageDataModel
  public let status: MDVideocallSDK.MessageStatusModel
  public let timestamp: Foundation.TimeInterval
  public var kind: MDVideocallSDK.MessageTypeModel {
    get
  }
  public var description: Swift.String {
    get
  }
  public init(id: Foundation.UUID, room: Swift.Int, sender: MDVideocallSDK.UserModel, metadata: MDVideocallSDK.MessageDataModel, date: Foundation.Date = Date())
  public init(id: Swift.String, room: Swift.String, sender: Swift.String, metadata: MDVideocallSDK.MessageDataModel, status: MDVideocallSDK.MessageStatusModel, timestamp: Foundation.TimeInterval)
}
extension MDVideocallSDK.MessageModel {
  public static let idLens: MDVideocallSDK.Lens<MDVideocallSDK.MessageModel, Swift.String>
  public static let roomLens: MDVideocallSDK.Lens<MDVideocallSDK.MessageModel, Swift.String>
  public static let senderLens: MDVideocallSDK.Lens<MDVideocallSDK.MessageModel, Swift.String>
  public static let metadataLens: MDVideocallSDK.Lens<MDVideocallSDK.MessageModel, MDVideocallSDK.MessageDataModel>
  public static let statusLens: MDVideocallSDK.Lens<MDVideocallSDK.MessageModel, MDVideocallSDK.MessageStatusModel>
  public static let timestampLens: MDVideocallSDK.Lens<MDVideocallSDK.MessageModel, Foundation.TimeInterval>
}
public class MDVideocallParticipantStatusRequestModel : Swift.Codable {
  public init(status: MDVideocallSDK.MDVideocallStatusType? = nil, signIn: Swift.Bool? = nil, argument: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
extension Foundation.Date {
  public var isInFuture: Swift.Bool {
    get
  }
}
extension MDVideocallSDK.ScoreEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.ScoreEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.ScoreEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.Header.Key : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.Header.Key : Swift.Hashable {}
extension MDVideocallSDK.MDHTTP.Header.Key : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.Header.Value : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.Header.Value : Swift.Hashable {}
extension MDVideocallSDK.MDHTTP.Header.Value : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.Header.Value.Application : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.Header.Value.Application : Swift.Hashable {}
extension MDVideocallSDK.MDHTTP.Header.Value.Application : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.Header.Value.ContentType : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.Header.Value.ContentType : Swift.Hashable {}
extension MDVideocallSDK.MDHTTP.Header.Value.ContentType : Swift.RawRepresentable {}
extension MDVideocallSDK.MDVCParticipantProviderResponseEnum : Swift.Equatable {}
extension MDVideocallSDK.MDVCParticipantProviderResponseEnum : Swift.Hashable {}
extension MDVideocallSDK.MDVCParticipantProviderResponseEnum : Swift.RawRepresentable {}
extension MDVideocallSDK.MDVCParticipantArgumentResponseEnum : Swift.Hashable {}
extension MDVideocallSDK.MDVCParticipantArgumentResponseEnum : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTPMethod : Swift.Equatable {}
extension MDVideocallSDK.MDHTTPMethod : Swift.Hashable {}
extension MDVideocallSDK.MDHTTPMethod : Swift.RawRepresentable {}
extension MDVideocallSDK.MDAURLEncoding.Destination : Swift.Equatable {}
extension MDVideocallSDK.MDAURLEncoding.Destination : Swift.Hashable {}
extension MDVideocallSDK.MDAURLEncoding.ArrayEncoding : Swift.Equatable {}
extension MDVideocallSDK.MDAURLEncoding.ArrayEncoding : Swift.Hashable {}
extension MDVideocallSDK.MDAURLEncoding.BoolEncoding : Swift.Equatable {}
extension MDVideocallSDK.MDAURLEncoding.BoolEncoding : Swift.Hashable {}
extension MDVideocallSDK.ContactEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.ContactEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.ContactEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactEntity.Status : Swift.Equatable {}
extension MDVideocallSDK.ContactEntity.Status : Swift.Hashable {}
extension MDVideocallSDK.ContactEntity.Status : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactEntity.VideoStatus : Swift.Equatable {}
extension MDVideocallSDK.ContactEntity.VideoStatus : Swift.Hashable {}
extension MDVideocallSDK.ContactEntity.VideoStatus : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactEntity.Role : Swift.Equatable {}
extension MDVideocallSDK.ContactEntity.Role : Swift.Hashable {}
extension MDVideocallSDK.ContactEntity.Role : Swift.RawRepresentable {}
extension MDVideocallSDK.ControllerError.InstallationFailureReason : Swift.Equatable {}
extension MDVideocallSDK.ControllerError.InstallationFailureReason : Swift.Hashable {}
extension MDVideocallSDK.ControllerError.TransmittableFailureReason : Swift.Equatable {}
extension MDVideocallSDK.ControllerError.TransmittableFailureReason : Swift.Hashable {}
extension MDVideocallSDK.StorageError.ManagedObjectFailureReason : Swift.Equatable {}
extension MDVideocallSDK.StorageError.ManagedObjectFailureReason : Swift.Hashable {}
extension MDVideocallSDK.StorageError.PersistableFailureReason : Swift.Equatable {}
extension MDVideocallSDK.StorageError.PersistableFailureReason : Swift.Hashable {}
extension MDVideocallSDK.MedicalAddressRequest.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MedicalAddressRequest.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MedicalAddressRequest.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallProfessionalSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallProfessionalSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallProfessionalSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.CryptoManagerError : Swift.Equatable {}
extension MDVideocallSDK.CryptoManagerError : Swift.Hashable {}
extension MDVideocallSDK.ScheduleStateModel : Swift.Equatable {}
extension MDVideocallSDK.ScheduleStateModel : Swift.Hashable {}
extension MDVideocallSDK.ScheduleStateModel : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ContactSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ContactSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactSchema.Status : Swift.Equatable {}
extension MDVideocallSDK.ContactSchema.Status : Swift.Hashable {}
extension MDVideocallSDK.ContactSchema.Status : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactSchema.VideoStatus : Swift.Equatable {}
extension MDVideocallSDK.ContactSchema.VideoStatus : Swift.Hashable {}
extension MDVideocallSDK.ContactSchema.VideoStatus : Swift.RawRepresentable {}
extension MDVideocallSDK.AccountModel.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.AccountModel.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.AccountModel.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageStatusSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessageStatusSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessageStatusSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.DiseaseEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.DiseaseEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.DiseaseEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.RoleSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.RoleSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.RoleSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.RoleSchema.RoleType : Swift.Equatable {}
extension MDVideocallSDK.RoleSchema.RoleType : Swift.Hashable {}
extension MDVideocallSDK.RoleSchema.RoleType : Swift.RawRepresentable {}
extension MDVideocallSDK.SystemModel : Swift.Equatable {}
extension MDVideocallSDK.SystemModel : Swift.Hashable {}
extension MDVideocallSDK.SystemModel : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerInstallationEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.CustomerInstallationEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.CustomerInstallationEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.CommonDataResponse.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CommonDataResponse.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CommonDataResponse.CodingKeys : Swift.RawRepresentable {}
extension CoreFoundation.CGPoint.Point : Swift.Equatable {}
extension CoreFoundation.CGPoint.Point : Swift.Hashable {}
extension MDVideocallSDK.DerivationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.DerivationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.DerivationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.DerivationAttributesSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.DerivationAttributesSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.DerivationAttributesSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.DerivationServicesSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.DerivationServicesSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.DerivationServicesSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.DerivationPriceSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.DerivationPriceSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.DerivationPriceSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageTypeModel : Swift.Equatable {}
extension MDVideocallSDK.MessageTypeModel : Swift.Hashable {}
extension MDVideocallSDK.MessageTypeModel : Swift.RawRepresentable {}
extension MDVideocallSDK.FloatyOpenAnimationType : Swift.Equatable {}
extension MDVideocallSDK.FloatyOpenAnimationType : Swift.Hashable {}
extension MDVideocallSDK.FloatyOpenAnimationType : Swift.RawRepresentable {}
extension MDVideocallSDK.FloatyVerticalDirection : Swift.Equatable {}
extension MDVideocallSDK.FloatyVerticalDirection : Swift.Hashable {}
extension MDVideocallSDK.FloatyVerticalDirection : Swift.RawRepresentable {}
extension MDVideocallSDK.FloatyHorizontalDirection : Swift.Equatable {}
extension MDVideocallSDK.FloatyHorizontalDirection : Swift.Hashable {}
extension MDVideocallSDK.FloatyHorizontalDirection : Swift.RawRepresentable {}
extension MDVideocallSDK.AccountEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.AccountEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.AccountEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.AllergyEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.AllergyEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.AllergyEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.UserSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.UserSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.UserSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.UserSchema.Gender : Swift.Equatable {}
extension MDVideocallSDK.UserSchema.Gender : Swift.Hashable {}
extension MDVideocallSDK.UserSchema.Gender : Swift.RawRepresentable {}
extension MDVideocallSDK.UserSchema.RegistrationStatus : Swift.Equatable {}
extension MDVideocallSDK.UserSchema.RegistrationStatus : Swift.Hashable {}
extension MDVideocallSDK.UserSchema.RegistrationStatus : Swift.RawRepresentable {}
extension MDVideocallSDK.UserFeaturesSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.UserFeaturesSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.UserFeaturesSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.UserFeedSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.UserFeedSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.UserFeedSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalHistoryDeeplinkOption : Swift.Hashable {}
extension MDVideocallSDK.ChatMessageCellViewModel.Status : Swift.Equatable {}
extension MDVideocallSDK.ChatMessageCellViewModel.Status : Swift.Hashable {}
extension MDVideocallSDK.ChatMessageCellViewModel.Status : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageStatusModel : Swift.Equatable {}
extension MDVideocallSDK.MessageStatusModel : Swift.Hashable {}
extension MDVideocallSDK.MessageStatusModel : Swift.RawRepresentable {}
extension MDVideocallSDK.EndpointType : Swift.Equatable {}
extension MDVideocallSDK.EndpointType : Swift.Hashable {}
extension MDVideocallSDK.EndpointType : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerAuthSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CustomerAuthSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CustomerAuthSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageSchema.Status : Swift.Equatable {}
extension MDVideocallSDK.MessageSchema.Status : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.Status : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactStatusModel : Swift.Equatable {}
extension MDVideocallSDK.ContactStatusModel : Swift.Hashable {}
extension MDVideocallSDK.ContactStatusModel : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ScheduleSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ScheduleSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleSchema.State : Swift.Equatable {}
extension MDVideocallSDK.ScheduleSchema.State : Swift.Hashable {}
extension MDVideocallSDK.ScheduleSchema.State : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleSchema.WeekDay : Swift.Equatable {}
extension MDVideocallSDK.ScheduleSchema.WeekDay : Swift.Hashable {}
extension MDVideocallSDK.ScheduleSchema.WeekDay : Swift.RawRepresentable {}
extension MDVideocallSDK.OSName : Swift.Equatable {}
extension MDVideocallSDK.OSName : Swift.Hashable {}
extension MDVideocallSDK.OSName : Swift.RawRepresentable {}
extension MDVideocallSDK.FirebaseRemoteNotificationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.FirebaseRemoteNotificationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.FirebaseRemoteNotificationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.FirebaseRemoteNotificationTypeKey : Swift.Equatable {}
extension MDVideocallSDK.FirebaseRemoteNotificationTypeKey : Swift.Hashable {}
extension MDVideocallSDK.FirebaseRemoteNotificationTypeKey : Swift.RawRepresentable {}
extension MDVideocallSDK.FirebaseRemoteNotificationModuleKey : Swift.Hashable {}
extension MDVideocallSDK.FirebaseRemoteNotificationModuleKey : Swift.RawRepresentable {}
extension MDVideocallSDK.UserGenderModel : Swift.Equatable {}
extension MDVideocallSDK.UserGenderModel : Swift.Hashable {}
extension MDVideocallSDK.UserGenderModel : Swift.RawRepresentable {}
extension MDVideocallSDK.UserEntity.Gender : Swift.Equatable {}
extension MDVideocallSDK.UserEntity.Gender : Swift.Hashable {}
extension MDVideocallSDK.UserEntity.Gender : Swift.RawRepresentable {}
extension MDVideocallSDK.UserRegistrationStatusModel : Swift.Equatable {}
extension MDVideocallSDK.UserRegistrationStatusModel : Swift.Hashable {}
extension MDVideocallSDK.UserRegistrationStatusModel : Swift.RawRepresentable {}
extension MDVideocallSDK.UserEntity.RegistrationStatus : Swift.Equatable {}
extension MDVideocallSDK.UserEntity.RegistrationStatus : Swift.Hashable {}
extension MDVideocallSDK.UserEntity.RegistrationStatus : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalQueryBuilder.Kind : Swift.Equatable {}
extension MDVideocallSDK.MedicalQueryBuilder.Kind : Swift.Hashable {}
extension MDVideocallSDK.DerivationType : Swift.Equatable {}
extension MDVideocallSDK.DerivationType : Swift.Hashable {}
extension MDVideocallSDK.DerivationType : Swift.RawRepresentable {}
extension MDVideocallSDK.MeetingDoctorsMessagAction : Swift.Hashable {}
extension MDVideocallSDK.MedicationEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.MedicationEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.MedicationEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.UserEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.UserEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.UserEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.UserFeaturesEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.UserFeaturesEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.UserFeaturesEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.UserFeedEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.UserFeedEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.UserFeedEntity.Attributes : Swift.RawRepresentable {}
extension UIKit.UIView.UIViewHierarchyPosition : Swift.Equatable {}
extension UIKit.UIView.UIViewHierarchyPosition : Swift.Hashable {}
extension MDVideocallSDK.VideoCallTrackingRequest.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallTrackingRequest.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallTrackingRequest.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalSpecialityEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.MedicalSpecialityEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.MedicalSpecialityEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.EnvironmentType : Swift.Equatable {}
extension MDVideocallSDK.EnvironmentType : Swift.Hashable {}
extension MDVideocallSDK.EnvironmentType : Swift.RawRepresentable {}
extension MDVideocallSDK.ConversationEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.ConversationEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.ConversationEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.ReportSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ReportSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ReportSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ReportAttributesSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ReportAttributesSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ReportAttributesSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.PrescriptionReportSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.PrescriptionReportSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionReportSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.LaboratoryServicesReportSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.LaboratoryServicesReportSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.LaboratoryServicesReportSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.NonLaboratoryServicesReportSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.NonLaboratoryServicesReportSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.NonLaboratoryServicesReportSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.RadiologyServicesReportSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.RadiologyServicesReportSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.RadiologyServicesReportSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ReportPriceSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ReportPriceSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ReportPriceSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ChatSocketClientCredentials.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ChatSocketClientCredentials.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ChatSocketClientCredentials.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ReferrerModel.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ReferrerModel.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ReferrerModel.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MDVideocallParticipantType : Swift.Equatable {}
extension MDVideocallSDK.MDVideocallParticipantType : Swift.Hashable {}
extension MDVideocallSDK.MDVideocallParticipantType : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerUserEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.CustomerUserEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.CustomerUserEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.MeetingDoctorsStyle.MeetingDoctorsStyleTypeColor : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsStyle.MeetingDoctorsStyleTypeColor : Swift.Hashable {}
extension MDVideocallSDK.MedicalProfessionalModel.Kind : Swift.Equatable {}
extension MDVideocallSDK.MedicalProfessionalModel.Kind : Swift.Hashable {}
extension MDVideocallSDK.MedicalProfessionalModel.Kind : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageEntity.Status : Swift.Equatable {}
extension MDVideocallSDK.MessageEntity.Status : Swift.Hashable {}
extension MDVideocallSDK.MessageEntity.Status : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageSchema.Kind : Swift.Equatable {}
extension MDVideocallSDK.MessageSchema.Kind : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.Kind : Swift.RawRepresentable {}
extension MDVideocallSDK.MeetingDoctorsRole : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsRole : Swift.Hashable {}
extension MDVideocallSDK.MeetingDoctorsRole : Swift.RawRepresentable {}
extension MDVideocallSDK.MDANetworkReachabilityManager.MDConnectionType : Swift.Equatable {}
extension MDVideocallSDK.MDANetworkReachabilityManager.MDConnectionType : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.PrescriptionSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.PrescriptionAttributesSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.PrescriptionAttributesSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionAttributesSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.PrescriptionPrescriptionsSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.PrescriptionPrescriptionsSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionPrescriptionsSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.PrescriptionPriceSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.PrescriptionPriceSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionPriceSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleWeekDayModel : Swift.Equatable {}
extension MDVideocallSDK.ScheduleWeekDayModel : Swift.Hashable {}
extension MDVideocallSDK.ScheduleWeekDayModel : Swift.RawRepresentable {}
extension MDVideocallSDK.DerivationReportEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.DerivationReportEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.DerivationReportEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.CompanyReportEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.CompanyReportEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.CompanyReportEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.ProfessionalReportEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.ProfessionalReportEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.ProfessionalReportEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerInstallationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CustomerInstallationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CustomerInstallationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.BuildConfigurationType : Swift.Equatable {}
extension MDVideocallSDK.BuildConfigurationType : Swift.Hashable {}
extension MDVideocallSDK.BuildConfigurationType : Swift.RawRepresentable {}
extension MDVideocallSDK.SocketClientSchema.Output.Direction : Swift.Equatable {}
extension MDVideocallSDK.SocketClientSchema.Output.Direction : Swift.Hashable {}
extension MDVideocallSDK.SocketClientSchema.Output.Direction : Swift.RawRepresentable {}
extension MDVideocallSDK.MDVideocallStatusType : Swift.Hashable {}
extension MDVideocallSDK.MDVideocallStatusType : Swift.RawRepresentable {}
extension MDVideocallSDK.PrescriptionResponseModel.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.PrescriptionResponseModel.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.PrescriptionResponseModel.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageCellViewModel.Status : Swift.Equatable {}
extension MDVideocallSDK.MessageCellViewModel.Status : Swift.Hashable {}
extension MDVideocallSDK.MessageCellViewModel.Status : Swift.RawRepresentable {}
extension MDVideocallSDK.TagEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.TagEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.TagEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.MDVideocallType : Swift.Hashable {}
extension MDVideocallSDK.MDVideocallType : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCall1to1Request.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCall1to1Request.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCall1to1Request.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallRemoteNotificationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallRemoteNotificationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallRemoteNotificationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallRemoteNotificationType : Swift.Equatable {}
extension MDVideocallSDK.VideoCallRemoteNotificationType : Swift.Hashable {}
extension MDVideocallSDK.VideoCallRemoteNotificationType : Swift.RawRepresentable {}
extension MDVideocallSDK.DerivationReportSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.DerivationReportSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.DerivationReportSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.CompanyDerivationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CompanyDerivationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CompanyDerivationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ProfessionalDerivationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ProfessionalDerivationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ProfessionalDerivationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.StatusView.Status : Swift.Equatable {}
extension MDVideocallSDK.StatusView.Status : Swift.Hashable {}
extension MDVideocallSDK.VideoCallReportEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.VideoCallReportEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.VideoCallReportEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallStatusSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallStatusSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallStatusSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalProfessionalEntity.Kind : Swift.Equatable {}
extension MDVideocallSDK.MedicalProfessionalEntity.Kind : Swift.Hashable {}
extension MDVideocallSDK.MedicalProfessionalEntity.Kind : Swift.RawRepresentable {}
extension MDVideocallSDK.SocketClientStatus : Swift.Equatable {}
extension MDVideocallSDK.SocketClientStatus : Swift.Hashable {}
extension MDVideocallSDK.SocketClientStatus : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallConsultationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallConsultationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallConsultationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ContactRoleModel : Swift.Equatable {}
extension MDVideocallSDK.ContactRoleModel : Swift.Hashable {}
extension MDVideocallSDK.ContactRoleModel : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleAvailabilityModel : Swift.Equatable {}
extension MDVideocallSDK.ScheduleAvailabilityModel : Swift.Hashable {}
extension MDVideocallSDK.ScheduleAvailabilityModel : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallWorkflow : Swift.Equatable {}
extension MDVideocallSDK.VideoCallWorkflow : Swift.Hashable {}
extension MDVideocallSDK.VideoCallWorkflow : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ConversationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ConversationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ConversationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageEntity.Kind : Swift.Equatable {}
extension MDVideocallSDK.MessageEntity.Kind : Swift.Hashable {}
extension MDVideocallSDK.MessageEntity.Kind : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.Method : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.Method : Swift.Hashable {}
extension MDVideocallSDK.MDHTTP.Method : Swift.RawRepresentable {}
extension MDVideocallSDK.FloatyItemLabelPositionType : Swift.Equatable {}
extension MDVideocallSDK.FloatyItemLabelPositionType : Swift.Hashable {}
extension MDVideocallSDK.FloatyItemLabelPositionType : Swift.RawRepresentable {}
extension MDVideocallSDK.MessengerRemoteNotificationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessengerRemoteNotificationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessengerRemoteNotificationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessengerRemoteNotificationType : Swift.Equatable {}
extension MDVideocallSDK.MessengerRemoteNotificationType : Swift.Hashable {}
extension MDVideocallSDK.MessengerRemoteNotificationType : Swift.RawRepresentable {}
extension MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessengerProfessionalRemoteNotificationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.UserDefaultsProperty.Keys : Swift.Equatable {}
extension MDVideocallSDK.UserDefaultsProperty.Keys : Swift.Hashable {}
extension MDVideocallSDK.UserDefaultsProperty.Keys : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoStatusModel : Swift.Equatable {}
extension MDVideocallSDK.VideoStatusModel : Swift.Hashable {}
extension MDVideocallSDK.VideoStatusModel : Swift.RawRepresentable {}
extension MDVideocallSDK.InboxHeaderCellViewModel : MDVideocallSDK.InboxBaseCellViewModelType {}
extension MDVideocallSDK.NetworkType : Swift.Equatable {}
extension MDVideocallSDK.NetworkType : Swift.Hashable {}
extension MDVideocallSDK.SocketStreamError.StreamFailureReason : Swift.Equatable {}
extension MDVideocallSDK.SocketStreamError.StreamFailureReason : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessageSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageSchema.Metadata.TextCodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessageSchema.Metadata.TextCodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.Metadata.TextCodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageSchema.Metadata.ImageCodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessageSchema.Metadata.ImageCodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.Metadata.ImageCodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MessageSchema.Metadata.FileCodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MessageSchema.Metadata.FileCodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MessageSchema.Metadata.FileCodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerUserSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CustomerUserSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CustomerUserSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MeetingDoctorsSaturation : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsSaturation : Swift.Hashable {}
extension MDVideocallSDK.MeetingDoctorsSaturation : Swift.RawRepresentable {}
extension MDVideocallSDK.SocketEmissionType : Swift.Equatable {}
extension MDVideocallSDK.SocketEmissionType : Swift.Hashable {}
extension MDVideocallSDK.SocketEmissionType : Swift.RawRepresentable {}
extension MDVideocallSDK.SocketListenerType : Swift.Equatable {}
extension MDVideocallSDK.SocketListenerType : Swift.Hashable {}
extension MDVideocallSDK.SocketListenerType : Swift.RawRepresentable {}
extension MDVideocallSDK.LogLevel : Swift.Equatable {}
extension MDVideocallSDK.LogLevel : Swift.Hashable {}
extension MDVideocallSDK.LogLevel : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerAuthEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.CustomerAuthEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.CustomerAuthEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.IMCEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.IMCEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.IMCEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.SetupProfessionalListSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.SetupProfessionalListSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.SetupProfessionalListSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.SetupProfessionalListType : Swift.Equatable {}
extension MDVideocallSDK.SetupProfessionalListType : Swift.Hashable {}
extension MDVideocallSDK.SetupProfessionalListType : Swift.RawRepresentable {}
extension MDVideocallSDK.TypingSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.TypingSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.TypingSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.SpecialityTypeModel : Swift.Equatable {}
extension MDVideocallSDK.SpecialityTypeModel : Swift.Hashable {}
extension MDVideocallSDK.SpecialityTypeModel : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallResponse.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallResponse.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallResponse.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.ScheduleEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.ScheduleEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleEntity.State : Swift.Equatable {}
extension MDVideocallSDK.ScheduleEntity.State : Swift.Hashable {}
extension MDVideocallSDK.ScheduleEntity.State : Swift.RawRepresentable {}
extension MDVideocallSDK.ScheduleEntity.WeekDay : Swift.Equatable {}
extension MDVideocallSDK.ScheduleEntity.WeekDay : Swift.Hashable {}
extension MDVideocallSDK.ScheduleEntity.WeekDay : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalCoverageEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.MedicalCoverageEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.MedicalCoverageEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.ConnectionStatusModel : Swift.Equatable {}
extension MDVideocallSDK.ConnectionStatusModel : Swift.Hashable {}
extension MDVideocallSDK.ConnectionStatusModel : Swift.RawRepresentable {}
extension MDVideocallSDK.ActionMessageSchemaValues : Swift.Equatable {}
extension MDVideocallSDK.ActionMessageSchemaValues : Swift.Hashable {}
extension MDVideocallSDK.ActionMessageSchemaValues : Swift.RawRepresentable {}
extension MDVideocallSDK.MDCommonSimpleDataResponse.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MDCommonSimpleDataResponse.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MDCommonSimpleDataResponse.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MDPermissionStatusEnum : Swift.Equatable {}
extension MDVideocallSDK.MDPermissionStatusEnum : Swift.Hashable {}
extension MDVideocallSDK.MDPermissionStatusEnum : Swift.RawRepresentable {}
extension MDVideocallSDK.MDCommonDataMetaResponse.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.MDCommonDataMetaResponse.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.MDCommonDataMetaResponse.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MDPermissionTypeEnum : Swift.Equatable {}
extension MDVideocallSDK.MDPermissionTypeEnum : Swift.Hashable {}
extension MDVideocallSDK.MDPermissionTypeEnum : Swift.RawRepresentable {}
extension MDVideocallSDK.CustomerNotificationSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CustomerNotificationSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CustomerNotificationSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.VideoCallStatusResponse.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.VideoCallStatusResponse.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.VideoCallStatusResponse.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ReferralSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ReferralSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ReferralSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.ReferralAttributesSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.ReferralAttributesSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.ReferralAttributesSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.StatusCode : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.StatusCode : Swift.Hashable {}
extension MDVideocallSDK.MDHTTP.StatusCode : Swift.RawRepresentable {}
extension MDVideocallSDK.MDHTTP.StatusCode.ResponseType : Swift.Equatable {}
extension MDVideocallSDK.MDHTTP.StatusCode.ResponseType : Swift.Hashable {}
extension MDVideocallSDK.CommonMetaSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.CommonMetaSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.CommonMetaSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.SpecialitySchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.SpecialitySchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.SpecialitySchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.LastMessageSchema.CodingKeys : Swift.Equatable {}
extension MDVideocallSDK.LastMessageSchema.CodingKeys : Swift.Hashable {}
extension MDVideocallSDK.LastMessageSchema.CodingKeys : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalProfessionalEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.MedicalProfessionalEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.MedicalProfessionalEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.MeetingDoctorsError.IllegalStateExceptionReason : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsError.IllegalStateExceptionReason : Swift.Hashable {}
extension MDVideocallSDK.MeetingDoctorsError.GroupsExceptionReason : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsError.GroupsExceptionReason : Swift.Hashable {}
extension MDVideocallSDK.MeetingDoctorsError.VideoCallExceptionReason : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsError.VideoCallExceptionReason : Swift.Hashable {}
extension MDVideocallSDK.MeetingDoctorsError.DataBase : Swift.Equatable {}
extension MDVideocallSDK.MeetingDoctorsError.DataBase : Swift.Hashable {}
extension MDVideocallSDK.RequestGenerationError : Swift.Equatable {}
extension MDVideocallSDK.RequestGenerationError : Swift.Hashable {}
extension MDVideocallSDK.KeychainAccessOption : Swift.Equatable {}
extension MDVideocallSDK.KeychainAccessOption : Swift.Hashable {}
extension MDVideocallSDK.VideoCallUserEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.VideoCallUserEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.VideoCallUserEntity.Attributes : Swift.RawRepresentable {}
extension MDVideocallSDK.MedicalProfessionalSchema.Kind : Swift.Hashable {}
extension MDVideocallSDK.MedicalProfessionalSchema.Kind : Swift.RawRepresentable {}
extension MDVideocallSDK.AvatarStatusView.Size : Swift.Equatable {}
extension MDVideocallSDK.AvatarStatusView.Size : Swift.Hashable {}
extension MDVideocallSDK.AvatarStatusView.Size : Swift.RawRepresentable {}
extension MDVideocallSDK.InstallationEntity.Attributes : Swift.Equatable {}
extension MDVideocallSDK.InstallationEntity.Attributes : Swift.Hashable {}
extension MDVideocallSDK.InstallationEntity.Attributes : Swift.RawRepresentable {}
